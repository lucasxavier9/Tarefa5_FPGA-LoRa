// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : colorlight_i5.v
// Device     : LFE5U-45F-6BG381C
// LiteX sha1 : --------
// Date       : 2025-10-31 10:58:14
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module colorlight_i5 (
    input  wire          clk25,
    input  wire          cpu_reset_n,
    input  wire          i2c_scl,
    input  wire          i2c_sda,
    output wire          lora_reset,
    output wire   [10:0] sdram_a,
    output wire    [1:0] sdram_ba,
    output wire          sdram_cas_n,
    output wire          sdram_clock,
    input  wire   [31:0] sdram_dq,
    output wire          sdram_ras_n,
    output wire          sdram_we_n,
    input  wire          serial_rx,
    output reg           serial_tx,
    output reg           spi_clk,
    output reg           spi_cs_n,
    input  wire          spi_miso,
    output reg           spi_mosi,
    output wire          spiflash_cs_n,
    input  wire          spiflash_miso,
    output wire          spiflash_mosi,
    output wire          user_led_n0
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (ECP5PLL)
│    │    └─── [EHXPLLL]
└─── bus (SoCBusHandler)
│    └─── offset_0* (Offset)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourcelevel_0* (EventSourceLevel)
│    │    └─── eventsourcelevel_1* (EventSourceLevel)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── spi (SPIMaster)
│    └─── fsm (FSM)
└─── lora_reset (GPIOOut)
└─── i2c (I2CMaster)
└─── spiflash (LiteSPI)
│    └─── crossbar (LiteSPICrossbar)
│    │    └─── rr (RoundRobin)
│    │    └─── tx_mux (Multiplexer)
│    │    └─── rx_demux (Demultiplexer)
│    └─── mmap (LiteSPIMMAP)
│    │    └─── burst_timeout (WaitTimer)
│    │    └─── fsm (FSM)
│    └─── master (LiteSPIMaster)
│    │    └─── tx_fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    └─── rx_fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    └─── phy (LiteSPIPHY)
│    │    └─── spiflash_phy (LiteSPISDRPHYCore)
│    │    │    └─── resyncreg_0* (ResyncReg)
│    │    │    └─── clkgen (LiteSPIClkGen)
│    │    │    │    └─── [USRMCLK]
│    │    │    └─── cs_control (LiteSPICSControl)
│    │    │    │    └─── timer (WaitTimer)
│    │    │    └─── fsm (FSM)
└─── sdrphy (GENSDRPHY)
└─── sdram (LiteDRAMCore)
│    └─── dfii (DFIInjector)
│    │    └─── pi0 (PhaseInjector)
│    └─── controller (LiteDRAMController)
│    │    └─── refresher (Refresher)
│    │    │    └─── timer (RefreshTimer)
│    │    │    └─── postponer (RefreshPostponer)
│    │    │    └─── sequencer (RefreshSequencer)
│    │    │    │    └─── refreshexecuter_0* (RefreshExecuter)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_0* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_1* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_2* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_3* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── multiplexer (Multiplexer)
│    │    │    └─── choose_cmd (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── choose_req (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── _steerer_0* (_Steerer)
│    │    │    └─── trrdcon (tXXDController)
│    │    │    └─── tfawcon (tFAWController)
│    │    │    └─── tccdcon (tXXDController)
│    │    │    └─── twtrcon (tXXDController)
│    │    │    └─── fsm (FSM)
│    └─── crossbar (LiteDRAMCrossbar)
│    │    └─── roundrobin_0* (RoundRobin)
│    │    └─── roundrobin_1* (RoundRobin)
│    │    └─── roundrobin_2* (RoundRobin)
│    │    └─── roundrobin_3* (RoundRobin)
└─── l2_cache (Cache)
│    └─── fsm (FSM)
└─── wishbone_bridge (LiteDRAMWishbone2Native)
│    └─── litedramnativeportconverter_0* (LiteDRAMNativePortConverter)
│    │    └─── converter (LiteDRAMNativePortDownConverter)
│    │    │    └─── fsm (FSM)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _downconverter_0* (_DownConverter)
│    │    │    └─── pipeline_0* (Pipeline)
│    │    │    └─── strideconverter_1* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    │    └─── pipeline_1* (Pipeline)
│    └─── fsm (FSM)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_7* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_8* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [FD1S3BX]
└─── [FD1S3BX]
└─── [FD1S3BX]
└─── [FD1S3BX]
└─── [ODDRX1F]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           _r_re = 1'd0;
wire          _r_status;
wire          _r_we;
reg           _w_re = 1'd0;
reg     [2:0] _w_storage = 3'd5;
wire          basesoc_adapted_interface_ack;
wire   [29:0] basesoc_adapted_interface_adr;
wire    [1:0] basesoc_adapted_interface_bte;
wire    [2:0] basesoc_adapted_interface_cti;
wire          basesoc_adapted_interface_cyc;
wire   [31:0] basesoc_adapted_interface_dat_r;
wire   [31:0] basesoc_adapted_interface_dat_w;
wire          basesoc_adapted_interface_err;
wire    [3:0] basesoc_adapted_interface_sel;
wire          basesoc_adapted_interface_stb;
wire          basesoc_adapted_interface_we;
reg     [1:0] basesoc_adr_offset_r = 2'd0;
wire   [14:0] basesoc_basesoc_adr;
reg           basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] basesoc_basesoc_dat_r;
reg           basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_basesoc_ram_bus_adr;
wire    [1:0] basesoc_basesoc_ram_bus_bte;
wire    [2:0] basesoc_basesoc_ram_bus_cti;
wire          basesoc_basesoc_ram_bus_cyc;
wire   [31:0] basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] basesoc_basesoc_ram_bus_dat_w;
reg           basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] basesoc_basesoc_ram_bus_sel;
wire          basesoc_basesoc_ram_bus_stb;
wire          basesoc_basesoc_ram_bus_we;
wire          basesoc_bus_error;
reg    [31:0] basesoc_bus_errors = 32'd0;
reg           basesoc_bus_errors_re = 1'd0;
wire   [31:0] basesoc_bus_errors_status;
wire          basesoc_bus_errors_we;
wire          basesoc_cpu_rst;
wire          basesoc_crg_ecp5pll;
wire          basesoc_crg_locked;
reg           basesoc_crossbar_cs = 1'd0;
wire          basesoc_crossbar_sink_first;
wire          basesoc_crossbar_sink_last;
wire   [31:0] basesoc_crossbar_sink_payload_data;
wire          basesoc_crossbar_sink_ready;
wire          basesoc_crossbar_sink_valid;
wire          basesoc_crossbar_source_first;
wire          basesoc_crossbar_source_last;
wire   [31:0] basesoc_crossbar_source_payload_data;
wire    [5:0] basesoc_crossbar_source_payload_len;
wire    [7:0] basesoc_crossbar_source_payload_mask;
wire    [3:0] basesoc_crossbar_source_payload_width;
wire          basesoc_crossbar_source_ready;
wire          basesoc_crossbar_source_valid;
wire    [8:0] basesoc_data_port_adr;
wire  [127:0] basesoc_data_port_dat_r;
reg   [127:0] basesoc_data_port_dat_w = 128'd0;
reg    [15:0] basesoc_data_port_we = 16'd0;
wire          basesoc_dbus_ack;
wire   [29:0] basesoc_dbus_adr;
wire    [1:0] basesoc_dbus_bte;
wire    [2:0] basesoc_dbus_cti;
wire          basesoc_dbus_cyc;
wire   [31:0] basesoc_dbus_dat_r;
wire   [31:0] basesoc_dbus_dat_w;
wire          basesoc_dbus_err;
wire    [3:0] basesoc_dbus_sel;
wire          basesoc_dbus_stb;
wire          basesoc_dbus_we;
reg     [1:0] basesoc_fsm_next_state = 2'd0;
reg     [1:0] basesoc_fsm_state = 2'd0;
reg     [1:0] basesoc_fullmemorywe_next_state = 2'd0;
reg     [1:0] basesoc_fullmemorywe_state = 2'd0;
reg           basesoc_grant = 1'd0;
wire          basesoc_ibus_ack;
wire   [29:0] basesoc_ibus_adr;
wire    [1:0] basesoc_ibus_bte;
wire    [2:0] basesoc_ibus_cti;
wire          basesoc_ibus_cyc;
wire   [31:0] basesoc_ibus_dat_r;
wire   [31:0] basesoc_ibus_dat_w;
wire          basesoc_ibus_err;
wire    [3:0] basesoc_ibus_sel;
wire          basesoc_ibus_stb;
wire          basesoc_ibus_we;
reg           basesoc_interface0_ack = 1'd0;
wire   [29:0] basesoc_interface0_adr;
wire    [1:0] basesoc_interface0_bte;
wire    [2:0] basesoc_interface0_cti;
wire          basesoc_interface0_cyc;
reg    [31:0] basesoc_interface0_dat_r = 32'd0;
wire   [31:0] basesoc_interface0_dat_w;
reg           basesoc_interface0_err = 1'd0;
wire    [3:0] basesoc_interface0_sel;
wire          basesoc_interface0_stb;
wire          basesoc_interface0_we;
reg    [13:0] basesoc_interface1_adr = 14'd0;
reg    [13:0] basesoc_interface1_adr_wishbone2csr_next_value1 = 14'd0;
reg           basesoc_interface1_adr_wishbone2csr_next_value_ce1 = 1'd0;
wire   [31:0] basesoc_interface1_dat_r;
reg    [31:0] basesoc_interface1_dat_w = 32'd0;
reg    [31:0] basesoc_interface1_dat_w_wishbone2csr_next_value0 = 32'd0;
reg           basesoc_interface1_dat_w_wishbone2csr_next_value_ce0 = 1'd0;
reg           basesoc_interface1_re = 1'd0;
reg           basesoc_interface1_re_wishbone2csr_next_value2 = 1'd0;
reg           basesoc_interface1_re_wishbone2csr_next_value_ce2 = 1'd0;
reg           basesoc_interface1_we = 1'd0;
reg           basesoc_interface1_we_wishbone2csr_next_value3 = 1'd0;
reg           basesoc_interface1_we_wishbone2csr_next_value_ce3 = 1'd0;
reg           basesoc_interface_ack = 1'd0;
wire   [27:0] basesoc_interface_adr;
reg           basesoc_interface_cyc = 1'd0;
reg   [127:0] basesoc_interface_dat_r = 128'd0;
wire  [127:0] basesoc_interface_dat_w;
wire   [15:0] basesoc_interface_sel;
reg           basesoc_interface_stb = 1'd0;
reg           basesoc_interface_we = 1'd0;
reg    [31:0] basesoc_interrupt = 32'd0;
reg     [2:0] basesoc_litedramcore_bankmachine0_next_state = 3'd0;
reg     [2:0] basesoc_litedramcore_bankmachine0_state = 3'd0;
reg     [2:0] basesoc_litedramcore_bankmachine1_next_state = 3'd0;
reg     [2:0] basesoc_litedramcore_bankmachine1_state = 3'd0;
reg     [2:0] basesoc_litedramcore_bankmachine2_next_state = 3'd0;
reg     [2:0] basesoc_litedramcore_bankmachine2_state = 3'd0;
reg     [2:0] basesoc_litedramcore_bankmachine3_next_state = 3'd0;
reg     [2:0] basesoc_litedramcore_bankmachine3_state = 3'd0;
reg           basesoc_litedramcore_locked0 = 1'd0;
reg           basesoc_litedramcore_locked1 = 1'd0;
reg           basesoc_litedramcore_locked2 = 1'd0;
reg           basesoc_litedramcore_locked3 = 1'd0;
reg     [2:0] basesoc_litedramcore_multiplexer_next_state = 3'd0;
reg     [2:0] basesoc_litedramcore_multiplexer_state = 3'd0;
reg           basesoc_litedramcore_new_master_rdata_valid0 = 1'd0;
reg           basesoc_litedramcore_new_master_rdata_valid1 = 1'd0;
reg           basesoc_litedramcore_new_master_rdata_valid2 = 1'd0;
reg           basesoc_litedramcore_new_master_rdata_valid3 = 1'd0;
reg           basesoc_litedramcore_new_master_wdata_ready = 1'd0;
reg     [1:0] basesoc_litedramcore_refresher_next_state = 2'd0;
reg     [1:0] basesoc_litedramcore_refresher_state = 2'd0;
wire          basesoc_litedramcore_roundrobin0_ce;
wire          basesoc_litedramcore_roundrobin0_grant;
wire          basesoc_litedramcore_roundrobin0_request;
wire          basesoc_litedramcore_roundrobin1_ce;
wire          basesoc_litedramcore_roundrobin1_grant;
wire          basesoc_litedramcore_roundrobin1_request;
wire          basesoc_litedramcore_roundrobin2_ce;
wire          basesoc_litedramcore_roundrobin2_grant;
wire          basesoc_litedramcore_roundrobin2_request;
wire          basesoc_litedramcore_roundrobin3_ce;
wire          basesoc_litedramcore_roundrobin3_grant;
wire          basesoc_litedramcore_roundrobin3_request;
reg           basesoc_litedramnativeportconverter_next_state = 1'd0;
reg           basesoc_litedramnativeportconverter_state = 1'd0;
reg     [3:0] basesoc_litespimmap_next_state = 4'd0;
reg     [3:0] basesoc_litespimmap_state = 4'd0;
reg     [1:0] basesoc_litespiphy_next_state = 2'd0;
reg     [1:0] basesoc_litespiphy_state = 2'd0;
wire          basesoc_master_cs;
reg           basesoc_master_cs_re = 1'd0;
reg           basesoc_master_cs_storage = 1'd0;
wire    [7:0] basesoc_master_len;
wire    [7:0] basesoc_master_mask;
reg           basesoc_master_phyconfig_re = 1'd0;
reg    [23:0] basesoc_master_phyconfig_storage = 24'd0;
wire          basesoc_master_rx_fifo_pipe_valid_sink_first;
wire          basesoc_master_rx_fifo_pipe_valid_sink_last;
wire   [31:0] basesoc_master_rx_fifo_pipe_valid_sink_payload_data;
wire          basesoc_master_rx_fifo_pipe_valid_sink_ready;
wire          basesoc_master_rx_fifo_pipe_valid_sink_valid;
reg           basesoc_master_rx_fifo_pipe_valid_source_first = 1'd0;
reg           basesoc_master_rx_fifo_pipe_valid_source_last = 1'd0;
reg    [31:0] basesoc_master_rx_fifo_pipe_valid_source_payload_data = 32'd0;
wire          basesoc_master_rx_fifo_pipe_valid_source_ready;
reg           basesoc_master_rx_fifo_pipe_valid_source_valid = 1'd0;
wire          basesoc_master_rx_fifo_sink_sink_first;
wire          basesoc_master_rx_fifo_sink_sink_last;
wire   [31:0] basesoc_master_rx_fifo_sink_sink_payload_data;
wire          basesoc_master_rx_fifo_sink_sink_ready;
wire          basesoc_master_rx_fifo_sink_sink_valid;
wire          basesoc_master_rx_fifo_source_source_first;
wire          basesoc_master_rx_fifo_source_source_last;
wire   [31:0] basesoc_master_rx_fifo_source_source_payload_data;
wire          basesoc_master_rx_fifo_source_source_ready;
wire          basesoc_master_rx_fifo_source_source_valid;
wire          basesoc_master_rx_ready;
wire   [31:0] basesoc_master_rxtx_r;
reg           basesoc_master_rxtx_re = 1'd0;
wire   [31:0] basesoc_master_rxtx_w;
reg           basesoc_master_rxtx_we = 1'd0;
wire          basesoc_master_sink_first;
wire          basesoc_master_sink_last;
wire   [31:0] basesoc_master_sink_payload_data;
wire          basesoc_master_sink_ready;
wire          basesoc_master_sink_valid;
wire          basesoc_master_source_first;
wire          basesoc_master_source_last;
wire   [31:0] basesoc_master_source_payload_data;
wire    [5:0] basesoc_master_source_payload_len;
wire    [7:0] basesoc_master_source_payload_mask;
wire    [3:0] basesoc_master_source_payload_width;
wire          basesoc_master_source_ready;
wire          basesoc_master_source_valid;
reg           basesoc_master_status_re = 1'd0;
reg     [1:0] basesoc_master_status_status = 2'd0;
wire          basesoc_master_status_we;
wire          basesoc_master_tx_fifo_pipe_valid_sink_first;
wire          basesoc_master_tx_fifo_pipe_valid_sink_last;
wire   [31:0] basesoc_master_tx_fifo_pipe_valid_sink_payload_data;
wire    [5:0] basesoc_master_tx_fifo_pipe_valid_sink_payload_len;
wire    [7:0] basesoc_master_tx_fifo_pipe_valid_sink_payload_mask;
wire    [3:0] basesoc_master_tx_fifo_pipe_valid_sink_payload_width;
wire          basesoc_master_tx_fifo_pipe_valid_sink_ready;
wire          basesoc_master_tx_fifo_pipe_valid_sink_valid;
reg           basesoc_master_tx_fifo_pipe_valid_source_first = 1'd0;
reg           basesoc_master_tx_fifo_pipe_valid_source_last = 1'd0;
reg    [31:0] basesoc_master_tx_fifo_pipe_valid_source_payload_data = 32'd0;
reg     [5:0] basesoc_master_tx_fifo_pipe_valid_source_payload_len = 6'd0;
reg     [7:0] basesoc_master_tx_fifo_pipe_valid_source_payload_mask = 8'd0;
reg     [3:0] basesoc_master_tx_fifo_pipe_valid_source_payload_width = 4'd0;
wire          basesoc_master_tx_fifo_pipe_valid_source_ready;
reg           basesoc_master_tx_fifo_pipe_valid_source_valid = 1'd0;
reg           basesoc_master_tx_fifo_sink_sink_first = 1'd0;
reg           basesoc_master_tx_fifo_sink_sink_last = 1'd0;
wire   [31:0] basesoc_master_tx_fifo_sink_sink_payload_data;
wire    [5:0] basesoc_master_tx_fifo_sink_sink_payload_len;
wire    [7:0] basesoc_master_tx_fifo_sink_sink_payload_mask;
wire    [3:0] basesoc_master_tx_fifo_sink_sink_payload_width;
wire          basesoc_master_tx_fifo_sink_sink_ready;
wire          basesoc_master_tx_fifo_sink_sink_valid;
wire          basesoc_master_tx_fifo_source_source_first;
wire          basesoc_master_tx_fifo_source_source_last;
wire   [31:0] basesoc_master_tx_fifo_source_source_payload_data;
wire    [5:0] basesoc_master_tx_fifo_source_source_payload_len;
wire    [7:0] basesoc_master_tx_fifo_source_source_payload_mask;
wire    [3:0] basesoc_master_tx_fifo_source_source_payload_width;
wire          basesoc_master_tx_fifo_source_source_ready;
wire          basesoc_master_tx_fifo_source_source_valid;
wire          basesoc_master_tx_ready;
wire    [3:0] basesoc_master_width;
reg    [29:0] basesoc_mmap_burst_adr = 30'd0;
reg    [29:0] basesoc_mmap_burst_adr_litespimmap_next_value2 = 30'd0;
reg           basesoc_mmap_burst_adr_litespimmap_next_value_ce2 = 1'd0;
reg           basesoc_mmap_burst_cs = 1'd0;
reg           basesoc_mmap_burst_cs_litespimmap_next_value0 = 1'd0;
reg           basesoc_mmap_burst_cs_litespimmap_next_value_ce0 = 1'd0;
reg           basesoc_mmap_bus_ack = 1'd0;
reg    [29:0] basesoc_mmap_bus_adr = 30'd0;
wire    [1:0] basesoc_mmap_bus_bte;
wire    [2:0] basesoc_mmap_bus_cti;
wire          basesoc_mmap_bus_cyc;
reg    [31:0] basesoc_mmap_bus_dat_r = 32'd0;
wire   [31:0] basesoc_mmap_bus_dat_w;
reg           basesoc_mmap_bus_err = 1'd0;
wire    [3:0] basesoc_mmap_bus_sel;
wire          basesoc_mmap_bus_stb;
wire          basesoc_mmap_bus_we;
reg     [1:0] basesoc_mmap_byte_count = 2'd0;
reg     [1:0] basesoc_mmap_byte_count_litespimmap_next_value1 = 2'd0;
reg           basesoc_mmap_byte_count_litespimmap_next_value_ce1 = 1'd0;
reg     [8:0] basesoc_mmap_count = 9'd256;
reg           basesoc_mmap_cs = 1'd0;
wire          basesoc_mmap_done;
reg    [31:0] basesoc_mmap_dummy = 32'd57005;
reg           basesoc_mmap_re = 1'd0;
reg           basesoc_mmap_request = 1'd0;
wire          basesoc_mmap_sink_first;
wire          basesoc_mmap_sink_last;
wire   [31:0] basesoc_mmap_sink_payload_data;
reg           basesoc_mmap_sink_ready = 1'd0;
wire          basesoc_mmap_sink_valid;
reg           basesoc_mmap_source_first = 1'd0;
reg           basesoc_mmap_source_last = 1'd0;
reg    [31:0] basesoc_mmap_source_payload_data = 32'd0;
reg     [5:0] basesoc_mmap_source_payload_len = 6'd0;
reg     [7:0] basesoc_mmap_source_payload_mask = 8'd0;
reg     [3:0] basesoc_mmap_source_payload_width = 4'd0;
wire          basesoc_mmap_source_ready;
reg           basesoc_mmap_source_valid = 1'd0;
wire    [7:0] basesoc_mmap_spi_dummy_bits;
reg     [7:0] basesoc_mmap_storage = 8'd0;
reg           basesoc_mmap_wait = 1'd0;
reg    [20:0] basesoc_port_cmd_payload_addr = 21'd0;
reg           basesoc_port_cmd_payload_we = 1'd0;
wire          basesoc_port_cmd_ready;
reg           basesoc_port_cmd_valid = 1'd0;
wire          basesoc_port_master_internal_port_sink_first;
wire          basesoc_port_master_internal_port_sink_last;
wire   [31:0] basesoc_port_master_internal_port_sink_payload_data;
wire    [5:0] basesoc_port_master_internal_port_sink_payload_len;
wire    [7:0] basesoc_port_master_internal_port_sink_payload_mask;
wire    [3:0] basesoc_port_master_internal_port_sink_payload_width;
wire          basesoc_port_master_internal_port_sink_ready;
wire          basesoc_port_master_internal_port_sink_valid;
wire          basesoc_port_master_internal_port_source_first;
wire          basesoc_port_master_internal_port_source_last;
wire   [31:0] basesoc_port_master_internal_port_source_payload_data;
wire          basesoc_port_master_internal_port_source_ready;
wire          basesoc_port_master_internal_port_source_valid;
wire          basesoc_port_master_request;
wire          basesoc_port_master_user_port_sink_first;
wire          basesoc_port_master_user_port_sink_last;
wire   [31:0] basesoc_port_master_user_port_sink_payload_data;
wire    [5:0] basesoc_port_master_user_port_sink_payload_len;
wire    [7:0] basesoc_port_master_user_port_sink_payload_mask;
wire    [3:0] basesoc_port_master_user_port_sink_payload_width;
wire          basesoc_port_master_user_port_sink_ready;
wire          basesoc_port_master_user_port_sink_valid;
wire          basesoc_port_master_user_port_source_first;
wire          basesoc_port_master_user_port_source_last;
wire   [31:0] basesoc_port_master_user_port_source_payload_data;
wire          basesoc_port_master_user_port_source_ready;
wire          basesoc_port_master_user_port_source_valid;
wire          basesoc_port_mmap_internal_port_sink_first;
wire          basesoc_port_mmap_internal_port_sink_last;
wire   [31:0] basesoc_port_mmap_internal_port_sink_payload_data;
wire    [5:0] basesoc_port_mmap_internal_port_sink_payload_len;
wire    [7:0] basesoc_port_mmap_internal_port_sink_payload_mask;
wire    [3:0] basesoc_port_mmap_internal_port_sink_payload_width;
wire          basesoc_port_mmap_internal_port_sink_ready;
wire          basesoc_port_mmap_internal_port_sink_valid;
wire          basesoc_port_mmap_internal_port_source_first;
wire          basesoc_port_mmap_internal_port_source_last;
wire   [31:0] basesoc_port_mmap_internal_port_source_payload_data;
wire          basesoc_port_mmap_internal_port_source_ready;
wire          basesoc_port_mmap_internal_port_source_valid;
wire          basesoc_port_mmap_user_port_sink_first;
wire          basesoc_port_mmap_user_port_sink_last;
wire   [31:0] basesoc_port_mmap_user_port_sink_payload_data;
wire    [5:0] basesoc_port_mmap_user_port_sink_payload_len;
wire    [7:0] basesoc_port_mmap_user_port_sink_payload_mask;
wire    [3:0] basesoc_port_mmap_user_port_sink_payload_width;
wire          basesoc_port_mmap_user_port_sink_ready;
wire          basesoc_port_mmap_user_port_sink_valid;
wire          basesoc_port_mmap_user_port_source_first;
wire          basesoc_port_mmap_user_port_source_last;
wire   [31:0] basesoc_port_mmap_user_port_source_payload_data;
wire          basesoc_port_mmap_user_port_source_ready;
wire          basesoc_port_mmap_user_port_source_valid;
reg           basesoc_port_rdata_first = 1'd0;
reg           basesoc_port_rdata_last = 1'd0;
wire   [31:0] basesoc_port_rdata_payload_data;
wire          basesoc_port_rdata_ready;
wire          basesoc_port_rdata_valid;
wire          basesoc_port_wdata_first;
wire          basesoc_port_wdata_last;
wire   [31:0] basesoc_port_wdata_payload_data;
wire    [3:0] basesoc_port_wdata_payload_we;
wire          basesoc_port_wdata_ready;
wire          basesoc_port_wdata_valid;
wire   [10:0] basesoc_ram_adr;
reg           basesoc_ram_adr_burst = 1'd0;
reg           basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_ram_bus_ram_bus_adr;
wire    [1:0] basesoc_ram_bus_ram_bus_bte;
wire    [2:0] basesoc_ram_bus_ram_bus_cti;
wire          basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] basesoc_ram_bus_ram_bus_dat_w;
reg           basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] basesoc_ram_bus_ram_bus_sel;
wire          basesoc_ram_bus_ram_bus_stb;
wire          basesoc_ram_bus_ram_bus_we;
wire   [31:0] basesoc_ram_dat_r;
wire   [31:0] basesoc_ram_dat_w;
reg     [3:0] basesoc_ram_we = 4'd0;
wire    [1:0] basesoc_request;
wire          basesoc_reset;
reg           basesoc_reset_re = 1'd0;
reg     [1:0] basesoc_reset_storage = 2'd0;
reg           basesoc_rs232phyrx_next_state = 1'd0;
reg           basesoc_rs232phyrx_state = 1'd0;
reg           basesoc_rs232phytx_next_state = 1'd0;
reg           basesoc_rs232phytx_state = 1'd0;
reg     [3:0] basesoc_rx_count = 4'd0;
reg     [3:0] basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_rx_data = 8'd0;
reg     [7:0] basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           basesoc_rx_demux_endpoint0_source_first = 1'd0;
reg           basesoc_rx_demux_endpoint0_source_last = 1'd0;
reg    [31:0] basesoc_rx_demux_endpoint0_source_payload_data = 32'd0;
wire          basesoc_rx_demux_endpoint0_source_ready;
reg           basesoc_rx_demux_endpoint0_source_valid = 1'd0;
reg           basesoc_rx_demux_endpoint1_source_first = 1'd0;
reg           basesoc_rx_demux_endpoint1_source_last = 1'd0;
reg    [31:0] basesoc_rx_demux_endpoint1_source_payload_data = 32'd0;
wire          basesoc_rx_demux_endpoint1_source_ready;
reg           basesoc_rx_demux_endpoint1_source_valid = 1'd0;
wire          basesoc_rx_demux_sel;
wire          basesoc_rx_demux_sink_first;
wire          basesoc_rx_demux_sink_last;
wire   [31:0] basesoc_rx_demux_sink_payload_data;
reg           basesoc_rx_demux_sink_ready = 1'd0;
wire          basesoc_rx_demux_sink_valid;
reg           basesoc_rx_enable = 1'd0;
reg    [31:0] basesoc_rx_phase = 32'd0;
wire          basesoc_rx_rx;
reg           basesoc_rx_rx_d = 1'd0;
reg           basesoc_rx_source_first = 1'd0;
reg           basesoc_rx_source_last = 1'd0;
reg     [7:0] basesoc_rx_source_payload_data = 8'd0;
wire          basesoc_rx_source_ready;
reg           basesoc_rx_source_valid = 1'd0;
reg           basesoc_rx_tick = 1'd0;
reg           basesoc_scratch_re = 1'd0;
reg    [31:0] basesoc_scratch_storage = 32'd305419896;
reg           basesoc_sdram_address_re = 1'd0;
reg    [10:0] basesoc_sdram_address_storage = 11'd0;
reg           basesoc_sdram_baddress_re = 1'd0;
reg     [1:0] basesoc_sdram_baddress_storage = 2'd0;
reg           basesoc_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [10:0] basesoc_sdram_bankmachine0_cmd_payload_a = 11'd0;
wire    [1:0] basesoc_sdram_bankmachine0_cmd_payload_ba;
reg           basesoc_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine0_consume = 3'd0;
wire          basesoc_sdram_bankmachine0_do_read;
wire          basesoc_sdram_bankmachine0_fifo_in_first;
wire          basesoc_sdram_bankmachine0_fifo_in_last;
wire   [18:0] basesoc_sdram_bankmachine0_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine0_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine0_fifo_out_first;
wire          basesoc_sdram_bankmachine0_fifo_out_last;
wire   [18:0] basesoc_sdram_bankmachine0_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine0_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine0_level = 4'd0;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_last;
wire   [18:0] basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [18:0] basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr = 19'd0;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine0_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine0_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine0_rdport_adr;
wire   [21:0] basesoc_sdram_bankmachine0_rdport_dat_r;
reg           basesoc_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine0_refresh_req;
reg           basesoc_sdram_bankmachine0_replace = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine0_req_addr;
wire          basesoc_sdram_bankmachine0_req_lock;
reg           basesoc_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine0_req_ready;
wire          basesoc_sdram_bankmachine0_req_valid;
reg           basesoc_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_req_we;
reg    [10:0] basesoc_sdram_bankmachine0_row = 11'd0;
reg           basesoc_sdram_bankmachine0_row_close = 1'd0;
reg           basesoc_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine0_row_hit;
reg           basesoc_sdram_bankmachine0_row_open = 1'd0;
reg           basesoc_sdram_bankmachine0_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine0_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine0_sink_last = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine0_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_sink_payload_we;
wire          basesoc_sdram_bankmachine0_sink_ready;
wire          basesoc_sdram_bankmachine0_sink_sink_first;
wire          basesoc_sdram_bankmachine0_sink_sink_last;
wire   [18:0] basesoc_sdram_bankmachine0_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine0_sink_sink_ready;
wire          basesoc_sdram_bankmachine0_sink_sink_valid;
wire          basesoc_sdram_bankmachine0_sink_valid;
wire          basesoc_sdram_bankmachine0_source_first;
wire          basesoc_sdram_bankmachine0_source_last;
wire   [18:0] basesoc_sdram_bankmachine0_source_payload_addr;
wire          basesoc_sdram_bankmachine0_source_payload_we;
wire          basesoc_sdram_bankmachine0_source_ready;
wire          basesoc_sdram_bankmachine0_source_source_first;
wire          basesoc_sdram_bankmachine0_source_source_last;
wire   [18:0] basesoc_sdram_bankmachine0_source_source_payload_addr;
wire          basesoc_sdram_bankmachine0_source_source_payload_we;
wire          basesoc_sdram_bankmachine0_source_source_ready;
wire          basesoc_sdram_bankmachine0_source_source_valid;
wire          basesoc_sdram_bankmachine0_source_valid;
wire   [21:0] basesoc_sdram_bankmachine0_syncfifo0_din;
wire   [21:0] basesoc_sdram_bankmachine0_syncfifo0_dout;
wire          basesoc_sdram_bankmachine0_syncfifo0_re;
wire          basesoc_sdram_bankmachine0_syncfifo0_readable;
wire          basesoc_sdram_bankmachine0_syncfifo0_we;
wire          basesoc_sdram_bankmachine0_syncfifo0_writable;
reg     [1:0] basesoc_sdram_bankmachine0_trascon_count = 2'd0;
reg           basesoc_sdram_bankmachine0_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_trascon_valid;
reg     [1:0] basesoc_sdram_bankmachine0_trccon_count = 2'd0;
reg           basesoc_sdram_bankmachine0_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_trccon_valid;
reg     [1:0] basesoc_sdram_bankmachine0_twtpcon_count = 2'd0;
reg           basesoc_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine0_wrport_adr = 3'd0;
wire   [21:0] basesoc_sdram_bankmachine0_wrport_dat_r;
wire   [21:0] basesoc_sdram_bankmachine0_wrport_dat_w;
wire          basesoc_sdram_bankmachine0_wrport_we;
reg           basesoc_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [10:0] basesoc_sdram_bankmachine1_cmd_payload_a = 11'd0;
wire    [1:0] basesoc_sdram_bankmachine1_cmd_payload_ba;
reg           basesoc_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine1_consume = 3'd0;
wire          basesoc_sdram_bankmachine1_do_read;
wire          basesoc_sdram_bankmachine1_fifo_in_first;
wire          basesoc_sdram_bankmachine1_fifo_in_last;
wire   [18:0] basesoc_sdram_bankmachine1_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine1_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine1_fifo_out_first;
wire          basesoc_sdram_bankmachine1_fifo_out_last;
wire   [18:0] basesoc_sdram_bankmachine1_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine1_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine1_level = 4'd0;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_last;
wire   [18:0] basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [18:0] basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr = 19'd0;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine1_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine1_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine1_rdport_adr;
wire   [21:0] basesoc_sdram_bankmachine1_rdport_dat_r;
reg           basesoc_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine1_refresh_req;
reg           basesoc_sdram_bankmachine1_replace = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine1_req_addr;
wire          basesoc_sdram_bankmachine1_req_lock;
reg           basesoc_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine1_req_ready;
wire          basesoc_sdram_bankmachine1_req_valid;
reg           basesoc_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_req_we;
reg    [10:0] basesoc_sdram_bankmachine1_row = 11'd0;
reg           basesoc_sdram_bankmachine1_row_close = 1'd0;
reg           basesoc_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine1_row_hit;
reg           basesoc_sdram_bankmachine1_row_open = 1'd0;
reg           basesoc_sdram_bankmachine1_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine1_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine1_sink_last = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine1_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_sink_payload_we;
wire          basesoc_sdram_bankmachine1_sink_ready;
wire          basesoc_sdram_bankmachine1_sink_sink_first;
wire          basesoc_sdram_bankmachine1_sink_sink_last;
wire   [18:0] basesoc_sdram_bankmachine1_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine1_sink_sink_ready;
wire          basesoc_sdram_bankmachine1_sink_sink_valid;
wire          basesoc_sdram_bankmachine1_sink_valid;
wire          basesoc_sdram_bankmachine1_source_first;
wire          basesoc_sdram_bankmachine1_source_last;
wire   [18:0] basesoc_sdram_bankmachine1_source_payload_addr;
wire          basesoc_sdram_bankmachine1_source_payload_we;
wire          basesoc_sdram_bankmachine1_source_ready;
wire          basesoc_sdram_bankmachine1_source_source_first;
wire          basesoc_sdram_bankmachine1_source_source_last;
wire   [18:0] basesoc_sdram_bankmachine1_source_source_payload_addr;
wire          basesoc_sdram_bankmachine1_source_source_payload_we;
wire          basesoc_sdram_bankmachine1_source_source_ready;
wire          basesoc_sdram_bankmachine1_source_source_valid;
wire          basesoc_sdram_bankmachine1_source_valid;
wire   [21:0] basesoc_sdram_bankmachine1_syncfifo1_din;
wire   [21:0] basesoc_sdram_bankmachine1_syncfifo1_dout;
wire          basesoc_sdram_bankmachine1_syncfifo1_re;
wire          basesoc_sdram_bankmachine1_syncfifo1_readable;
wire          basesoc_sdram_bankmachine1_syncfifo1_we;
wire          basesoc_sdram_bankmachine1_syncfifo1_writable;
reg     [1:0] basesoc_sdram_bankmachine1_trascon_count = 2'd0;
reg           basesoc_sdram_bankmachine1_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_trascon_valid;
reg     [1:0] basesoc_sdram_bankmachine1_trccon_count = 2'd0;
reg           basesoc_sdram_bankmachine1_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_trccon_valid;
reg     [1:0] basesoc_sdram_bankmachine1_twtpcon_count = 2'd0;
reg           basesoc_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine1_wrport_adr = 3'd0;
wire   [21:0] basesoc_sdram_bankmachine1_wrport_dat_r;
wire   [21:0] basesoc_sdram_bankmachine1_wrport_dat_w;
wire          basesoc_sdram_bankmachine1_wrport_we;
reg           basesoc_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [10:0] basesoc_sdram_bankmachine2_cmd_payload_a = 11'd0;
wire    [1:0] basesoc_sdram_bankmachine2_cmd_payload_ba;
reg           basesoc_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine2_consume = 3'd0;
wire          basesoc_sdram_bankmachine2_do_read;
wire          basesoc_sdram_bankmachine2_fifo_in_first;
wire          basesoc_sdram_bankmachine2_fifo_in_last;
wire   [18:0] basesoc_sdram_bankmachine2_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine2_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine2_fifo_out_first;
wire          basesoc_sdram_bankmachine2_fifo_out_last;
wire   [18:0] basesoc_sdram_bankmachine2_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine2_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine2_level = 4'd0;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_last;
wire   [18:0] basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [18:0] basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr = 19'd0;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine2_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine2_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine2_rdport_adr;
wire   [21:0] basesoc_sdram_bankmachine2_rdport_dat_r;
reg           basesoc_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine2_refresh_req;
reg           basesoc_sdram_bankmachine2_replace = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine2_req_addr;
wire          basesoc_sdram_bankmachine2_req_lock;
reg           basesoc_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine2_req_ready;
wire          basesoc_sdram_bankmachine2_req_valid;
reg           basesoc_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_req_we;
reg    [10:0] basesoc_sdram_bankmachine2_row = 11'd0;
reg           basesoc_sdram_bankmachine2_row_close = 1'd0;
reg           basesoc_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine2_row_hit;
reg           basesoc_sdram_bankmachine2_row_open = 1'd0;
reg           basesoc_sdram_bankmachine2_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine2_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine2_sink_last = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine2_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_sink_payload_we;
wire          basesoc_sdram_bankmachine2_sink_ready;
wire          basesoc_sdram_bankmachine2_sink_sink_first;
wire          basesoc_sdram_bankmachine2_sink_sink_last;
wire   [18:0] basesoc_sdram_bankmachine2_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine2_sink_sink_ready;
wire          basesoc_sdram_bankmachine2_sink_sink_valid;
wire          basesoc_sdram_bankmachine2_sink_valid;
wire          basesoc_sdram_bankmachine2_source_first;
wire          basesoc_sdram_bankmachine2_source_last;
wire   [18:0] basesoc_sdram_bankmachine2_source_payload_addr;
wire          basesoc_sdram_bankmachine2_source_payload_we;
wire          basesoc_sdram_bankmachine2_source_ready;
wire          basesoc_sdram_bankmachine2_source_source_first;
wire          basesoc_sdram_bankmachine2_source_source_last;
wire   [18:0] basesoc_sdram_bankmachine2_source_source_payload_addr;
wire          basesoc_sdram_bankmachine2_source_source_payload_we;
wire          basesoc_sdram_bankmachine2_source_source_ready;
wire          basesoc_sdram_bankmachine2_source_source_valid;
wire          basesoc_sdram_bankmachine2_source_valid;
wire   [21:0] basesoc_sdram_bankmachine2_syncfifo2_din;
wire   [21:0] basesoc_sdram_bankmachine2_syncfifo2_dout;
wire          basesoc_sdram_bankmachine2_syncfifo2_re;
wire          basesoc_sdram_bankmachine2_syncfifo2_readable;
wire          basesoc_sdram_bankmachine2_syncfifo2_we;
wire          basesoc_sdram_bankmachine2_syncfifo2_writable;
reg     [1:0] basesoc_sdram_bankmachine2_trascon_count = 2'd0;
reg           basesoc_sdram_bankmachine2_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_trascon_valid;
reg     [1:0] basesoc_sdram_bankmachine2_trccon_count = 2'd0;
reg           basesoc_sdram_bankmachine2_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_trccon_valid;
reg     [1:0] basesoc_sdram_bankmachine2_twtpcon_count = 2'd0;
reg           basesoc_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine2_wrport_adr = 3'd0;
wire   [21:0] basesoc_sdram_bankmachine2_wrport_dat_r;
wire   [21:0] basesoc_sdram_bankmachine2_wrport_dat_w;
wire          basesoc_sdram_bankmachine2_wrport_we;
reg           basesoc_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [10:0] basesoc_sdram_bankmachine3_cmd_payload_a = 11'd0;
wire    [1:0] basesoc_sdram_bankmachine3_cmd_payload_ba;
reg           basesoc_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine3_consume = 3'd0;
wire          basesoc_sdram_bankmachine3_do_read;
wire          basesoc_sdram_bankmachine3_fifo_in_first;
wire          basesoc_sdram_bankmachine3_fifo_in_last;
wire   [18:0] basesoc_sdram_bankmachine3_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine3_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine3_fifo_out_first;
wire          basesoc_sdram_bankmachine3_fifo_out_last;
wire   [18:0] basesoc_sdram_bankmachine3_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine3_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine3_level = 4'd0;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_last;
wire   [18:0] basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [18:0] basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr = 19'd0;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine3_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine3_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine3_rdport_adr;
wire   [21:0] basesoc_sdram_bankmachine3_rdport_dat_r;
reg           basesoc_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine3_refresh_req;
reg           basesoc_sdram_bankmachine3_replace = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine3_req_addr;
wire          basesoc_sdram_bankmachine3_req_lock;
reg           basesoc_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine3_req_ready;
wire          basesoc_sdram_bankmachine3_req_valid;
reg           basesoc_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_req_we;
reg    [10:0] basesoc_sdram_bankmachine3_row = 11'd0;
reg           basesoc_sdram_bankmachine3_row_close = 1'd0;
reg           basesoc_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine3_row_hit;
reg           basesoc_sdram_bankmachine3_row_open = 1'd0;
reg           basesoc_sdram_bankmachine3_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine3_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine3_sink_last = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine3_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_sink_payload_we;
wire          basesoc_sdram_bankmachine3_sink_ready;
wire          basesoc_sdram_bankmachine3_sink_sink_first;
wire          basesoc_sdram_bankmachine3_sink_sink_last;
wire   [18:0] basesoc_sdram_bankmachine3_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine3_sink_sink_ready;
wire          basesoc_sdram_bankmachine3_sink_sink_valid;
wire          basesoc_sdram_bankmachine3_sink_valid;
wire          basesoc_sdram_bankmachine3_source_first;
wire          basesoc_sdram_bankmachine3_source_last;
wire   [18:0] basesoc_sdram_bankmachine3_source_payload_addr;
wire          basesoc_sdram_bankmachine3_source_payload_we;
wire          basesoc_sdram_bankmachine3_source_ready;
wire          basesoc_sdram_bankmachine3_source_source_first;
wire          basesoc_sdram_bankmachine3_source_source_last;
wire   [18:0] basesoc_sdram_bankmachine3_source_source_payload_addr;
wire          basesoc_sdram_bankmachine3_source_source_payload_we;
wire          basesoc_sdram_bankmachine3_source_source_ready;
wire          basesoc_sdram_bankmachine3_source_source_valid;
wire          basesoc_sdram_bankmachine3_source_valid;
wire   [21:0] basesoc_sdram_bankmachine3_syncfifo3_din;
wire   [21:0] basesoc_sdram_bankmachine3_syncfifo3_dout;
wire          basesoc_sdram_bankmachine3_syncfifo3_re;
wire          basesoc_sdram_bankmachine3_syncfifo3_readable;
wire          basesoc_sdram_bankmachine3_syncfifo3_we;
wire          basesoc_sdram_bankmachine3_syncfifo3_writable;
reg     [1:0] basesoc_sdram_bankmachine3_trascon_count = 2'd0;
reg           basesoc_sdram_bankmachine3_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_trascon_valid;
reg     [1:0] basesoc_sdram_bankmachine3_trccon_count = 2'd0;
reg           basesoc_sdram_bankmachine3_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_trccon_valid;
reg     [1:0] basesoc_sdram_bankmachine3_twtpcon_count = 2'd0;
reg           basesoc_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine3_wrport_adr = 3'd0;
wire   [21:0] basesoc_sdram_bankmachine3_wrport_dat_r;
wire   [21:0] basesoc_sdram_bankmachine3_wrport_dat_w;
wire          basesoc_sdram_bankmachine3_wrport_we;
wire          basesoc_sdram_cas_allowed;
wire          basesoc_sdram_choose_cmd_ce;
wire   [10:0] basesoc_sdram_choose_cmd_cmd_payload_a;
wire    [1:0] basesoc_sdram_choose_cmd_cmd_payload_ba;
reg           basesoc_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_cmd;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_read;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_write;
reg           basesoc_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           basesoc_sdram_choose_cmd_cmd_ready = 1'd0;
wire          basesoc_sdram_choose_cmd_cmd_valid;
reg     [1:0] basesoc_sdram_choose_cmd_grant = 2'd0;
wire    [3:0] basesoc_sdram_choose_cmd_request;
reg     [3:0] basesoc_sdram_choose_cmd_valids = 4'd0;
reg           basesoc_sdram_choose_cmd_want_activates = 1'd0;
reg           basesoc_sdram_choose_cmd_want_cmds = 1'd0;
reg           basesoc_sdram_choose_cmd_want_reads = 1'd0;
reg           basesoc_sdram_choose_cmd_want_writes = 1'd0;
wire          basesoc_sdram_choose_req_ce;
wire   [10:0] basesoc_sdram_choose_req_cmd_payload_a;
wire    [1:0] basesoc_sdram_choose_req_cmd_payload_ba;
reg           basesoc_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          basesoc_sdram_choose_req_cmd_payload_is_cmd;
wire          basesoc_sdram_choose_req_cmd_payload_is_read;
wire          basesoc_sdram_choose_req_cmd_payload_is_write;
reg           basesoc_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_choose_req_cmd_payload_we = 1'd0;
reg           basesoc_sdram_choose_req_cmd_ready = 1'd0;
wire          basesoc_sdram_choose_req_cmd_valid;
reg     [1:0] basesoc_sdram_choose_req_grant = 2'd0;
wire    [3:0] basesoc_sdram_choose_req_request;
reg     [3:0] basesoc_sdram_choose_req_valids = 4'd0;
reg           basesoc_sdram_choose_req_want_activates = 1'd0;
wire          basesoc_sdram_choose_req_want_cmds;
reg           basesoc_sdram_choose_req_want_reads = 1'd0;
reg           basesoc_sdram_choose_req_want_writes = 1'd0;
wire          basesoc_sdram_cke;
reg           basesoc_sdram_cmd_last = 1'd0;
reg    [10:0] basesoc_sdram_cmd_payload_a = 11'd0;
reg     [1:0] basesoc_sdram_cmd_payload_ba = 2'd0;
reg           basesoc_sdram_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_cmd_payload_we = 1'd0;
reg           basesoc_sdram_cmd_ready = 1'd0;
reg           basesoc_sdram_cmd_valid = 1'd0;
wire          basesoc_sdram_command_issue_r;
reg           basesoc_sdram_command_issue_re = 1'd0;
reg           basesoc_sdram_command_issue_w = 1'd0;
reg           basesoc_sdram_command_issue_we = 1'd0;
reg           basesoc_sdram_command_re = 1'd0;
reg     [7:0] basesoc_sdram_command_storage = 8'd0;
reg           basesoc_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [10:0] basesoc_sdram_csr_dfi_p0_address;
wire    [1:0] basesoc_sdram_csr_dfi_p0_bank;
reg           basesoc_sdram_csr_dfi_p0_cas_n = 1'd1;
wire          basesoc_sdram_csr_dfi_p0_cke;
reg           basesoc_sdram_csr_dfi_p0_cs_n = 1'd1;
wire          basesoc_sdram_csr_dfi_p0_odt;
reg           basesoc_sdram_csr_dfi_p0_ras_n = 1'd1;
reg    [31:0] basesoc_sdram_csr_dfi_p0_rddata = 32'd0;
wire          basesoc_sdram_csr_dfi_p0_rddata_en;
reg           basesoc_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          basesoc_sdram_csr_dfi_p0_reset_n;
reg           basesoc_sdram_csr_dfi_p0_we_n = 1'd1;
wire   [31:0] basesoc_sdram_csr_dfi_p0_wrdata;
wire          basesoc_sdram_csr_dfi_p0_wrdata_en;
wire    [3:0] basesoc_sdram_csr_dfi_p0_wrdata_mask;
wire          basesoc_sdram_csrfield_cas;
wire          basesoc_sdram_csrfield_cs;
wire          basesoc_sdram_csrfield_cs_bottom;
wire          basesoc_sdram_csrfield_cs_top;
wire          basesoc_sdram_csrfield_ras;
wire          basesoc_sdram_csrfield_rden;
wire          basesoc_sdram_csrfield_we;
wire          basesoc_sdram_csrfield_wren;
reg           basesoc_sdram_dfi_p0_act_n = 1'd1;
reg    [10:0] basesoc_sdram_dfi_p0_address = 11'd0;
reg     [1:0] basesoc_sdram_dfi_p0_bank = 2'd0;
reg           basesoc_sdram_dfi_p0_cas_n = 1'd1;
wire          basesoc_sdram_dfi_p0_cke;
reg           basesoc_sdram_dfi_p0_cs_n = 1'd1;
wire          basesoc_sdram_dfi_p0_odt;
reg           basesoc_sdram_dfi_p0_ras_n = 1'd1;
wire   [31:0] basesoc_sdram_dfi_p0_rddata;
reg           basesoc_sdram_dfi_p0_rddata_en = 1'd0;
wire          basesoc_sdram_dfi_p0_rddata_valid;
wire          basesoc_sdram_dfi_p0_reset_n;
reg           basesoc_sdram_dfi_p0_we_n = 1'd1;
wire   [31:0] basesoc_sdram_dfi_p0_wrdata;
reg           basesoc_sdram_dfi_p0_wrdata_en = 1'd0;
wire    [3:0] basesoc_sdram_dfi_p0_wrdata_mask;
reg           basesoc_sdram_en0 = 1'd0;
reg           basesoc_sdram_en1 = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [10:0] basesoc_sdram_ext_dfi_p0_address = 11'd0;
reg     [1:0] basesoc_sdram_ext_dfi_p0_bank = 2'd0;
reg           basesoc_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           basesoc_sdram_ext_dfi_p0_cke = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           basesoc_sdram_ext_dfi_p0_odt = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_ras_n = 1'd1;
reg    [31:0] basesoc_sdram_ext_dfi_p0_rddata = 32'd0;
reg           basesoc_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_we_n = 1'd1;
reg    [31:0] basesoc_sdram_ext_dfi_p0_wrdata = 32'd0;
reg           basesoc_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg     [3:0] basesoc_sdram_ext_dfi_p0_wrdata_mask = 4'd0;
reg           basesoc_sdram_ext_dfi_sel = 1'd0;
wire          basesoc_sdram_go_to_refresh;
wire   [18:0] basesoc_sdram_interface_bank0_addr;
wire          basesoc_sdram_interface_bank0_lock;
wire          basesoc_sdram_interface_bank0_rdata_valid;
wire          basesoc_sdram_interface_bank0_ready;
wire          basesoc_sdram_interface_bank0_valid;
wire          basesoc_sdram_interface_bank0_wdata_ready;
wire          basesoc_sdram_interface_bank0_we;
wire   [18:0] basesoc_sdram_interface_bank1_addr;
wire          basesoc_sdram_interface_bank1_lock;
wire          basesoc_sdram_interface_bank1_rdata_valid;
wire          basesoc_sdram_interface_bank1_ready;
wire          basesoc_sdram_interface_bank1_valid;
wire          basesoc_sdram_interface_bank1_wdata_ready;
wire          basesoc_sdram_interface_bank1_we;
wire   [18:0] basesoc_sdram_interface_bank2_addr;
wire          basesoc_sdram_interface_bank2_lock;
wire          basesoc_sdram_interface_bank2_rdata_valid;
wire          basesoc_sdram_interface_bank2_ready;
wire          basesoc_sdram_interface_bank2_valid;
wire          basesoc_sdram_interface_bank2_wdata_ready;
wire          basesoc_sdram_interface_bank2_we;
wire   [18:0] basesoc_sdram_interface_bank3_addr;
wire          basesoc_sdram_interface_bank3_lock;
wire          basesoc_sdram_interface_bank3_rdata_valid;
wire          basesoc_sdram_interface_bank3_ready;
wire          basesoc_sdram_interface_bank3_valid;
wire          basesoc_sdram_interface_bank3_wdata_ready;
wire          basesoc_sdram_interface_bank3_we;
wire   [31:0] basesoc_sdram_interface_rdata;
reg    [31:0] basesoc_sdram_interface_wdata = 32'd0;
reg     [3:0] basesoc_sdram_interface_wdata_we = 4'd0;
reg           basesoc_sdram_master_p0_act_n = 1'd1;
reg    [10:0] basesoc_sdram_master_p0_address = 11'd0;
reg     [1:0] basesoc_sdram_master_p0_bank = 2'd0;
reg           basesoc_sdram_master_p0_cas_n = 1'd1;
reg           basesoc_sdram_master_p0_cke = 1'd0;
reg           basesoc_sdram_master_p0_cs_n = 1'd1;
reg           basesoc_sdram_master_p0_odt = 1'd0;
reg           basesoc_sdram_master_p0_ras_n = 1'd1;
wire   [31:0] basesoc_sdram_master_p0_rddata;
reg           basesoc_sdram_master_p0_rddata_en = 1'd0;
wire          basesoc_sdram_master_p0_rddata_valid;
reg           basesoc_sdram_master_p0_reset_n = 1'd0;
reg           basesoc_sdram_master_p0_we_n = 1'd1;
reg    [31:0] basesoc_sdram_master_p0_wrdata = 32'd0;
reg           basesoc_sdram_master_p0_wrdata_en = 1'd0;
reg     [3:0] basesoc_sdram_master_p0_wrdata_mask = 4'd0;
wire          basesoc_sdram_max_time0;
wire          basesoc_sdram_max_time1;
reg    [10:0] basesoc_sdram_nop_a = 11'd0;
reg     [1:0] basesoc_sdram_nop_ba = 2'd0;
wire          basesoc_sdram_odt;
reg           basesoc_sdram_postponer_count = 1'd0;
wire          basesoc_sdram_postponer_req_i;
reg           basesoc_sdram_postponer_req_o = 1'd0;
wire          basesoc_sdram_ras_allowed;
reg           basesoc_sdram_rddata_re = 1'd0;
reg    [31:0] basesoc_sdram_rddata_status = 32'd0;
wire          basesoc_sdram_rddata_we;
reg           basesoc_sdram_re = 1'd0;
wire          basesoc_sdram_read_available;
wire          basesoc_sdram_reset_n;
wire          basesoc_sdram_sel;
reg           basesoc_sdram_sequencer_count = 1'd0;
wire          basesoc_sdram_sequencer_done0;
reg           basesoc_sdram_sequencer_done1 = 1'd0;
reg           basesoc_sdram_sequencer_start0 = 1'd0;
wire          basesoc_sdram_sequencer_start1;
reg     [2:0] basesoc_sdram_sequencer_trigger = 3'd0;
wire          basesoc_sdram_slave_p0_act_n;
wire   [10:0] basesoc_sdram_slave_p0_address;
wire    [1:0] basesoc_sdram_slave_p0_bank;
wire          basesoc_sdram_slave_p0_cas_n;
wire          basesoc_sdram_slave_p0_cke;
wire          basesoc_sdram_slave_p0_cs_n;
wire          basesoc_sdram_slave_p0_odt;
wire          basesoc_sdram_slave_p0_ras_n;
reg    [31:0] basesoc_sdram_slave_p0_rddata = 32'd0;
wire          basesoc_sdram_slave_p0_rddata_en;
reg           basesoc_sdram_slave_p0_rddata_valid = 1'd0;
wire          basesoc_sdram_slave_p0_reset_n;
wire          basesoc_sdram_slave_p0_we_n;
wire   [31:0] basesoc_sdram_slave_p0_wrdata;
wire          basesoc_sdram_slave_p0_wrdata_en;
wire    [3:0] basesoc_sdram_slave_p0_wrdata_mask;
reg           basesoc_sdram_steerer0 = 1'd1;
reg           basesoc_sdram_steerer1 = 1'd1;
reg     [1:0] basesoc_sdram_steerer_sel = 2'd0;
reg     [3:0] basesoc_sdram_storage = 4'd1;
reg           basesoc_sdram_tccdcon_count = 1'd0;
reg           basesoc_sdram_tccdcon_ready = 1'd0;
wire          basesoc_sdram_tccdcon_valid;
reg           basesoc_sdram_tfawcon_ready = 1'd1;
wire          basesoc_sdram_tfawcon_valid;
reg     [4:0] basesoc_sdram_time0 = 5'd0;
reg     [3:0] basesoc_sdram_time1 = 4'd0;
wire    [9:0] basesoc_sdram_timer_count0;
reg     [9:0] basesoc_sdram_timer_count1 = 10'd937;
wire          basesoc_sdram_timer_done0;
wire          basesoc_sdram_timer_done1;
wire          basesoc_sdram_timer_wait;
reg           basesoc_sdram_trrdcon_count = 1'd0;
reg           basesoc_sdram_trrdcon_ready = 1'd0;
wire          basesoc_sdram_trrdcon_valid;
reg     [2:0] basesoc_sdram_twtrcon_count = 3'd0;
reg           basesoc_sdram_twtrcon_ready = 1'd0;
wire          basesoc_sdram_twtrcon_valid;
wire          basesoc_sdram_wants_refresh;
reg           basesoc_sdram_wrdata_re = 1'd0;
reg    [31:0] basesoc_sdram_wrdata_storage = 32'd0;
wire          basesoc_sdram_write_available;
reg           basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           basesoc_soc_rst = 1'd0;
reg           basesoc_spiflash_phy_clk = 1'd0;
reg           basesoc_spiflash_phy_clk_reg = 1'd0;
reg     [7:0] basesoc_spiflash_phy_cnt = 8'd0;
reg     [3:0] basesoc_spiflash_phy_count = 4'd11;
wire          basesoc_spiflash_phy_cs;
wire          basesoc_spiflash_phy_cs_n;
reg     [7:0] basesoc_spiflash_phy_div = 8'd0;
wire          basesoc_spiflash_phy_done;
wire    [1:0] basesoc_spiflash_phy_dq_i;
reg           basesoc_spiflash_phy_dq_o = 1'd0;
reg           basesoc_spiflash_phy_dq_oe = 1'd0;
reg           basesoc_spiflash_phy_dq_oe_litespiphy_next_value2 = 1'd0;
reg           basesoc_spiflash_phy_dq_oe_litespiphy_next_value_ce2 = 1'd0;
reg           basesoc_spiflash_phy_en = 1'd0;
reg           basesoc_spiflash_phy_en_int = 1'd0;
wire          basesoc_spiflash_phy_enable;
wire          basesoc_spiflash_phy_negedge;
wire          basesoc_spiflash_phy_posedge;
reg     [1:0] basesoc_spiflash_phy_posedge_reg = 2'd0;
wire          basesoc_spiflash_phy_posedge_reg2;
reg           basesoc_spiflash_phy_re = 1'd0;
wire          basesoc_spiflash_phy_sink_first;
wire          basesoc_spiflash_phy_sink_last;
wire   [31:0] basesoc_spiflash_phy_sink_payload_data;
wire    [5:0] basesoc_spiflash_phy_sink_payload_len;
wire    [7:0] basesoc_spiflash_phy_sink_payload_mask;
wire    [3:0] basesoc_spiflash_phy_sink_payload_width;
reg           basesoc_spiflash_phy_sink_ready = 1'd0;
wire          basesoc_spiflash_phy_sink_valid;
reg           basesoc_spiflash_phy_source_first = 1'd0;
reg           basesoc_spiflash_phy_source_last = 1'd0;
wire   [31:0] basesoc_spiflash_phy_source_payload_data;
wire          basesoc_spiflash_phy_source_ready;
reg           basesoc_spiflash_phy_source_valid = 1'd0;
wire    [7:0] basesoc_spiflash_phy_spi_clk_divisor;
reg    [31:0] basesoc_spiflash_phy_sr_in = 32'd0;
reg     [5:0] basesoc_spiflash_phy_sr_in_cnt = 6'd0;
reg     [5:0] basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value1 = 6'd0;
reg           basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value_ce1 = 1'd0;
reg           basesoc_spiflash_phy_sr_in_shift = 1'd0;
reg    [31:0] basesoc_spiflash_phy_sr_out = 32'd0;
reg     [5:0] basesoc_spiflash_phy_sr_out_cnt = 6'd0;
reg     [5:0] basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value0 = 6'd0;
reg           basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value_ce0 = 1'd0;
reg           basesoc_spiflash_phy_sr_out_load = 1'd0;
reg           basesoc_spiflash_phy_sr_out_shift = 1'd0;
reg     [7:0] basesoc_spiflash_phy_storage = 8'd1;
wire          basesoc_spiflash_phy_wait;
reg     [1:0] basesoc_spimaster_next_state = 2'd0;
reg     [1:0] basesoc_spimaster_state = 2'd0;
reg           basesoc_tag_di_dirty = 1'd0;
wire   [20:0] basesoc_tag_di_tag;
wire          basesoc_tag_do_dirty;
wire   [20:0] basesoc_tag_do_tag;
wire    [8:0] basesoc_tag_port_adr;
wire   [21:0] basesoc_tag_port_dat_r;
wire   [21:0] basesoc_tag_port_dat_w;
reg           basesoc_tag_port_we = 1'd0;
reg           basesoc_timer_en_re = 1'd0;
reg           basesoc_timer_en_storage = 1'd0;
reg           basesoc_timer_enable_re = 1'd0;
reg           basesoc_timer_enable_storage = 1'd0;
wire          basesoc_timer_irq;
reg           basesoc_timer_load_re = 1'd0;
reg    [31:0] basesoc_timer_load_storage = 32'd0;
reg           basesoc_timer_pending_r = 1'd0;
reg           basesoc_timer_pending_re = 1'd0;
wire          basesoc_timer_pending_status;
wire          basesoc_timer_pending_we;
reg           basesoc_timer_reload_re = 1'd0;
reg    [31:0] basesoc_timer_reload_storage = 32'd0;
reg           basesoc_timer_status_re = 1'd0;
wire          basesoc_timer_status_status;
wire          basesoc_timer_status_we;
reg           basesoc_timer_update_value_re = 1'd0;
reg           basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] basesoc_timer_value = 32'd0;
reg           basesoc_timer_value_re = 1'd0;
reg    [31:0] basesoc_timer_value_status = 32'd0;
wire          basesoc_timer_value_we;
wire          basesoc_timer_zero0;
wire          basesoc_timer_zero1;
wire          basesoc_timer_zero2;
reg           basesoc_timer_zero_clear = 1'd0;
reg           basesoc_timer_zero_pending = 1'd0;
wire          basesoc_timer_zero_status;
wire          basesoc_timer_zero_trigger;
reg           basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] basesoc_tx_count = 4'd0;
reg     [3:0] basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_tx_data = 8'd0;
reg     [7:0] basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           basesoc_tx_enable = 1'd0;
wire          basesoc_tx_mux_endpoint0_sink_first;
wire          basesoc_tx_mux_endpoint0_sink_last;
wire   [31:0] basesoc_tx_mux_endpoint0_sink_payload_data;
wire    [5:0] basesoc_tx_mux_endpoint0_sink_payload_len;
wire    [7:0] basesoc_tx_mux_endpoint0_sink_payload_mask;
wire    [3:0] basesoc_tx_mux_endpoint0_sink_payload_width;
reg           basesoc_tx_mux_endpoint0_sink_ready = 1'd0;
wire          basesoc_tx_mux_endpoint0_sink_valid;
wire          basesoc_tx_mux_endpoint1_sink_first;
wire          basesoc_tx_mux_endpoint1_sink_last;
wire   [31:0] basesoc_tx_mux_endpoint1_sink_payload_data;
wire    [5:0] basesoc_tx_mux_endpoint1_sink_payload_len;
wire    [7:0] basesoc_tx_mux_endpoint1_sink_payload_mask;
wire    [3:0] basesoc_tx_mux_endpoint1_sink_payload_width;
reg           basesoc_tx_mux_endpoint1_sink_ready = 1'd0;
wire          basesoc_tx_mux_endpoint1_sink_valid;
wire          basesoc_tx_mux_sel;
reg           basesoc_tx_mux_source_first = 1'd0;
reg           basesoc_tx_mux_source_last = 1'd0;
reg    [31:0] basesoc_tx_mux_source_payload_data = 32'd0;
reg     [5:0] basesoc_tx_mux_source_payload_len = 6'd0;
reg     [7:0] basesoc_tx_mux_source_payload_mask = 8'd0;
reg     [3:0] basesoc_tx_mux_source_payload_width = 4'd0;
wire          basesoc_tx_mux_source_ready;
reg           basesoc_tx_mux_source_valid = 1'd0;
reg    [31:0] basesoc_tx_phase = 32'd0;
wire          basesoc_tx_sink_first;
wire          basesoc_tx_sink_last;
wire    [7:0] basesoc_tx_sink_payload_data;
reg           basesoc_tx_sink_ready = 1'd0;
wire          basesoc_tx_sink_valid;
reg           basesoc_tx_tick = 1'd0;
reg           basesoc_uart_enable_re = 1'd0;
reg     [1:0] basesoc_uart_enable_storage = 2'd0;
wire          basesoc_uart_irq;
reg     [1:0] basesoc_uart_pending_r = 2'd0;
reg           basesoc_uart_pending_re = 1'd0;
reg     [1:0] basesoc_uart_pending_status = 2'd0;
wire          basesoc_uart_pending_we;
wire          basesoc_uart_rx0;
wire          basesoc_uart_rx1;
wire          basesoc_uart_rx2;
reg           basesoc_uart_rx_clear = 1'd0;
reg     [3:0] basesoc_uart_rx_fifo_consume = 4'd0;
wire          basesoc_uart_rx_fifo_do_read;
wire          basesoc_uart_rx_fifo_fifo_in_first;
wire          basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          basesoc_uart_rx_fifo_fifo_out_first;
wire          basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_rx_fifo_level1;
reg     [3:0] basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_rx_fifo_rdport_dat_r;
wire          basesoc_uart_rx_fifo_rdport_re;
wire          basesoc_uart_rx_fifo_re;
reg           basesoc_uart_rx_fifo_readable = 1'd0;
reg           basesoc_uart_rx_fifo_replace = 1'd0;
wire          basesoc_uart_rx_fifo_sink_first;
wire          basesoc_uart_rx_fifo_sink_last;
wire    [7:0] basesoc_uart_rx_fifo_sink_payload_data;
wire          basesoc_uart_rx_fifo_sink_ready;
wire          basesoc_uart_rx_fifo_sink_valid;
wire          basesoc_uart_rx_fifo_source_first;
wire          basesoc_uart_rx_fifo_source_last;
wire    [7:0] basesoc_uart_rx_fifo_source_payload_data;
wire          basesoc_uart_rx_fifo_source_ready;
wire          basesoc_uart_rx_fifo_source_valid;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_dout;
wire          basesoc_uart_rx_fifo_syncfifo_re;
wire          basesoc_uart_rx_fifo_syncfifo_readable;
wire          basesoc_uart_rx_fifo_syncfifo_we;
wire          basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_w;
wire          basesoc_uart_rx_fifo_wrport_we;
wire          basesoc_uart_rx_pending;
wire          basesoc_uart_rx_status;
wire          basesoc_uart_rx_trigger;
reg           basesoc_uart_rxempty_re = 1'd0;
wire          basesoc_uart_rxempty_status;
wire          basesoc_uart_rxempty_we;
reg           basesoc_uart_rxfull_re = 1'd0;
wire          basesoc_uart_rxfull_status;
wire          basesoc_uart_rxfull_we;
wire    [7:0] basesoc_uart_rxtx_r;
reg           basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] basesoc_uart_rxtx_w;
reg           basesoc_uart_rxtx_we = 1'd0;
reg           basesoc_uart_status_re = 1'd0;
reg     [1:0] basesoc_uart_status_status = 2'd0;
wire          basesoc_uart_status_we;
wire          basesoc_uart_tx0;
wire          basesoc_uart_tx1;
wire          basesoc_uart_tx2;
reg           basesoc_uart_tx_clear = 1'd0;
reg     [3:0] basesoc_uart_tx_fifo_consume = 4'd0;
wire          basesoc_uart_tx_fifo_do_read;
wire          basesoc_uart_tx_fifo_fifo_in_first;
wire          basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          basesoc_uart_tx_fifo_fifo_out_first;
wire          basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_tx_fifo_level1;
reg     [3:0] basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_tx_fifo_rdport_dat_r;
wire          basesoc_uart_tx_fifo_rdport_re;
wire          basesoc_uart_tx_fifo_re;
reg           basesoc_uart_tx_fifo_readable = 1'd0;
reg           basesoc_uart_tx_fifo_replace = 1'd0;
reg           basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] basesoc_uart_tx_fifo_sink_payload_data;
wire          basesoc_uart_tx_fifo_sink_ready;
wire          basesoc_uart_tx_fifo_sink_valid;
wire          basesoc_uart_tx_fifo_source_first;
wire          basesoc_uart_tx_fifo_source_last;
wire    [7:0] basesoc_uart_tx_fifo_source_payload_data;
wire          basesoc_uart_tx_fifo_source_ready;
wire          basesoc_uart_tx_fifo_source_valid;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_dout;
wire          basesoc_uart_tx_fifo_syncfifo_re;
wire          basesoc_uart_tx_fifo_syncfifo_readable;
wire          basesoc_uart_tx_fifo_syncfifo_we;
wire          basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_w;
wire          basesoc_uart_tx_fifo_wrport_we;
wire          basesoc_uart_tx_pending;
wire          basesoc_uart_tx_status;
wire          basesoc_uart_tx_trigger;
reg           basesoc_uart_txempty_re = 1'd0;
wire          basesoc_uart_txempty_status;
wire          basesoc_uart_txempty_we;
reg           basesoc_uart_txfull_re = 1'd0;
wire          basesoc_uart_txfull_status;
wire          basesoc_uart_txfull_we;
wire          basesoc_uart_uart_sink_first;
wire          basesoc_uart_uart_sink_last;
wire    [7:0] basesoc_uart_uart_sink_payload_data;
wire          basesoc_uart_uart_sink_ready;
wire          basesoc_uart_uart_sink_valid;
wire          basesoc_uart_uart_source_first;
wire          basesoc_uart_uart_source_last;
wire    [7:0] basesoc_uart_uart_source_payload_data;
wire          basesoc_uart_uart_source_ready;
wire          basesoc_uart_uart_source_valid;
reg    [31:0] basesoc_vexriscv = 32'd0;
reg           basesoc_wb_sdram_ack = 1'd0;
wire   [29:0] basesoc_wb_sdram_adr;
wire    [1:0] basesoc_wb_sdram_bte;
wire    [2:0] basesoc_wb_sdram_cti;
wire          basesoc_wb_sdram_cyc;
reg    [31:0] basesoc_wb_sdram_dat_r = 32'd0;
wire   [31:0] basesoc_wb_sdram_dat_w;
reg           basesoc_wb_sdram_err = 1'd0;
wire    [3:0] basesoc_wb_sdram_sel;
wire          basesoc_wb_sdram_stb;
wire          basesoc_wb_sdram_we;
reg     [1:0] basesoc_wishbone2csr_next_state = 2'd0;
reg     [1:0] basesoc_wishbone2csr_state = 2'd0;
reg           basesoc_wishbone_bridge_aborted = 1'd0;
reg           basesoc_wishbone_bridge_aborted_fsm_next_value = 1'd0;
reg           basesoc_wishbone_bridge_aborted_fsm_next_value_ce = 1'd0;
reg    [18:0] basesoc_wishbone_bridge_cmd_addr = 19'd0;
reg    [18:0] basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 = 19'd0;
reg           basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 = 1'd0;
reg     [1:0] basesoc_wishbone_bridge_cmd_count = 2'd0;
reg     [1:0] basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 = 2'd0;
reg           basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 = 1'd0;
wire          basesoc_wishbone_bridge_cmd_last;
wire   [18:0] basesoc_wishbone_bridge_cmd_payload_addr;
wire          basesoc_wishbone_bridge_cmd_payload_we;
reg           basesoc_wishbone_bridge_cmd_ready = 1'd0;
reg           basesoc_wishbone_bridge_cmd_valid = 1'd0;
reg           basesoc_wishbone_bridge_cmd_we = 1'd0;
reg           basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 = 1'd0;
reg           basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 = 1'd0;
wire          basesoc_wishbone_bridge_flush;
reg           basesoc_wishbone_bridge_is_ongoing = 1'd0;
reg     [1:0] basesoc_wishbone_bridge_rdata_converter_converter_demux = 2'd0;
wire          basesoc_wishbone_bridge_rdata_converter_converter_load_part;
wire          basesoc_wishbone_bridge_rdata_converter_converter_sink_first;
wire          basesoc_wishbone_bridge_rdata_converter_converter_sink_last;
wire   [31:0] basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
wire          basesoc_wishbone_bridge_rdata_converter_converter_sink_ready;
wire          basesoc_wishbone_bridge_rdata_converter_converter_sink_valid;
reg           basesoc_wishbone_bridge_rdata_converter_converter_source_first = 1'd0;
reg           basesoc_wishbone_bridge_rdata_converter_converter_source_last = 1'd0;
reg   [127:0] basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data = 128'd0;
reg     [2:0] basesoc_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count = 3'd0;
wire          basesoc_wishbone_bridge_rdata_converter_converter_source_ready;
wire          basesoc_wishbone_bridge_rdata_converter_converter_source_valid;
reg           basesoc_wishbone_bridge_rdata_converter_converter_strobe_all = 1'd0;
wire          basesoc_wishbone_bridge_rdata_converter_sink_first;
wire          basesoc_wishbone_bridge_rdata_converter_sink_last;
wire   [31:0] basesoc_wishbone_bridge_rdata_converter_sink_payload_data;
wire          basesoc_wishbone_bridge_rdata_converter_sink_ready;
wire          basesoc_wishbone_bridge_rdata_converter_sink_valid;
wire          basesoc_wishbone_bridge_rdata_converter_source_first;
wire          basesoc_wishbone_bridge_rdata_converter_source_last;
reg   [127:0] basesoc_wishbone_bridge_rdata_converter_source_payload_data = 128'd0;
wire          basesoc_wishbone_bridge_rdata_converter_source_ready;
wire          basesoc_wishbone_bridge_rdata_converter_source_source_first;
wire          basesoc_wishbone_bridge_rdata_converter_source_source_last;
wire  [127:0] basesoc_wishbone_bridge_rdata_converter_source_source_payload_data;
wire          basesoc_wishbone_bridge_rdata_converter_source_source_ready;
wire          basesoc_wishbone_bridge_rdata_converter_source_source_valid;
wire          basesoc_wishbone_bridge_rdata_converter_source_valid;
wire          basesoc_wishbone_bridge_rdata_first;
wire          basesoc_wishbone_bridge_rdata_last;
wire  [127:0] basesoc_wishbone_bridge_rdata_payload_data;
wire          basesoc_wishbone_bridge_rdata_ready;
wire          basesoc_wishbone_bridge_rdata_valid;
wire          basesoc_wishbone_bridge_wdata_converter_converter_first;
wire          basesoc_wishbone_bridge_wdata_converter_converter_last;
reg     [1:0] basesoc_wishbone_bridge_wdata_converter_converter_mux = 2'd0;
wire          basesoc_wishbone_bridge_wdata_converter_converter_sink_first;
wire          basesoc_wishbone_bridge_wdata_converter_converter_sink_last;
reg   [143:0] basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data = 144'd0;
wire          basesoc_wishbone_bridge_wdata_converter_converter_sink_ready;
wire          basesoc_wishbone_bridge_wdata_converter_converter_sink_valid;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_first;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_last;
reg    [35:0] basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data = 36'd0;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_ready;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_valid;
wire          basesoc_wishbone_bridge_wdata_converter_sink_first;
wire          basesoc_wishbone_bridge_wdata_converter_sink_last;
wire  [127:0] basesoc_wishbone_bridge_wdata_converter_sink_payload_data;
wire   [15:0] basesoc_wishbone_bridge_wdata_converter_sink_payload_we;
wire          basesoc_wishbone_bridge_wdata_converter_sink_ready;
wire          basesoc_wishbone_bridge_wdata_converter_sink_valid;
wire          basesoc_wishbone_bridge_wdata_converter_source_first;
wire          basesoc_wishbone_bridge_wdata_converter_source_last;
wire   [31:0] basesoc_wishbone_bridge_wdata_converter_source_payload_data;
wire    [3:0] basesoc_wishbone_bridge_wdata_converter_source_payload_we;
wire          basesoc_wishbone_bridge_wdata_converter_source_ready;
wire          basesoc_wishbone_bridge_wdata_converter_source_source_first;
wire          basesoc_wishbone_bridge_wdata_converter_source_source_last;
wire   [35:0] basesoc_wishbone_bridge_wdata_converter_source_source_payload_data;
wire          basesoc_wishbone_bridge_wdata_converter_source_source_ready;
wire          basesoc_wishbone_bridge_wdata_converter_source_source_valid;
wire          basesoc_wishbone_bridge_wdata_converter_source_valid;
reg           basesoc_wishbone_bridge_wdata_first = 1'd0;
reg           basesoc_wishbone_bridge_wdata_last = 1'd0;
wire  [127:0] basesoc_wishbone_bridge_wdata_payload_data;
wire   [15:0] basesoc_wishbone_bridge_wdata_payload_we;
wire          basesoc_wishbone_bridge_wdata_ready;
reg           basesoc_wishbone_bridge_wdata_valid = 1'd0;
reg           basesoc_word_clr = 1'd0;
reg           basesoc_word_inc = 1'd0;
reg           basesoc_write_from_slave = 1'd0;
reg    [29:0] comb_rhs_self0 = 30'd0;
reg    [31:0] comb_rhs_self1 = 32'd0;
reg     [1:0] comb_rhs_self10 = 2'd0;
reg           comb_rhs_self11 = 1'd0;
reg           comb_rhs_self12 = 1'd0;
reg           comb_rhs_self13 = 1'd0;
reg           comb_rhs_self14 = 1'd0;
reg    [10:0] comb_rhs_self15 = 11'd0;
reg     [1:0] comb_rhs_self16 = 2'd0;
reg           comb_rhs_self17 = 1'd0;
reg           comb_rhs_self18 = 1'd0;
reg           comb_rhs_self19 = 1'd0;
reg     [3:0] comb_rhs_self2 = 4'd0;
reg    [18:0] comb_rhs_self20 = 19'd0;
reg           comb_rhs_self21 = 1'd0;
reg           comb_rhs_self22 = 1'd0;
reg    [18:0] comb_rhs_self23 = 19'd0;
reg           comb_rhs_self24 = 1'd0;
reg           comb_rhs_self25 = 1'd0;
reg    [18:0] comb_rhs_self26 = 19'd0;
reg           comb_rhs_self27 = 1'd0;
reg           comb_rhs_self28 = 1'd0;
reg    [18:0] comb_rhs_self29 = 19'd0;
reg           comb_rhs_self3 = 1'd0;
reg           comb_rhs_self30 = 1'd0;
reg           comb_rhs_self31 = 1'd0;
reg           comb_rhs_self4 = 1'd0;
reg           comb_rhs_self5 = 1'd0;
reg     [2:0] comb_rhs_self6 = 3'd0;
reg     [1:0] comb_rhs_self7 = 2'd0;
reg           comb_rhs_self8 = 1'd0;
reg    [10:0] comb_rhs_self9 = 11'd0;
reg           comb_t_self0 = 1'd0;
reg           comb_t_self1 = 1'd0;
reg           comb_t_self2 = 1'd0;
reg           comb_t_self3 = 1'd0;
reg           comb_t_self4 = 1'd0;
reg           comb_t_self5 = 1'd0;
wire          crg_clkin;
wire          crg_clkout0;
wire          crg_clkout1;
wire          crg_locked;
wire          crg_reset;
reg           crg_rst = 1'd0;
reg           crg_stdby = 1'd0;
wire    [5:0] csr_bankarray_adr;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire          csr_bankarray_csrbank1_r_r;
reg           csr_bankarray_csrbank1_r_re = 1'd0;
wire          csr_bankarray_csrbank1_r_w;
reg           csr_bankarray_csrbank1_r_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire    [2:0] csr_bankarray_csrbank1_w0_r;
reg           csr_bankarray_csrbank1_w0_re = 1'd0;
wire    [2:0] csr_bankarray_csrbank1_w0_w;
reg           csr_bankarray_csrbank1_w0_we = 1'd0;
wire          csr_bankarray_csrbank2_out0_r;
reg           csr_bankarray_csrbank2_out0_re = 1'd0;
wire          csr_bankarray_csrbank2_out0_w;
reg           csr_bankarray_csrbank2_out0_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire          csr_bankarray_csrbank3_out0_r;
reg           csr_bankarray_csrbank3_out0_re = 1'd0;
wire          csr_bankarray_csrbank3_out0_w;
reg           csr_bankarray_csrbank3_out0_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire    [3:0] csr_bankarray_csrbank4_dfii_control0_r;
reg           csr_bankarray_csrbank4_dfii_control0_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_dfii_control0_w;
reg           csr_bankarray_csrbank4_dfii_control0_we = 1'd0;
wire   [10:0] csr_bankarray_csrbank4_dfii_pi0_address0_r;
reg           csr_bankarray_csrbank4_dfii_pi0_address0_re = 1'd0;
wire   [10:0] csr_bankarray_csrbank4_dfii_pi0_address0_w;
reg           csr_bankarray_csrbank4_dfii_pi0_address0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_dfii_pi0_baddress0_r;
reg           csr_bankarray_csrbank4_dfii_pi0_baddress0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_dfii_pi0_baddress0_w;
reg           csr_bankarray_csrbank4_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank4_dfii_pi0_command0_r;
reg           csr_bankarray_csrbank4_dfii_pi0_command0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank4_dfii_pi0_command0_w;
reg           csr_bankarray_csrbank4_dfii_pi0_command0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_dfii_pi0_rddata_r;
reg           csr_bankarray_csrbank4_dfii_pi0_rddata_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_dfii_pi0_rddata_w;
reg           csr_bankarray_csrbank4_dfii_pi0_rddata_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_dfii_pi0_wrdata0_r;
reg           csr_bankarray_csrbank4_dfii_pi0_wrdata0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_dfii_pi0_wrdata0_w;
reg           csr_bankarray_csrbank4_dfii_pi0_wrdata0_we = 1'd0;
wire          csr_bankarray_csrbank4_sel;
wire   [15:0] csr_bankarray_csrbank5_control0_r;
reg           csr_bankarray_csrbank5_control0_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank5_control0_w;
reg           csr_bankarray_csrbank5_control0_we = 1'd0;
wire   [16:0] csr_bankarray_csrbank5_cs0_r;
reg           csr_bankarray_csrbank5_cs0_re = 1'd0;
wire   [16:0] csr_bankarray_csrbank5_cs0_w;
reg           csr_bankarray_csrbank5_cs0_we = 1'd0;
wire          csr_bankarray_csrbank5_loopback0_r;
reg           csr_bankarray_csrbank5_loopback0_re = 1'd0;
wire          csr_bankarray_csrbank5_loopback0_w;
reg           csr_bankarray_csrbank5_loopback0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank5_miso_r;
reg           csr_bankarray_csrbank5_miso_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank5_miso_w;
reg           csr_bankarray_csrbank5_miso_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank5_mosi0_r;
reg           csr_bankarray_csrbank5_mosi0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank5_mosi0_w;
reg           csr_bankarray_csrbank5_mosi0_we = 1'd0;
wire          csr_bankarray_csrbank5_sel;
wire    [1:0] csr_bankarray_csrbank5_status_r;
reg           csr_bankarray_csrbank5_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank5_status_w;
reg           csr_bankarray_csrbank5_status_we = 1'd0;
wire          csr_bankarray_csrbank6_master_cs0_r;
reg           csr_bankarray_csrbank6_master_cs0_re = 1'd0;
wire          csr_bankarray_csrbank6_master_cs0_w;
reg           csr_bankarray_csrbank6_master_cs0_we = 1'd0;
wire   [23:0] csr_bankarray_csrbank6_master_phyconfig0_r;
reg           csr_bankarray_csrbank6_master_phyconfig0_re = 1'd0;
wire   [23:0] csr_bankarray_csrbank6_master_phyconfig0_w;
reg           csr_bankarray_csrbank6_master_phyconfig0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank6_master_status_r;
reg           csr_bankarray_csrbank6_master_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank6_master_status_w;
reg           csr_bankarray_csrbank6_master_status_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank6_mmap_dummy_bits0_r;
reg           csr_bankarray_csrbank6_mmap_dummy_bits0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank6_mmap_dummy_bits0_w;
reg           csr_bankarray_csrbank6_mmap_dummy_bits0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank6_phy_clk_divisor0_r;
reg           csr_bankarray_csrbank6_phy_clk_divisor0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank6_phy_clk_divisor0_w;
reg           csr_bankarray_csrbank6_phy_clk_divisor0_we = 1'd0;
wire          csr_bankarray_csrbank6_sel;
wire          csr_bankarray_csrbank7_en0_r;
reg           csr_bankarray_csrbank7_en0_re = 1'd0;
wire          csr_bankarray_csrbank7_en0_w;
reg           csr_bankarray_csrbank7_en0_we = 1'd0;
wire          csr_bankarray_csrbank7_ev_enable0_r;
reg           csr_bankarray_csrbank7_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank7_ev_enable0_w;
reg           csr_bankarray_csrbank7_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank7_ev_pending_r;
reg           csr_bankarray_csrbank7_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank7_ev_pending_w;
reg           csr_bankarray_csrbank7_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank7_ev_status_r;
reg           csr_bankarray_csrbank7_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank7_ev_status_w;
reg           csr_bankarray_csrbank7_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_load0_r;
reg           csr_bankarray_csrbank7_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_load0_w;
reg           csr_bankarray_csrbank7_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_reload0_r;
reg           csr_bankarray_csrbank7_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_reload0_w;
reg           csr_bankarray_csrbank7_reload0_we = 1'd0;
wire          csr_bankarray_csrbank7_sel;
wire          csr_bankarray_csrbank7_update_value0_r;
reg           csr_bankarray_csrbank7_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank7_update_value0_w;
reg           csr_bankarray_csrbank7_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_value_r;
reg           csr_bankarray_csrbank7_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_value_w;
reg           csr_bankarray_csrbank7_value_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_ev_enable0_r;
reg           csr_bankarray_csrbank8_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_ev_enable0_w;
reg           csr_bankarray_csrbank8_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_ev_pending_r;
reg           csr_bankarray_csrbank8_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_ev_pending_w;
reg           csr_bankarray_csrbank8_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_ev_status_r;
reg           csr_bankarray_csrbank8_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_ev_status_w;
reg           csr_bankarray_csrbank8_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank8_rxempty_r;
reg           csr_bankarray_csrbank8_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank8_rxempty_w;
reg           csr_bankarray_csrbank8_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank8_rxfull_r;
reg           csr_bankarray_csrbank8_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank8_rxfull_w;
reg           csr_bankarray_csrbank8_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank8_sel;
wire          csr_bankarray_csrbank8_txempty_r;
reg           csr_bankarray_csrbank8_txempty_re = 1'd0;
wire          csr_bankarray_csrbank8_txempty_w;
reg           csr_bankarray_csrbank8_txempty_we = 1'd0;
wire          csr_bankarray_csrbank8_txfull_r;
reg           csr_bankarray_csrbank8_txfull_re = 1'd0;
wire          csr_bankarray_csrbank8_txfull_w;
reg           csr_bankarray_csrbank8_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_re;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_re;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_re;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_re;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
wire          csr_bankarray_interface4_bank_bus_re;
wire          csr_bankarray_interface4_bank_bus_we;
wire   [13:0] csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface5_bank_bus_dat_w;
wire          csr_bankarray_interface5_bank_bus_re;
wire          csr_bankarray_interface5_bank_bus_we;
wire   [13:0] csr_bankarray_interface6_bank_bus_adr;
reg    [31:0] csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface6_bank_bus_dat_w;
wire          csr_bankarray_interface6_bank_bus_re;
wire          csr_bankarray_interface6_bank_bus_we;
wire   [13:0] csr_bankarray_interface7_bank_bus_adr;
reg    [31:0] csr_bankarray_interface7_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface7_bank_bus_dat_w;
wire          csr_bankarray_interface7_bank_bus_re;
wire          csr_bankarray_interface7_bank_bus_we;
wire   [13:0] csr_bankarray_interface8_bank_bus_adr;
reg    [31:0] csr_bankarray_interface8_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface8_bank_bus_dat_w;
wire          csr_bankarray_interface8_bank_bus_re;
wire          csr_bankarray_interface8_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_re;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_re;
wire          csr_interconnect_we;
wire          dfi_p0_act_n;
wire   [10:0] dfi_p0_address;
wire    [1:0] dfi_p0_bank;
wire          dfi_p0_cas_n;
wire          dfi_p0_cke;
wire          dfi_p0_cs_n;
wire          dfi_p0_odt;
wire          dfi_p0_ras_n;
wire   [31:0] dfi_p0_rddata;
wire          dfi_p0_rddata_en;
reg           dfi_p0_rddata_valid = 1'd0;
wire          dfi_p0_reset_n;
wire          dfi_p0_we_n;
wire   [31:0] dfi_p0_wrdata;
wire          dfi_p0_wrdata_en;
wire    [3:0] dfi_p0_wrdata_mask;
wire          i;
wire          latticeecp5trellissdrtristateimpl0__i;
wire          latticeecp5trellissdrtristateimpl0__o;
wire          latticeecp5trellissdrtristateimpl0_oe_n;
wire          latticeecp5trellissdrtristateimpl10__i;
wire          latticeecp5trellissdrtristateimpl10__o;
wire          latticeecp5trellissdrtristateimpl10_oe_n;
wire          latticeecp5trellissdrtristateimpl11__i;
wire          latticeecp5trellissdrtristateimpl11__o;
wire          latticeecp5trellissdrtristateimpl11_oe_n;
wire          latticeecp5trellissdrtristateimpl12__i;
wire          latticeecp5trellissdrtristateimpl12__o;
wire          latticeecp5trellissdrtristateimpl12_oe_n;
wire          latticeecp5trellissdrtristateimpl13__i;
wire          latticeecp5trellissdrtristateimpl13__o;
wire          latticeecp5trellissdrtristateimpl13_oe_n;
wire          latticeecp5trellissdrtristateimpl14__i;
wire          latticeecp5trellissdrtristateimpl14__o;
wire          latticeecp5trellissdrtristateimpl14_oe_n;
wire          latticeecp5trellissdrtristateimpl15__i;
wire          latticeecp5trellissdrtristateimpl15__o;
wire          latticeecp5trellissdrtristateimpl15_oe_n;
wire          latticeecp5trellissdrtristateimpl16__i;
wire          latticeecp5trellissdrtristateimpl16__o;
wire          latticeecp5trellissdrtristateimpl16_oe_n;
wire          latticeecp5trellissdrtristateimpl17__i;
wire          latticeecp5trellissdrtristateimpl17__o;
wire          latticeecp5trellissdrtristateimpl17_oe_n;
wire          latticeecp5trellissdrtristateimpl18__i;
wire          latticeecp5trellissdrtristateimpl18__o;
wire          latticeecp5trellissdrtristateimpl18_oe_n;
wire          latticeecp5trellissdrtristateimpl19__i;
wire          latticeecp5trellissdrtristateimpl19__o;
wire          latticeecp5trellissdrtristateimpl19_oe_n;
wire          latticeecp5trellissdrtristateimpl1__i;
wire          latticeecp5trellissdrtristateimpl1__o;
wire          latticeecp5trellissdrtristateimpl1_oe_n;
wire          latticeecp5trellissdrtristateimpl20__i;
wire          latticeecp5trellissdrtristateimpl20__o;
wire          latticeecp5trellissdrtristateimpl20_oe_n;
wire          latticeecp5trellissdrtristateimpl21__i;
wire          latticeecp5trellissdrtristateimpl21__o;
wire          latticeecp5trellissdrtristateimpl21_oe_n;
wire          latticeecp5trellissdrtristateimpl22__i;
wire          latticeecp5trellissdrtristateimpl22__o;
wire          latticeecp5trellissdrtristateimpl22_oe_n;
wire          latticeecp5trellissdrtristateimpl23__i;
wire          latticeecp5trellissdrtristateimpl23__o;
wire          latticeecp5trellissdrtristateimpl23_oe_n;
wire          latticeecp5trellissdrtristateimpl24__i;
wire          latticeecp5trellissdrtristateimpl24__o;
wire          latticeecp5trellissdrtristateimpl24_oe_n;
wire          latticeecp5trellissdrtristateimpl25__i;
wire          latticeecp5trellissdrtristateimpl25__o;
wire          latticeecp5trellissdrtristateimpl25_oe_n;
wire          latticeecp5trellissdrtristateimpl26__i;
wire          latticeecp5trellissdrtristateimpl26__o;
wire          latticeecp5trellissdrtristateimpl26_oe_n;
wire          latticeecp5trellissdrtristateimpl27__i;
wire          latticeecp5trellissdrtristateimpl27__o;
wire          latticeecp5trellissdrtristateimpl27_oe_n;
wire          latticeecp5trellissdrtristateimpl28__i;
wire          latticeecp5trellissdrtristateimpl28__o;
wire          latticeecp5trellissdrtristateimpl28_oe_n;
wire          latticeecp5trellissdrtristateimpl29__i;
wire          latticeecp5trellissdrtristateimpl29__o;
wire          latticeecp5trellissdrtristateimpl29_oe_n;
wire          latticeecp5trellissdrtristateimpl2__i;
wire          latticeecp5trellissdrtristateimpl2__o;
wire          latticeecp5trellissdrtristateimpl2_oe_n;
wire          latticeecp5trellissdrtristateimpl30__i;
wire          latticeecp5trellissdrtristateimpl30__o;
wire          latticeecp5trellissdrtristateimpl30_oe_n;
wire          latticeecp5trellissdrtristateimpl31__i;
wire          latticeecp5trellissdrtristateimpl31__o;
wire          latticeecp5trellissdrtristateimpl31_oe_n;
wire          latticeecp5trellissdrtristateimpl3__i;
wire          latticeecp5trellissdrtristateimpl3__o;
wire          latticeecp5trellissdrtristateimpl3_oe_n;
wire          latticeecp5trellissdrtristateimpl4__i;
wire          latticeecp5trellissdrtristateimpl4__o;
wire          latticeecp5trellissdrtristateimpl4_oe_n;
wire          latticeecp5trellissdrtristateimpl5__i;
wire          latticeecp5trellissdrtristateimpl5__o;
wire          latticeecp5trellissdrtristateimpl5_oe_n;
wire          latticeecp5trellissdrtristateimpl6__i;
wire          latticeecp5trellissdrtristateimpl6__o;
wire          latticeecp5trellissdrtristateimpl6_oe_n;
wire          latticeecp5trellissdrtristateimpl7__i;
wire          latticeecp5trellissdrtristateimpl7__o;
wire          latticeecp5trellissdrtristateimpl7_oe_n;
wire          latticeecp5trellissdrtristateimpl8__i;
wire          latticeecp5trellissdrtristateimpl8__o;
wire          latticeecp5trellissdrtristateimpl8_oe_n;
wire          latticeecp5trellissdrtristateimpl9__i;
wire          latticeecp5trellissdrtristateimpl9__o;
wire          latticeecp5trellissdrtristateimpl9_oe_n;
reg           leds_chaser = 1'd0;
reg    [24:0] leds_count = 25'd30000000;
wire          leds_done;
reg           leds_leds = 1'd0;
reg           leds_mode = 1'd0;
reg           leds_re = 1'd0;
reg           leds_storage = 1'd0;
wire          leds_wait;
reg           lora_reset_re = 1'd0;
reg           lora_reset_storage = 1'd0;
wire          oe;
reg     [2:0] rddata_en = 3'd0;
reg           regs0 = 1'd0;
reg           regs1 = 1'd0;
wire          rst10;
wire          rst11;
wire          scl;
wire          sda0;
wire          sda1;
reg    [19:0] socbushandler_count = 20'd1000000;
wire          socbushandler_done;
reg           socbushandler_error = 1'd0;
reg           socbushandler_grant = 1'd0;
reg     [4:0] socbushandler_master = 5'd0;
wire    [1:0] socbushandler_request;
reg           socbushandler_shared_ack = 1'd0;
wire   [29:0] socbushandler_shared_adr;
wire    [1:0] socbushandler_shared_bte;
wire    [2:0] socbushandler_shared_cti;
wire          socbushandler_shared_cyc;
reg    [31:0] socbushandler_shared_dat_r = 32'd0;
wire   [31:0] socbushandler_shared_dat_w;
wire          socbushandler_shared_err;
wire    [3:0] socbushandler_shared_sel;
wire          socbushandler_shared_stb;
wire          socbushandler_shared_we;
reg     [4:0] socbushandler_slaves = 5'd0;
wire          socbushandler_wait;
reg    [15:0] spi_clk_divider0 = 16'd60;
reg    [15:0] spi_clk_divider1 = 16'd0;
reg           spi_clk_enable = 1'd0;
wire          spi_clk_fall;
wire          spi_clk_rise;
reg           spi_control_re = 1'd0;
reg    [15:0] spi_control_storage = 16'd0;
reg     [2:0] spi_count = 3'd0;
reg     [2:0] spi_count_spimaster_next_value = 3'd0;
reg           spi_count_spimaster_next_value_ce = 1'd0;
wire          spi_cs;
wire          spi_cs_mode;
reg           spi_cs_re = 1'd0;
reg    [16:0] spi_cs_storage = 17'd1;
reg           spi_done0 = 1'd0;
wire          spi_done1;
reg           spi_irq = 1'd0;
wire    [7:0] spi_length0;
wire    [7:0] spi_length1;
wire          spi_loopback;
reg           spi_loopback_re = 1'd0;
reg           spi_loopback_storage = 1'd0;
reg     [7:0] spi_miso_1 = 8'd0;
reg     [7:0] spi_miso_data = 8'd0;
reg           spi_miso_latch = 1'd0;
reg           spi_miso_re = 1'd0;
wire    [7:0] spi_miso_status;
wire          spi_miso_we;
wire          spi_mode0;
wire          spi_mode1;
wire          spi_mode2;
wire    [7:0] spi_mosi_1;
reg     [7:0] spi_mosi_data = 8'd0;
reg           spi_mosi_latch = 1'd0;
reg           spi_mosi_re = 1'd0;
reg     [2:0] spi_mosi_sel = 3'd0;
reg     [7:0] spi_mosi_storage = 8'd0;
wire          spi_sel;
wire          spi_start0;
reg           spi_start1 = 1'd0;
reg           spi_status_re = 1'd0;
reg     [1:0] spi_status_status = 2'd0;
wire          spi_status_we;
reg           spi_xfer_enable = 1'd0;
reg           sync_f_self = 1'd0;
reg     [1:0] sync_rhs_self0 = 2'd0;
reg    [10:0] sync_rhs_self1 = 11'd0;
reg           sync_rhs_self2 = 1'd0;
reg           sync_rhs_self3 = 1'd0;
reg           sync_rhs_self4 = 1'd0;
reg           sync_rhs_self5 = 1'd0;
reg           sync_rhs_self6 = 1'd0;
wire          sys_clk;
wire          sys_ps_clk;
wire          sys_ps_rst;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign basesoc_reset = (basesoc_soc_rst | basesoc_cpu_rst);
always @(*) begin
    crg_rst <= 1'd0;
    if (basesoc_soc_rst) begin
        crg_rst <= 1'd1;
    end
end
assign basesoc_bus_error = socbushandler_error;
always @(*) begin
    basesoc_interrupt <= 32'd0;
    basesoc_interrupt[1] <= basesoc_timer_irq;
    basesoc_interrupt[0] <= basesoc_uart_irq;
end
assign crg_reset = ((~cpu_reset_n) | crg_rst);
assign crg_clkin = clk25;
assign sys_clk = crg_clkout0;
assign sys_ps_clk = crg_clkout1;
assign crg_locked = (basesoc_crg_locked & (~crg_reset));
assign basesoc_mmap_bus_dat_w = basesoc_adapted_interface_dat_w;
assign basesoc_adapted_interface_dat_r = basesoc_mmap_bus_dat_r;
assign basesoc_mmap_bus_sel = basesoc_adapted_interface_sel;
assign basesoc_mmap_bus_cyc = basesoc_adapted_interface_cyc;
assign basesoc_mmap_bus_stb = basesoc_adapted_interface_stb;
assign basesoc_adapted_interface_ack = basesoc_mmap_bus_ack;
assign basesoc_mmap_bus_we = basesoc_adapted_interface_we;
assign basesoc_mmap_bus_cti = basesoc_adapted_interface_cti;
assign basesoc_mmap_bus_bte = basesoc_adapted_interface_bte;
assign basesoc_adapted_interface_err = basesoc_mmap_bus_err;
always @(*) begin
    basesoc_mmap_bus_adr <= 30'd0;
    basesoc_mmap_bus_adr <= basesoc_adapted_interface_adr;
    basesoc_mmap_bus_adr <= (basesoc_adapted_interface_adr - 22'd2097152);
end
assign socbushandler_shared_adr = comb_rhs_self0;
assign socbushandler_shared_dat_w = comb_rhs_self1;
assign socbushandler_shared_sel = comb_rhs_self2;
assign socbushandler_shared_cyc = comb_rhs_self3;
assign socbushandler_shared_stb = comb_rhs_self4;
assign socbushandler_shared_we = comb_rhs_self5;
assign socbushandler_shared_cti = comb_rhs_self6;
assign socbushandler_shared_bte = comb_rhs_self7;
assign basesoc_ibus_dat_r = socbushandler_shared_dat_r;
assign basesoc_dbus_dat_r = socbushandler_shared_dat_r;
assign basesoc_ibus_ack = (socbushandler_shared_ack & (socbushandler_grant == 1'd0));
assign basesoc_dbus_ack = (socbushandler_shared_ack & (socbushandler_grant == 1'd1));
assign basesoc_ibus_err = (socbushandler_shared_err & (socbushandler_grant == 1'd0));
assign basesoc_dbus_err = (socbushandler_shared_err & (socbushandler_grant == 1'd1));
assign socbushandler_request = {basesoc_dbus_cyc, basesoc_ibus_cyc};
always @(*) begin
    socbushandler_master <= 5'd0;
    socbushandler_master[0] <= (socbushandler_shared_adr[29:15] == 1'd0);
    socbushandler_master[1] <= (socbushandler_shared_adr[29:11] == 16'd32768);
    socbushandler_master[2] <= (socbushandler_shared_adr[29:21] == 1'd1);
    socbushandler_master[3] <= (socbushandler_shared_adr[29:21] == 8'd128);
    socbushandler_master[4] <= (socbushandler_shared_adr[29:14] == 16'd61440);
end
assign basesoc_basesoc_ram_bus_adr = socbushandler_shared_adr;
assign basesoc_basesoc_ram_bus_dat_w = socbushandler_shared_dat_w;
assign basesoc_basesoc_ram_bus_sel = socbushandler_shared_sel;
assign basesoc_basesoc_ram_bus_stb = socbushandler_shared_stb;
assign basesoc_basesoc_ram_bus_we = socbushandler_shared_we;
assign basesoc_basesoc_ram_bus_cti = socbushandler_shared_cti;
assign basesoc_basesoc_ram_bus_bte = socbushandler_shared_bte;
assign basesoc_ram_bus_ram_bus_adr = socbushandler_shared_adr;
assign basesoc_ram_bus_ram_bus_dat_w = socbushandler_shared_dat_w;
assign basesoc_ram_bus_ram_bus_sel = socbushandler_shared_sel;
assign basesoc_ram_bus_ram_bus_stb = socbushandler_shared_stb;
assign basesoc_ram_bus_ram_bus_we = socbushandler_shared_we;
assign basesoc_ram_bus_ram_bus_cti = socbushandler_shared_cti;
assign basesoc_ram_bus_ram_bus_bte = socbushandler_shared_bte;
assign basesoc_adapted_interface_adr = socbushandler_shared_adr;
assign basesoc_adapted_interface_dat_w = socbushandler_shared_dat_w;
assign basesoc_adapted_interface_sel = socbushandler_shared_sel;
assign basesoc_adapted_interface_stb = socbushandler_shared_stb;
assign basesoc_adapted_interface_we = socbushandler_shared_we;
assign basesoc_adapted_interface_cti = socbushandler_shared_cti;
assign basesoc_adapted_interface_bte = socbushandler_shared_bte;
assign basesoc_wb_sdram_adr = socbushandler_shared_adr;
assign basesoc_wb_sdram_dat_w = socbushandler_shared_dat_w;
assign basesoc_wb_sdram_sel = socbushandler_shared_sel;
assign basesoc_wb_sdram_stb = socbushandler_shared_stb;
assign basesoc_wb_sdram_we = socbushandler_shared_we;
assign basesoc_wb_sdram_cti = socbushandler_shared_cti;
assign basesoc_wb_sdram_bte = socbushandler_shared_bte;
assign basesoc_interface0_adr = socbushandler_shared_adr;
assign basesoc_interface0_dat_w = socbushandler_shared_dat_w;
assign basesoc_interface0_sel = socbushandler_shared_sel;
assign basesoc_interface0_stb = socbushandler_shared_stb;
assign basesoc_interface0_we = socbushandler_shared_we;
assign basesoc_interface0_cti = socbushandler_shared_cti;
assign basesoc_interface0_bte = socbushandler_shared_bte;
assign basesoc_basesoc_ram_bus_cyc = (socbushandler_shared_cyc & socbushandler_master[0]);
assign basesoc_ram_bus_ram_bus_cyc = (socbushandler_shared_cyc & socbushandler_master[1]);
assign basesoc_adapted_interface_cyc = (socbushandler_shared_cyc & socbushandler_master[2]);
assign basesoc_wb_sdram_cyc = (socbushandler_shared_cyc & socbushandler_master[3]);
assign basesoc_interface0_cyc = (socbushandler_shared_cyc & socbushandler_master[4]);
assign socbushandler_shared_err = ((((basesoc_basesoc_ram_bus_err | basesoc_ram_bus_ram_bus_err) | basesoc_adapted_interface_err) | basesoc_wb_sdram_err) | basesoc_interface0_err);
assign socbushandler_wait = ((socbushandler_shared_stb & socbushandler_shared_cyc) & (~socbushandler_shared_ack));
always @(*) begin
    socbushandler_error <= 1'd0;
    socbushandler_shared_ack <= 1'd0;
    socbushandler_shared_dat_r <= 32'd0;
    socbushandler_shared_ack <= ((((basesoc_basesoc_ram_bus_ack | basesoc_ram_bus_ram_bus_ack) | basesoc_adapted_interface_ack) | basesoc_wb_sdram_ack) | basesoc_interface0_ack);
    socbushandler_shared_dat_r <= ((((({32{socbushandler_slaves[0]}} & basesoc_basesoc_ram_bus_dat_r) | ({32{socbushandler_slaves[1]}} & basesoc_ram_bus_ram_bus_dat_r)) | ({32{socbushandler_slaves[2]}} & basesoc_adapted_interface_dat_r)) | ({32{socbushandler_slaves[3]}} & basesoc_wb_sdram_dat_r)) | ({32{socbushandler_slaves[4]}} & basesoc_interface0_dat_r));
    if (socbushandler_done) begin
        socbushandler_shared_dat_r <= 32'd4294967295;
        socbushandler_shared_ack <= 1'd1;
        socbushandler_error <= 1'd1;
    end
end
assign socbushandler_done = (socbushandler_count == 1'd0);
assign basesoc_bus_errors_status = basesoc_bus_errors;
assign basesoc_basesoc_adr = basesoc_basesoc_ram_bus_adr[14:0];
assign basesoc_basesoc_ram_bus_dat_r = basesoc_basesoc_dat_r;
always @(*) begin
    basesoc_ram_we <= 4'd0;
    basesoc_ram_we[0] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[0]);
    basesoc_ram_we[1] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[1]);
    basesoc_ram_we[2] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[2]);
    basesoc_ram_we[3] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[3]);
end
assign basesoc_ram_adr = basesoc_ram_bus_ram_bus_adr[10:0];
assign basesoc_ram_bus_ram_bus_dat_r = basesoc_ram_dat_r;
assign basesoc_ram_dat_w = basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    basesoc_rs232phytx_next_state <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    basesoc_tx_enable <= 1'd0;
    basesoc_tx_sink_ready <= 1'd0;
    basesoc_rs232phytx_next_state <= basesoc_rs232phytx_state;
    case (basesoc_rs232phytx_state)
        1'd1: begin
            basesoc_tx_enable <= 1'd1;
            if (basesoc_tx_tick) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= basesoc_tx_data[0];
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_count_rs232phytx_next_value0 <= (basesoc_tx_count + 1'd1);
                basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, basesoc_tx_data[7:1]};
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((basesoc_tx_count == 4'd9)) begin
                    basesoc_tx_sink_ready <= 1'd1;
                    basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (basesoc_tx_sink_valid) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= basesoc_tx_sink_payload_data;
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_rs232phyrx_next_state <= 1'd0;
    basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    basesoc_rx_enable <= 1'd0;
    basesoc_rx_source_payload_data <= 8'd0;
    basesoc_rx_source_valid <= 1'd0;
    basesoc_rs232phyrx_next_state <= basesoc_rs232phyrx_state;
    case (basesoc_rs232phyrx_state)
        1'd1: begin
            basesoc_rx_enable <= 1'd1;
            if (basesoc_rx_tick) begin
                basesoc_rx_count_rs232phyrx_next_value0 <= (basesoc_rx_count + 1'd1);
                basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                basesoc_rx_data_rs232phyrx_next_value1 <= {basesoc_rx_rx, basesoc_rx_data[7:1]};
                basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((basesoc_rx_count == 4'd9)) begin
                    basesoc_rx_source_valid <= (basesoc_rx_rx == 1'd1);
                    basesoc_rx_source_payload_data <= basesoc_rx_data;
                    basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((basesoc_rx_rx == 1'd0) & (basesoc_rx_rx_d == 1'd1))) begin
                basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_uart_uart_sink_valid = basesoc_rx_source_valid;
assign basesoc_rx_source_ready = basesoc_uart_uart_sink_ready;
assign basesoc_uart_uart_sink_first = basesoc_rx_source_first;
assign basesoc_uart_uart_sink_last = basesoc_rx_source_last;
assign basesoc_uart_uart_sink_payload_data = basesoc_rx_source_payload_data;
assign basesoc_tx_sink_valid = basesoc_uart_uart_source_valid;
assign basesoc_uart_uart_source_ready = basesoc_tx_sink_ready;
assign basesoc_tx_sink_first = basesoc_uart_uart_source_first;
assign basesoc_tx_sink_last = basesoc_uart_uart_source_last;
assign basesoc_tx_sink_payload_data = basesoc_uart_uart_source_payload_data;
assign basesoc_uart_tx_fifo_sink_valid = basesoc_uart_rxtx_re;
assign basesoc_uart_tx_fifo_sink_payload_data = basesoc_uart_rxtx_r;
assign basesoc_uart_uart_source_valid = basesoc_uart_tx_fifo_source_valid;
assign basesoc_uart_tx_fifo_source_ready = basesoc_uart_uart_source_ready;
assign basesoc_uart_uart_source_first = basesoc_uart_tx_fifo_source_first;
assign basesoc_uart_uart_source_last = basesoc_uart_tx_fifo_source_last;
assign basesoc_uart_uart_source_payload_data = basesoc_uart_tx_fifo_source_payload_data;
assign basesoc_uart_txfull_status = (~basesoc_uart_tx_fifo_sink_ready);
assign basesoc_uart_txempty_status = (~basesoc_uart_tx_fifo_source_valid);
assign basesoc_uart_tx_trigger = basesoc_uart_tx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_valid = basesoc_uart_uart_sink_valid;
assign basesoc_uart_uart_sink_ready = basesoc_uart_rx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_first = basesoc_uart_uart_sink_first;
assign basesoc_uart_rx_fifo_sink_last = basesoc_uart_uart_sink_last;
assign basesoc_uart_rx_fifo_sink_payload_data = basesoc_uart_uart_sink_payload_data;
assign basesoc_uart_rxtx_w = basesoc_uart_rx_fifo_source_payload_data;
assign basesoc_uart_rx_fifo_source_ready = basesoc_uart_rx_clear;
assign basesoc_uart_rxempty_status = (~basesoc_uart_rx_fifo_source_valid);
assign basesoc_uart_rxfull_status = (~basesoc_uart_rx_fifo_sink_ready);
assign basesoc_uart_rx_trigger = basesoc_uart_rx_fifo_source_valid;
assign basesoc_uart_tx0 = basesoc_uart_tx_status;
assign basesoc_uart_tx1 = basesoc_uart_tx_pending;
always @(*) begin
    basesoc_uart_tx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[0])) begin
        basesoc_uart_tx_clear <= 1'd1;
    end
end
assign basesoc_uart_rx0 = basesoc_uart_rx_status;
assign basesoc_uart_rx1 = basesoc_uart_rx_pending;
always @(*) begin
    basesoc_uart_rx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[1])) begin
        basesoc_uart_rx_clear <= 1'd1;
    end
end
assign basesoc_uart_irq = ((basesoc_uart_pending_status[0] & basesoc_uart_enable_storage[0]) | (basesoc_uart_pending_status[1] & basesoc_uart_enable_storage[1]));
assign basesoc_uart_tx_status = basesoc_uart_tx_trigger;
assign basesoc_uart_tx_pending = basesoc_uart_tx_trigger;
assign basesoc_uart_rx_status = basesoc_uart_rx_trigger;
assign basesoc_uart_rx_pending = basesoc_uart_rx_trigger;
assign basesoc_uart_tx_fifo_syncfifo_din = {basesoc_uart_tx_fifo_fifo_in_last, basesoc_uart_tx_fifo_fifo_in_first, basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {basesoc_uart_tx_fifo_fifo_out_last, basesoc_uart_tx_fifo_fifo_out_first, basesoc_uart_tx_fifo_fifo_out_payload_data} = basesoc_uart_tx_fifo_syncfifo_dout;
assign basesoc_uart_tx_fifo_sink_ready = basesoc_uart_tx_fifo_syncfifo_writable;
assign basesoc_uart_tx_fifo_syncfifo_we = basesoc_uart_tx_fifo_sink_valid;
assign basesoc_uart_tx_fifo_fifo_in_first = basesoc_uart_tx_fifo_sink_first;
assign basesoc_uart_tx_fifo_fifo_in_last = basesoc_uart_tx_fifo_sink_last;
assign basesoc_uart_tx_fifo_fifo_in_payload_data = basesoc_uart_tx_fifo_sink_payload_data;
assign basesoc_uart_tx_fifo_source_valid = basesoc_uart_tx_fifo_readable;
assign basesoc_uart_tx_fifo_source_first = basesoc_uart_tx_fifo_fifo_out_first;
assign basesoc_uart_tx_fifo_source_last = basesoc_uart_tx_fifo_fifo_out_last;
assign basesoc_uart_tx_fifo_source_payload_data = basesoc_uart_tx_fifo_fifo_out_payload_data;
assign basesoc_uart_tx_fifo_re = basesoc_uart_tx_fifo_source_ready;
assign basesoc_uart_tx_fifo_syncfifo_re = (basesoc_uart_tx_fifo_syncfifo_readable & ((~basesoc_uart_tx_fifo_readable) | basesoc_uart_tx_fifo_re));
assign basesoc_uart_tx_fifo_level1 = (basesoc_uart_tx_fifo_level0 + basesoc_uart_tx_fifo_readable);
always @(*) begin
    basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_tx_fifo_replace) begin
        basesoc_uart_tx_fifo_wrport_adr <= (basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_tx_fifo_wrport_adr <= basesoc_uart_tx_fifo_produce;
    end
end
assign basesoc_uart_tx_fifo_wrport_dat_w = basesoc_uart_tx_fifo_syncfifo_din;
assign basesoc_uart_tx_fifo_wrport_we = (basesoc_uart_tx_fifo_syncfifo_we & (basesoc_uart_tx_fifo_syncfifo_writable | basesoc_uart_tx_fifo_replace));
assign basesoc_uart_tx_fifo_do_read = (basesoc_uart_tx_fifo_syncfifo_readable & basesoc_uart_tx_fifo_syncfifo_re);
assign basesoc_uart_tx_fifo_rdport_adr = basesoc_uart_tx_fifo_consume;
assign basesoc_uart_tx_fifo_syncfifo_dout = basesoc_uart_tx_fifo_rdport_dat_r;
assign basesoc_uart_tx_fifo_rdport_re = basesoc_uart_tx_fifo_do_read;
assign basesoc_uart_tx_fifo_syncfifo_writable = (basesoc_uart_tx_fifo_level0 != 5'd16);
assign basesoc_uart_tx_fifo_syncfifo_readable = (basesoc_uart_tx_fifo_level0 != 1'd0);
assign basesoc_uart_rx_fifo_syncfifo_din = {basesoc_uart_rx_fifo_fifo_in_last, basesoc_uart_rx_fifo_fifo_in_first, basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {basesoc_uart_rx_fifo_fifo_out_last, basesoc_uart_rx_fifo_fifo_out_first, basesoc_uart_rx_fifo_fifo_out_payload_data} = basesoc_uart_rx_fifo_syncfifo_dout;
assign basesoc_uart_rx_fifo_sink_ready = basesoc_uart_rx_fifo_syncfifo_writable;
assign basesoc_uart_rx_fifo_syncfifo_we = basesoc_uart_rx_fifo_sink_valid;
assign basesoc_uart_rx_fifo_fifo_in_first = basesoc_uart_rx_fifo_sink_first;
assign basesoc_uart_rx_fifo_fifo_in_last = basesoc_uart_rx_fifo_sink_last;
assign basesoc_uart_rx_fifo_fifo_in_payload_data = basesoc_uart_rx_fifo_sink_payload_data;
assign basesoc_uart_rx_fifo_source_valid = basesoc_uart_rx_fifo_readable;
assign basesoc_uart_rx_fifo_source_first = basesoc_uart_rx_fifo_fifo_out_first;
assign basesoc_uart_rx_fifo_source_last = basesoc_uart_rx_fifo_fifo_out_last;
assign basesoc_uart_rx_fifo_source_payload_data = basesoc_uart_rx_fifo_fifo_out_payload_data;
assign basesoc_uart_rx_fifo_re = basesoc_uart_rx_fifo_source_ready;
assign basesoc_uart_rx_fifo_syncfifo_re = (basesoc_uart_rx_fifo_syncfifo_readable & ((~basesoc_uart_rx_fifo_readable) | basesoc_uart_rx_fifo_re));
assign basesoc_uart_rx_fifo_level1 = (basesoc_uart_rx_fifo_level0 + basesoc_uart_rx_fifo_readable);
always @(*) begin
    basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_rx_fifo_replace) begin
        basesoc_uart_rx_fifo_wrport_adr <= (basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_rx_fifo_wrport_adr <= basesoc_uart_rx_fifo_produce;
    end
end
assign basesoc_uart_rx_fifo_wrport_dat_w = basesoc_uart_rx_fifo_syncfifo_din;
assign basesoc_uart_rx_fifo_wrport_we = (basesoc_uart_rx_fifo_syncfifo_we & (basesoc_uart_rx_fifo_syncfifo_writable | basesoc_uart_rx_fifo_replace));
assign basesoc_uart_rx_fifo_do_read = (basesoc_uart_rx_fifo_syncfifo_readable & basesoc_uart_rx_fifo_syncfifo_re);
assign basesoc_uart_rx_fifo_rdport_adr = basesoc_uart_rx_fifo_consume;
assign basesoc_uart_rx_fifo_syncfifo_dout = basesoc_uart_rx_fifo_rdport_dat_r;
assign basesoc_uart_rx_fifo_rdport_re = basesoc_uart_rx_fifo_do_read;
assign basesoc_uart_rx_fifo_syncfifo_writable = (basesoc_uart_rx_fifo_level0 != 5'd16);
assign basesoc_uart_rx_fifo_syncfifo_readable = (basesoc_uart_rx_fifo_level0 != 1'd0);
assign basesoc_timer_zero_trigger = (basesoc_timer_value == 1'd0);
assign basesoc_timer_zero0 = basesoc_timer_zero_status;
assign basesoc_timer_zero1 = basesoc_timer_zero_pending;
always @(*) begin
    basesoc_timer_zero_clear <= 1'd0;
    if ((basesoc_timer_pending_re & basesoc_timer_pending_r)) begin
        basesoc_timer_zero_clear <= 1'd1;
    end
end
assign basesoc_timer_irq = (basesoc_timer_pending_status & basesoc_timer_enable_storage);
assign basesoc_timer_zero_status = basesoc_timer_zero_trigger;
assign leds_wait = (~leds_done);
always @(*) begin
    leds_leds <= 1'd0;
    if ((leds_mode == 1'd1)) begin
        leds_leds <= leds_storage;
    end else begin
        leds_leds <= leds_chaser;
    end
end
assign {user_led_n0} = (leds_leds ^ 1'd0);
assign leds_done = (leds_count == 1'd0);
assign spi_start0 = spi_start1;
assign spi_length0 = spi_length1;
assign spi_done1 = spi_done0;
assign spi_mode0 = 1'd0;
assign spi_mosi_1 = spi_mosi_storage;
assign spi_miso_status = spi_miso_1;
assign spi_cs = spi_sel;
assign spi_cs_mode = spi_mode1;
assign spi_loopback = spi_mode2;
assign spi_clk_rise = (spi_clk_divider1 == (spi_clk_divider0[15:1] - 1'd1));
assign spi_clk_fall = (spi_clk_divider1 == (spi_clk_divider0 - 1'd1));
always @(*) begin
    basesoc_spimaster_next_state <= 2'd0;
    spi_clk_enable <= 1'd0;
    spi_count_spimaster_next_value <= 3'd0;
    spi_count_spimaster_next_value_ce <= 1'd0;
    spi_done0 <= 1'd0;
    spi_irq <= 1'd0;
    spi_miso_latch <= 1'd0;
    spi_mosi_latch <= 1'd0;
    spi_xfer_enable <= 1'd0;
    basesoc_spimaster_next_state <= basesoc_spimaster_state;
    case (basesoc_spimaster_state)
        1'd1: begin
            spi_count_spimaster_next_value <= 1'd0;
            spi_count_spimaster_next_value_ce <= 1'd1;
            if (spi_clk_fall) begin
                spi_xfer_enable <= 1'd1;
                basesoc_spimaster_next_state <= 2'd2;
            end
        end
        2'd2: begin
            spi_clk_enable <= 1'd1;
            spi_xfer_enable <= 1'd1;
            if (spi_clk_fall) begin
                spi_count_spimaster_next_value <= (spi_count + 1'd1);
                spi_count_spimaster_next_value_ce <= 1'd1;
                if ((spi_count == (spi_length0 - 1'd1))) begin
                    basesoc_spimaster_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            spi_xfer_enable <= 1'd1;
            if (spi_clk_rise) begin
                spi_miso_latch <= 1'd1;
                spi_irq <= 1'd1;
                basesoc_spimaster_next_state <= 1'd0;
            end
        end
        default: begin
            spi_done0 <= 1'd1;
            if (spi_start0) begin
                spi_done0 <= 1'd0;
                spi_mosi_latch <= 1'd1;
                basesoc_spimaster_next_state <= 1'd1;
            end
        end
    endcase
end
assign lora_reset = lora_reset_storage;
assign basesoc_spiflash_phy_cs = basesoc_crossbar_cs;
assign basesoc_mmap_sink_valid = basesoc_port_mmap_user_port_source_valid;
assign basesoc_port_mmap_user_port_source_ready = basesoc_mmap_sink_ready;
assign basesoc_mmap_sink_first = basesoc_port_mmap_user_port_source_first;
assign basesoc_mmap_sink_last = basesoc_port_mmap_user_port_source_last;
assign basesoc_mmap_sink_payload_data = basesoc_port_mmap_user_port_source_payload_data;
assign basesoc_port_mmap_user_port_sink_valid = basesoc_mmap_source_valid;
assign basesoc_mmap_source_ready = basesoc_port_mmap_user_port_sink_ready;
assign basesoc_port_mmap_user_port_sink_first = basesoc_mmap_source_first;
assign basesoc_port_mmap_user_port_sink_last = basesoc_mmap_source_last;
assign basesoc_port_mmap_user_port_sink_payload_data = basesoc_mmap_source_payload_data;
assign basesoc_port_mmap_user_port_sink_payload_len = basesoc_mmap_source_payload_len;
assign basesoc_port_mmap_user_port_sink_payload_width = basesoc_mmap_source_payload_width;
assign basesoc_port_mmap_user_port_sink_payload_mask = basesoc_mmap_source_payload_mask;
assign basesoc_master_sink_valid = basesoc_port_master_user_port_source_valid;
assign basesoc_port_master_user_port_source_ready = basesoc_master_sink_ready;
assign basesoc_master_sink_first = basesoc_port_master_user_port_source_first;
assign basesoc_master_sink_last = basesoc_port_master_user_port_source_last;
assign basesoc_master_sink_payload_data = basesoc_port_master_user_port_source_payload_data;
assign basesoc_port_master_user_port_sink_valid = basesoc_master_source_valid;
assign basesoc_master_source_ready = basesoc_port_master_user_port_sink_ready;
assign basesoc_port_master_user_port_sink_first = basesoc_master_source_first;
assign basesoc_port_master_user_port_sink_last = basesoc_master_source_last;
assign basesoc_port_master_user_port_sink_payload_data = basesoc_master_source_payload_data;
assign basesoc_port_master_user_port_sink_payload_len = basesoc_master_source_payload_len;
assign basesoc_port_master_user_port_sink_payload_width = basesoc_master_source_payload_width;
assign basesoc_port_master_user_port_sink_payload_mask = basesoc_master_source_payload_mask;
assign basesoc_spiflash_phy_sink_valid = basesoc_crossbar_source_valid;
assign basesoc_crossbar_source_ready = basesoc_spiflash_phy_sink_ready;
assign basesoc_spiflash_phy_sink_first = basesoc_crossbar_source_first;
assign basesoc_spiflash_phy_sink_last = basesoc_crossbar_source_last;
assign basesoc_spiflash_phy_sink_payload_data = basesoc_crossbar_source_payload_data;
assign basesoc_spiflash_phy_sink_payload_len = basesoc_crossbar_source_payload_len;
assign basesoc_spiflash_phy_sink_payload_width = basesoc_crossbar_source_payload_width;
assign basesoc_spiflash_phy_sink_payload_mask = basesoc_crossbar_source_payload_mask;
assign basesoc_crossbar_sink_valid = basesoc_spiflash_phy_source_valid;
assign basesoc_spiflash_phy_source_ready = basesoc_crossbar_sink_ready;
assign basesoc_crossbar_sink_first = basesoc_spiflash_phy_source_first;
assign basesoc_crossbar_sink_last = basesoc_spiflash_phy_source_last;
assign basesoc_crossbar_sink_payload_data = basesoc_spiflash_phy_source_payload_data;
assign basesoc_port_mmap_internal_port_sink_valid = basesoc_port_mmap_user_port_sink_valid;
assign basesoc_port_mmap_user_port_sink_ready = basesoc_port_mmap_internal_port_sink_ready;
assign basesoc_port_mmap_internal_port_sink_first = basesoc_port_mmap_user_port_sink_first;
assign basesoc_port_mmap_internal_port_sink_last = basesoc_port_mmap_user_port_sink_last;
assign basesoc_port_mmap_internal_port_sink_payload_data = basesoc_port_mmap_user_port_sink_payload_data;
assign basesoc_port_mmap_internal_port_sink_payload_len = basesoc_port_mmap_user_port_sink_payload_len;
assign basesoc_port_mmap_internal_port_sink_payload_width = basesoc_port_mmap_user_port_sink_payload_width;
assign basesoc_port_mmap_internal_port_sink_payload_mask = basesoc_port_mmap_user_port_sink_payload_mask;
assign basesoc_port_mmap_user_port_source_valid = basesoc_port_mmap_internal_port_source_valid;
assign basesoc_port_mmap_internal_port_source_ready = basesoc_port_mmap_user_port_source_ready;
assign basesoc_port_mmap_user_port_source_first = basesoc_port_mmap_internal_port_source_first;
assign basesoc_port_mmap_user_port_source_last = basesoc_port_mmap_internal_port_source_last;
assign basesoc_port_mmap_user_port_source_payload_data = basesoc_port_mmap_internal_port_source_payload_data;
assign basesoc_port_master_internal_port_sink_valid = basesoc_port_master_user_port_sink_valid;
assign basesoc_port_master_user_port_sink_ready = basesoc_port_master_internal_port_sink_ready;
assign basesoc_port_master_internal_port_sink_first = basesoc_port_master_user_port_sink_first;
assign basesoc_port_master_internal_port_sink_last = basesoc_port_master_user_port_sink_last;
assign basesoc_port_master_internal_port_sink_payload_data = basesoc_port_master_user_port_sink_payload_data;
assign basesoc_port_master_internal_port_sink_payload_len = basesoc_port_master_user_port_sink_payload_len;
assign basesoc_port_master_internal_port_sink_payload_width = basesoc_port_master_user_port_sink_payload_width;
assign basesoc_port_master_internal_port_sink_payload_mask = basesoc_port_master_user_port_sink_payload_mask;
assign basesoc_port_master_user_port_source_valid = basesoc_port_master_internal_port_source_valid;
assign basesoc_port_master_internal_port_source_ready = basesoc_port_master_user_port_source_ready;
assign basesoc_port_master_user_port_source_first = basesoc_port_master_internal_port_source_first;
assign basesoc_port_master_user_port_source_last = basesoc_port_master_internal_port_source_last;
assign basesoc_port_master_user_port_source_payload_data = basesoc_port_master_internal_port_source_payload_data;
assign basesoc_port_master_request = (basesoc_master_cs != 1'd0);
assign basesoc_tx_mux_endpoint0_sink_valid = basesoc_port_mmap_internal_port_sink_valid;
assign basesoc_port_mmap_internal_port_sink_ready = basesoc_tx_mux_endpoint0_sink_ready;
assign basesoc_tx_mux_endpoint0_sink_first = basesoc_port_mmap_internal_port_sink_first;
assign basesoc_tx_mux_endpoint0_sink_last = basesoc_port_mmap_internal_port_sink_last;
assign basesoc_tx_mux_endpoint0_sink_payload_data = basesoc_port_mmap_internal_port_sink_payload_data;
assign basesoc_tx_mux_endpoint0_sink_payload_len = basesoc_port_mmap_internal_port_sink_payload_len;
assign basesoc_tx_mux_endpoint0_sink_payload_width = basesoc_port_mmap_internal_port_sink_payload_width;
assign basesoc_tx_mux_endpoint0_sink_payload_mask = basesoc_port_mmap_internal_port_sink_payload_mask;
assign basesoc_port_mmap_internal_port_source_valid = basesoc_rx_demux_endpoint0_source_valid;
assign basesoc_rx_demux_endpoint0_source_ready = basesoc_port_mmap_internal_port_source_ready;
assign basesoc_port_mmap_internal_port_source_first = basesoc_rx_demux_endpoint0_source_first;
assign basesoc_port_mmap_internal_port_source_last = basesoc_rx_demux_endpoint0_source_last;
assign basesoc_port_mmap_internal_port_source_payload_data = basesoc_rx_demux_endpoint0_source_payload_data;
assign basesoc_tx_mux_endpoint1_sink_valid = basesoc_port_master_internal_port_sink_valid;
assign basesoc_port_master_internal_port_sink_ready = basesoc_tx_mux_endpoint1_sink_ready;
assign basesoc_tx_mux_endpoint1_sink_first = basesoc_port_master_internal_port_sink_first;
assign basesoc_tx_mux_endpoint1_sink_last = basesoc_port_master_internal_port_sink_last;
assign basesoc_tx_mux_endpoint1_sink_payload_data = basesoc_port_master_internal_port_sink_payload_data;
assign basesoc_tx_mux_endpoint1_sink_payload_len = basesoc_port_master_internal_port_sink_payload_len;
assign basesoc_tx_mux_endpoint1_sink_payload_width = basesoc_port_master_internal_port_sink_payload_width;
assign basesoc_tx_mux_endpoint1_sink_payload_mask = basesoc_port_master_internal_port_sink_payload_mask;
assign basesoc_port_master_internal_port_source_valid = basesoc_rx_demux_endpoint1_source_valid;
assign basesoc_rx_demux_endpoint1_source_ready = basesoc_port_master_internal_port_source_ready;
assign basesoc_port_master_internal_port_source_first = basesoc_rx_demux_endpoint1_source_first;
assign basesoc_port_master_internal_port_source_last = basesoc_rx_demux_endpoint1_source_last;
assign basesoc_port_master_internal_port_source_payload_data = basesoc_rx_demux_endpoint1_source_payload_data;
assign basesoc_request = {basesoc_port_master_request, basesoc_mmap_request};
assign basesoc_crossbar_source_valid = basesoc_tx_mux_source_valid;
assign basesoc_tx_mux_source_ready = basesoc_crossbar_source_ready;
assign basesoc_crossbar_source_first = basesoc_tx_mux_source_first;
assign basesoc_crossbar_source_last = basesoc_tx_mux_source_last;
assign basesoc_crossbar_source_payload_data = basesoc_tx_mux_source_payload_data;
assign basesoc_crossbar_source_payload_len = basesoc_tx_mux_source_payload_len;
assign basesoc_crossbar_source_payload_width = basesoc_tx_mux_source_payload_width;
assign basesoc_crossbar_source_payload_mask = basesoc_tx_mux_source_payload_mask;
assign basesoc_tx_mux_sel = basesoc_grant;
assign basesoc_rx_demux_sink_valid = basesoc_crossbar_sink_valid;
assign basesoc_crossbar_sink_ready = basesoc_rx_demux_sink_ready;
assign basesoc_rx_demux_sink_first = basesoc_crossbar_sink_first;
assign basesoc_rx_demux_sink_last = basesoc_crossbar_sink_last;
assign basesoc_rx_demux_sink_payload_data = basesoc_crossbar_sink_payload_data;
assign basesoc_rx_demux_sel = basesoc_grant;
always @(*) begin
    basesoc_crossbar_cs <= 1'd0;
    case (basesoc_grant)
        1'd0: begin
            basesoc_crossbar_cs <= basesoc_mmap_cs;
        end
        1'd1: begin
            basesoc_crossbar_cs <= basesoc_master_cs;
        end
    endcase
end
always @(*) begin
    basesoc_tx_mux_endpoint0_sink_ready <= 1'd0;
    basesoc_tx_mux_endpoint1_sink_ready <= 1'd0;
    basesoc_tx_mux_source_first <= 1'd0;
    basesoc_tx_mux_source_last <= 1'd0;
    basesoc_tx_mux_source_payload_data <= 32'd0;
    basesoc_tx_mux_source_payload_len <= 6'd0;
    basesoc_tx_mux_source_payload_mask <= 8'd0;
    basesoc_tx_mux_source_payload_width <= 4'd0;
    basesoc_tx_mux_source_valid <= 1'd0;
    case (basesoc_tx_mux_sel)
        1'd0: begin
            basesoc_tx_mux_source_valid <= basesoc_tx_mux_endpoint0_sink_valid;
            basesoc_tx_mux_endpoint0_sink_ready <= basesoc_tx_mux_source_ready;
            basesoc_tx_mux_source_first <= basesoc_tx_mux_endpoint0_sink_first;
            basesoc_tx_mux_source_last <= basesoc_tx_mux_endpoint0_sink_last;
            basesoc_tx_mux_source_payload_data <= basesoc_tx_mux_endpoint0_sink_payload_data;
            basesoc_tx_mux_source_payload_len <= basesoc_tx_mux_endpoint0_sink_payload_len;
            basesoc_tx_mux_source_payload_width <= basesoc_tx_mux_endpoint0_sink_payload_width;
            basesoc_tx_mux_source_payload_mask <= basesoc_tx_mux_endpoint0_sink_payload_mask;
        end
        1'd1: begin
            basesoc_tx_mux_source_valid <= basesoc_tx_mux_endpoint1_sink_valid;
            basesoc_tx_mux_endpoint1_sink_ready <= basesoc_tx_mux_source_ready;
            basesoc_tx_mux_source_first <= basesoc_tx_mux_endpoint1_sink_first;
            basesoc_tx_mux_source_last <= basesoc_tx_mux_endpoint1_sink_last;
            basesoc_tx_mux_source_payload_data <= basesoc_tx_mux_endpoint1_sink_payload_data;
            basesoc_tx_mux_source_payload_len <= basesoc_tx_mux_endpoint1_sink_payload_len;
            basesoc_tx_mux_source_payload_width <= basesoc_tx_mux_endpoint1_sink_payload_width;
            basesoc_tx_mux_source_payload_mask <= basesoc_tx_mux_endpoint1_sink_payload_mask;
        end
    endcase
end
always @(*) begin
    basesoc_rx_demux_endpoint0_source_first <= 1'd0;
    basesoc_rx_demux_endpoint0_source_last <= 1'd0;
    basesoc_rx_demux_endpoint0_source_payload_data <= 32'd0;
    basesoc_rx_demux_endpoint0_source_valid <= 1'd0;
    basesoc_rx_demux_endpoint1_source_first <= 1'd0;
    basesoc_rx_demux_endpoint1_source_last <= 1'd0;
    basesoc_rx_demux_endpoint1_source_payload_data <= 32'd0;
    basesoc_rx_demux_endpoint1_source_valid <= 1'd0;
    basesoc_rx_demux_sink_ready <= 1'd0;
    case (basesoc_rx_demux_sel)
        1'd0: begin
            basesoc_rx_demux_endpoint0_source_valid <= basesoc_rx_demux_sink_valid;
            basesoc_rx_demux_sink_ready <= basesoc_rx_demux_endpoint0_source_ready;
            basesoc_rx_demux_endpoint0_source_first <= basesoc_rx_demux_sink_first;
            basesoc_rx_demux_endpoint0_source_last <= basesoc_rx_demux_sink_last;
            basesoc_rx_demux_endpoint0_source_payload_data <= basesoc_rx_demux_sink_payload_data;
        end
        1'd1: begin
            basesoc_rx_demux_endpoint1_source_valid <= basesoc_rx_demux_sink_valid;
            basesoc_rx_demux_sink_ready <= basesoc_rx_demux_endpoint1_source_ready;
            basesoc_rx_demux_endpoint1_source_first <= basesoc_rx_demux_sink_first;
            basesoc_rx_demux_endpoint1_source_last <= basesoc_rx_demux_sink_last;
            basesoc_rx_demux_endpoint1_source_payload_data <= basesoc_rx_demux_sink_payload_data;
        end
    endcase
end
assign basesoc_mmap_spi_dummy_bits = basesoc_mmap_storage;
always @(*) begin
    basesoc_mmap_cs <= 1'd0;
    if (basesoc_mmap_request) begin
        basesoc_mmap_cs <= 1'd1;
    end
end
assign basesoc_mmap_done = (basesoc_mmap_count == 1'd0);
always @(*) begin
    basesoc_litespimmap_next_state <= 4'd0;
    basesoc_mmap_burst_adr_litespimmap_next_value2 <= 30'd0;
    basesoc_mmap_burst_adr_litespimmap_next_value_ce2 <= 1'd0;
    basesoc_mmap_burst_cs_litespimmap_next_value0 <= 1'd0;
    basesoc_mmap_burst_cs_litespimmap_next_value_ce0 <= 1'd0;
    basesoc_mmap_bus_ack <= 1'd0;
    basesoc_mmap_bus_dat_r <= 32'd0;
    basesoc_mmap_byte_count_litespimmap_next_value1 <= 2'd0;
    basesoc_mmap_byte_count_litespimmap_next_value_ce1 <= 1'd0;
    basesoc_mmap_request <= 1'd0;
    basesoc_mmap_sink_ready <= 1'd0;
    basesoc_mmap_source_payload_data <= 32'd0;
    basesoc_mmap_source_payload_len <= 6'd0;
    basesoc_mmap_source_payload_mask <= 8'd0;
    basesoc_mmap_source_payload_width <= 4'd0;
    basesoc_mmap_source_valid <= 1'd0;
    basesoc_mmap_wait <= 1'd0;
    basesoc_litespimmap_next_state <= basesoc_litespimmap_state;
    case (basesoc_litespimmap_state)
        1'd1: begin
            basesoc_mmap_request <= 1'd1;
            basesoc_mmap_source_valid <= 1'd1;
            basesoc_mmap_source_payload_data <= 2'd3;
            basesoc_mmap_source_payload_len <= 4'd8;
            basesoc_mmap_source_payload_width <= 1'd1;
            basesoc_mmap_source_payload_mask <= 1'd1;
            basesoc_mmap_burst_adr_litespimmap_next_value2 <= basesoc_mmap_bus_adr;
            basesoc_mmap_burst_adr_litespimmap_next_value_ce2 <= 1'd1;
            if (basesoc_mmap_source_ready) begin
                basesoc_litespimmap_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_mmap_request <= 1'd1;
            basesoc_mmap_sink_ready <= 1'd1;
            if (basesoc_mmap_sink_valid) begin
                basesoc_litespimmap_next_state <= 2'd3;
            end
        end
        2'd3: begin
            basesoc_mmap_request <= 1'd1;
            basesoc_mmap_source_valid <= 1'd1;
            basesoc_mmap_source_payload_width <= 1'd1;
            basesoc_mmap_source_payload_mask <= 1'd1;
            basesoc_mmap_source_payload_data <= {basesoc_mmap_bus_adr, basesoc_mmap_byte_count};
            basesoc_mmap_source_payload_len <= 5'd24;
            basesoc_mmap_burst_cs_litespimmap_next_value0 <= 1'd1;
            basesoc_mmap_burst_cs_litespimmap_next_value_ce0 <= 1'd1;
            basesoc_mmap_burst_adr_litespimmap_next_value2 <= basesoc_mmap_bus_adr;
            basesoc_mmap_burst_adr_litespimmap_next_value_ce2 <= 1'd1;
            if (basesoc_mmap_source_ready) begin
                basesoc_litespimmap_next_state <= 3'd4;
            end
        end
        3'd4: begin
            basesoc_mmap_request <= 1'd1;
            basesoc_mmap_sink_ready <= 1'd1;
            if (basesoc_mmap_sink_valid) begin
                if ((basesoc_mmap_spi_dummy_bits == 1'd0)) begin
                    basesoc_litespimmap_next_state <= 3'd7;
                end else begin
                    basesoc_litespimmap_next_state <= 3'd5;
                end
            end
        end
        3'd5: begin
            basesoc_mmap_request <= 1'd1;
            basesoc_mmap_source_valid <= 1'd1;
            basesoc_mmap_source_payload_width <= 1'd1;
            basesoc_mmap_source_payload_mask <= 1'd0;
            basesoc_mmap_source_payload_data <= basesoc_mmap_dummy;
            basesoc_mmap_source_payload_len <= basesoc_mmap_spi_dummy_bits;
            if (basesoc_mmap_source_ready) begin
                basesoc_litespimmap_next_state <= 3'd6;
            end
        end
        3'd6: begin
            basesoc_mmap_request <= 1'd1;
            basesoc_mmap_sink_ready <= 1'd1;
            if (basesoc_mmap_sink_valid) begin
                basesoc_litespimmap_next_state <= 3'd7;
            end
        end
        3'd7: begin
            basesoc_mmap_request <= 1'd1;
            basesoc_mmap_source_valid <= 1'd1;
            basesoc_mmap_source_payload_width <= 1'd1;
            basesoc_mmap_source_payload_len <= 6'd32;
            basesoc_mmap_source_payload_mask <= 1'd0;
            if (basesoc_mmap_source_ready) begin
                basesoc_litespimmap_next_state <= 4'd8;
            end
        end
        4'd8: begin
            basesoc_mmap_request <= 1'd1;
            basesoc_mmap_sink_ready <= 1'd1;
            basesoc_mmap_bus_dat_r <= {basesoc_mmap_sink_payload_data[7:0], basesoc_mmap_sink_payload_data[15:8], basesoc_mmap_sink_payload_data[23:16], basesoc_mmap_sink_payload_data[31:24]};
            if (basesoc_mmap_sink_valid) begin
                basesoc_mmap_bus_ack <= 1'd1;
                basesoc_mmap_burst_adr_litespimmap_next_value2 <= (basesoc_mmap_burst_adr + 1'd1);
                basesoc_mmap_burst_adr_litespimmap_next_value_ce2 <= 1'd1;
                basesoc_litespimmap_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_mmap_wait <= 1'd1;
            basesoc_mmap_burst_cs_litespimmap_next_value0 <= (basesoc_mmap_burst_cs & (~basesoc_mmap_done));
            basesoc_mmap_burst_cs_litespimmap_next_value_ce0 <= 1'd1;
            basesoc_mmap_request <= basesoc_mmap_burst_cs;
            if ((basesoc_mmap_bus_cyc & basesoc_mmap_bus_stb)) begin
                basesoc_mmap_byte_count_litespimmap_next_value1 <= 1'd0;
                basesoc_mmap_byte_count_litespimmap_next_value_ce1 <= 1'd1;
                if ((~basesoc_mmap_bus_we)) begin
                    if (((basesoc_mmap_burst_cs & (basesoc_mmap_bus_adr == basesoc_mmap_burst_adr)) & ((~1'd0) | (~1'd0)))) begin
                        basesoc_litespimmap_next_state <= 3'd7;
                    end else begin
                        basesoc_mmap_request <= 1'd0;
                        basesoc_litespimmap_next_state <= 1'd1;
                    end
                end
            end
        end
    endcase
end
assign basesoc_master_rx_fifo_sink_sink_valid = basesoc_master_sink_valid;
assign basesoc_master_sink_ready = basesoc_master_rx_fifo_sink_sink_ready;
assign basesoc_master_rx_fifo_sink_sink_first = basesoc_master_sink_first;
assign basesoc_master_rx_fifo_sink_sink_last = basesoc_master_sink_last;
assign basesoc_master_rx_fifo_sink_sink_payload_data = basesoc_master_sink_payload_data;
assign basesoc_master_source_valid = basesoc_master_tx_fifo_source_source_valid;
assign basesoc_master_tx_fifo_source_source_ready = basesoc_master_source_ready;
assign basesoc_master_source_first = basesoc_master_tx_fifo_source_source_first;
assign basesoc_master_source_last = basesoc_master_tx_fifo_source_source_last;
assign basesoc_master_source_payload_data = basesoc_master_tx_fifo_source_source_payload_data;
assign basesoc_master_source_payload_len = basesoc_master_tx_fifo_source_source_payload_len;
assign basesoc_master_source_payload_width = basesoc_master_tx_fifo_source_source_payload_width;
assign basesoc_master_source_payload_mask = basesoc_master_tx_fifo_source_source_payload_mask;
assign basesoc_master_cs = basesoc_master_cs_storage;
assign basesoc_master_tx_fifo_sink_sink_valid = basesoc_master_rxtx_re;
assign basesoc_master_tx_ready = basesoc_master_tx_fifo_sink_sink_ready;
assign basesoc_master_tx_fifo_sink_sink_payload_data = basesoc_master_rxtx_r;
assign basesoc_master_tx_fifo_sink_sink_payload_len = basesoc_master_len;
assign basesoc_master_tx_fifo_sink_sink_payload_width = basesoc_master_width;
assign basesoc_master_tx_fifo_sink_sink_payload_mask = basesoc_master_mask;
assign basesoc_master_rx_fifo_source_source_ready = basesoc_master_rxtx_we;
assign basesoc_master_rx_ready = basesoc_master_rx_fifo_source_source_valid;
assign basesoc_master_rxtx_w = basesoc_master_rx_fifo_source_source_payload_data;
assign basesoc_master_tx_fifo_pipe_valid_sink_ready = ((~basesoc_master_tx_fifo_pipe_valid_source_valid) | basesoc_master_tx_fifo_pipe_valid_source_ready);
assign basesoc_master_tx_fifo_pipe_valid_sink_valid = basesoc_master_tx_fifo_sink_sink_valid;
assign basesoc_master_tx_fifo_sink_sink_ready = basesoc_master_tx_fifo_pipe_valid_sink_ready;
assign basesoc_master_tx_fifo_pipe_valid_sink_first = basesoc_master_tx_fifo_sink_sink_first;
assign basesoc_master_tx_fifo_pipe_valid_sink_last = basesoc_master_tx_fifo_sink_sink_last;
assign basesoc_master_tx_fifo_pipe_valid_sink_payload_data = basesoc_master_tx_fifo_sink_sink_payload_data;
assign basesoc_master_tx_fifo_pipe_valid_sink_payload_len = basesoc_master_tx_fifo_sink_sink_payload_len;
assign basesoc_master_tx_fifo_pipe_valid_sink_payload_width = basesoc_master_tx_fifo_sink_sink_payload_width;
assign basesoc_master_tx_fifo_pipe_valid_sink_payload_mask = basesoc_master_tx_fifo_sink_sink_payload_mask;
assign basesoc_master_tx_fifo_source_source_valid = basesoc_master_tx_fifo_pipe_valid_source_valid;
assign basesoc_master_tx_fifo_pipe_valid_source_ready = basesoc_master_tx_fifo_source_source_ready;
assign basesoc_master_tx_fifo_source_source_first = basesoc_master_tx_fifo_pipe_valid_source_first;
assign basesoc_master_tx_fifo_source_source_last = basesoc_master_tx_fifo_pipe_valid_source_last;
assign basesoc_master_tx_fifo_source_source_payload_data = basesoc_master_tx_fifo_pipe_valid_source_payload_data;
assign basesoc_master_tx_fifo_source_source_payload_len = basesoc_master_tx_fifo_pipe_valid_source_payload_len;
assign basesoc_master_tx_fifo_source_source_payload_width = basesoc_master_tx_fifo_pipe_valid_source_payload_width;
assign basesoc_master_tx_fifo_source_source_payload_mask = basesoc_master_tx_fifo_pipe_valid_source_payload_mask;
assign basesoc_master_rx_fifo_pipe_valid_sink_ready = ((~basesoc_master_rx_fifo_pipe_valid_source_valid) | basesoc_master_rx_fifo_pipe_valid_source_ready);
assign basesoc_master_rx_fifo_pipe_valid_sink_valid = basesoc_master_rx_fifo_sink_sink_valid;
assign basesoc_master_rx_fifo_sink_sink_ready = basesoc_master_rx_fifo_pipe_valid_sink_ready;
assign basesoc_master_rx_fifo_pipe_valid_sink_first = basesoc_master_rx_fifo_sink_sink_first;
assign basesoc_master_rx_fifo_pipe_valid_sink_last = basesoc_master_rx_fifo_sink_sink_last;
assign basesoc_master_rx_fifo_pipe_valid_sink_payload_data = basesoc_master_rx_fifo_sink_sink_payload_data;
assign basesoc_master_rx_fifo_source_source_valid = basesoc_master_rx_fifo_pipe_valid_source_valid;
assign basesoc_master_rx_fifo_pipe_valid_source_ready = basesoc_master_rx_fifo_source_source_ready;
assign basesoc_master_rx_fifo_source_source_first = basesoc_master_rx_fifo_pipe_valid_source_first;
assign basesoc_master_rx_fifo_source_source_last = basesoc_master_rx_fifo_pipe_valid_source_last;
assign basesoc_master_rx_fifo_source_source_payload_data = basesoc_master_rx_fifo_pipe_valid_source_payload_data;
always @(*) begin
    basesoc_spiflash_phy_dq_o <= 1'd0;
    case (basesoc_spiflash_phy_sink_payload_width)
        1'd1: begin
            basesoc_spiflash_phy_dq_o <= basesoc_spiflash_phy_sr_out[31];
        end
        2'd2: begin
            basesoc_spiflash_phy_dq_o <= basesoc_spiflash_phy_sr_out[31:30];
        end
        3'd4: begin
            basesoc_spiflash_phy_dq_o <= basesoc_spiflash_phy_sr_out[31:28];
        end
        4'd8: begin
            basesoc_spiflash_phy_dq_o <= basesoc_spiflash_phy_sr_out[31:24];
        end
    endcase
end
assign basesoc_spiflash_phy_source_payload_data = basesoc_spiflash_phy_sr_in;
assign basesoc_spiflash_phy_spi_clk_divisor = basesoc_spiflash_phy_storage;
assign basesoc_spiflash_phy_posedge = ((basesoc_spiflash_phy_en & (~basesoc_spiflash_phy_clk)) & (basesoc_spiflash_phy_cnt == basesoc_spiflash_phy_div));
assign basesoc_spiflash_phy_negedge = ((basesoc_spiflash_phy_en & basesoc_spiflash_phy_clk) & (basesoc_spiflash_phy_cnt == basesoc_spiflash_phy_div));
assign basesoc_spiflash_phy_posedge_reg2 = basesoc_spiflash_phy_posedge_reg[0];
assign basesoc_spiflash_phy_wait = (basesoc_spiflash_phy_cs != 1'd0);
assign basesoc_spiflash_phy_enable = basesoc_spiflash_phy_done;
assign basesoc_spiflash_phy_cs_n = (~({1{basesoc_spiflash_phy_enable}} & basesoc_spiflash_phy_cs));
assign basesoc_spiflash_phy_done = (basesoc_spiflash_phy_count == 1'd0);
always @(*) begin
    basesoc_litespiphy_next_state <= 2'd0;
    basesoc_spiflash_phy_dq_oe_litespiphy_next_value2 <= 1'd0;
    basesoc_spiflash_phy_dq_oe_litespiphy_next_value_ce2 <= 1'd0;
    basesoc_spiflash_phy_en <= 1'd0;
    basesoc_spiflash_phy_sink_ready <= 1'd0;
    basesoc_spiflash_phy_source_valid <= 1'd0;
    basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value1 <= 6'd0;
    basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value_ce1 <= 1'd0;
    basesoc_spiflash_phy_sr_in_shift <= 1'd0;
    basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value0 <= 6'd0;
    basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value_ce0 <= 1'd0;
    basesoc_spiflash_phy_sr_out_load <= 1'd0;
    basesoc_spiflash_phy_sr_out_shift <= 1'd0;
    basesoc_litespiphy_next_state <= basesoc_litespiphy_state;
    case (basesoc_litespiphy_state)
        1'd1: begin
            basesoc_spiflash_phy_en <= 1'd1;
            if (basesoc_spiflash_phy_posedge_reg2) begin
                basesoc_spiflash_phy_sr_in_shift <= 1'd1;
            end
            if (basesoc_spiflash_phy_negedge) begin
                basesoc_spiflash_phy_sr_out_shift <= 1'd1;
            end
            if (basesoc_spiflash_phy_posedge_reg2) begin
                basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value1 <= (basesoc_spiflash_phy_sr_in_cnt - basesoc_spiflash_phy_sink_payload_width);
                basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value_ce1 <= 1'd1;
            end
            if (basesoc_spiflash_phy_negedge) begin
                basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value0 <= (basesoc_spiflash_phy_sr_out_cnt - basesoc_spiflash_phy_sink_payload_width);
                basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value_ce0 <= 1'd1;
                if ((basesoc_spiflash_phy_sr_out_cnt == 1'd0)) begin
                    basesoc_litespiphy_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if ((basesoc_spiflash_phy_sr_in_cnt == 1'd0)) begin
                basesoc_spiflash_phy_sink_ready <= 1'd1;
                basesoc_litespiphy_next_state <= 2'd3;
            end else begin
                basesoc_spiflash_phy_sr_in_shift <= basesoc_spiflash_phy_posedge_reg2;
                if (basesoc_spiflash_phy_posedge_reg2) begin
                    basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value1 <= (basesoc_spiflash_phy_sr_in_cnt - basesoc_spiflash_phy_sink_payload_width);
                    basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value_ce1 <= 1'd1;
                    if ((basesoc_spiflash_phy_sr_in_cnt == basesoc_spiflash_phy_sink_payload_width)) begin
                        basesoc_spiflash_phy_sink_ready <= 1'd1;
                        basesoc_litespiphy_next_state <= 2'd3;
                    end
                end
            end
        end
        2'd3: begin
            basesoc_spiflash_phy_source_valid <= 1'd1;
            basesoc_spiflash_phy_dq_oe_litespiphy_next_value2 <= 1'd0;
            basesoc_spiflash_phy_dq_oe_litespiphy_next_value_ce2 <= 1'd1;
            if (basesoc_spiflash_phy_source_ready) begin
                basesoc_litespiphy_next_state <= 1'd0;
            end
        end
        default: begin
            if ((basesoc_spiflash_phy_enable & basesoc_spiflash_phy_sink_valid)) begin
                basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value0 <= (basesoc_spiflash_phy_sink_payload_len - basesoc_spiflash_phy_sink_payload_width);
                basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value_ce0 <= 1'd1;
                basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value1 <= basesoc_spiflash_phy_sink_payload_len;
                basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value_ce1 <= 1'd1;
                basesoc_spiflash_phy_dq_oe_litespiphy_next_value2 <= basesoc_spiflash_phy_sink_payload_mask;
                basesoc_spiflash_phy_dq_oe_litespiphy_next_value_ce2 <= 1'd1;
                basesoc_spiflash_phy_sr_out_load <= 1'd1;
                basesoc_litespiphy_next_state <= 1'd1;
            end
        end
    endcase
end
assign dfi_p0_address = basesoc_sdram_master_p0_address;
assign dfi_p0_bank = basesoc_sdram_master_p0_bank;
assign dfi_p0_cas_n = basesoc_sdram_master_p0_cas_n;
assign dfi_p0_cs_n = basesoc_sdram_master_p0_cs_n;
assign dfi_p0_ras_n = basesoc_sdram_master_p0_ras_n;
assign dfi_p0_we_n = basesoc_sdram_master_p0_we_n;
assign dfi_p0_cke = basesoc_sdram_master_p0_cke;
assign dfi_p0_odt = basesoc_sdram_master_p0_odt;
assign dfi_p0_reset_n = basesoc_sdram_master_p0_reset_n;
assign dfi_p0_act_n = basesoc_sdram_master_p0_act_n;
assign dfi_p0_wrdata = basesoc_sdram_master_p0_wrdata;
assign dfi_p0_wrdata_en = basesoc_sdram_master_p0_wrdata_en;
assign dfi_p0_wrdata_mask = basesoc_sdram_master_p0_wrdata_mask;
assign dfi_p0_rddata_en = basesoc_sdram_master_p0_rddata_en;
assign basesoc_sdram_master_p0_rddata = dfi_p0_rddata;
assign basesoc_sdram_master_p0_rddata_valid = dfi_p0_rddata_valid;
assign basesoc_sdram_slave_p0_address = basesoc_sdram_dfi_p0_address;
assign basesoc_sdram_slave_p0_bank = basesoc_sdram_dfi_p0_bank;
assign basesoc_sdram_slave_p0_cas_n = basesoc_sdram_dfi_p0_cas_n;
assign basesoc_sdram_slave_p0_cs_n = basesoc_sdram_dfi_p0_cs_n;
assign basesoc_sdram_slave_p0_ras_n = basesoc_sdram_dfi_p0_ras_n;
assign basesoc_sdram_slave_p0_we_n = basesoc_sdram_dfi_p0_we_n;
assign basesoc_sdram_slave_p0_cke = basesoc_sdram_dfi_p0_cke;
assign basesoc_sdram_slave_p0_odt = basesoc_sdram_dfi_p0_odt;
assign basesoc_sdram_slave_p0_reset_n = basesoc_sdram_dfi_p0_reset_n;
assign basesoc_sdram_slave_p0_act_n = basesoc_sdram_dfi_p0_act_n;
assign basesoc_sdram_slave_p0_wrdata = basesoc_sdram_dfi_p0_wrdata;
assign basesoc_sdram_slave_p0_wrdata_en = basesoc_sdram_dfi_p0_wrdata_en;
assign basesoc_sdram_slave_p0_wrdata_mask = basesoc_sdram_dfi_p0_wrdata_mask;
assign basesoc_sdram_slave_p0_rddata_en = basesoc_sdram_dfi_p0_rddata_en;
assign basesoc_sdram_dfi_p0_rddata = basesoc_sdram_slave_p0_rddata;
assign basesoc_sdram_dfi_p0_rddata_valid = basesoc_sdram_slave_p0_rddata_valid;
always @(*) begin
    basesoc_sdram_csr_dfi_p0_rddata <= 32'd0;
    basesoc_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    basesoc_sdram_ext_dfi_p0_rddata <= 32'd0;
    basesoc_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    basesoc_sdram_master_p0_act_n <= 1'd1;
    basesoc_sdram_master_p0_address <= 11'd0;
    basesoc_sdram_master_p0_bank <= 2'd0;
    basesoc_sdram_master_p0_cas_n <= 1'd1;
    basesoc_sdram_master_p0_cke <= 1'd0;
    basesoc_sdram_master_p0_cs_n <= 1'd1;
    basesoc_sdram_master_p0_odt <= 1'd0;
    basesoc_sdram_master_p0_ras_n <= 1'd1;
    basesoc_sdram_master_p0_rddata_en <= 1'd0;
    basesoc_sdram_master_p0_reset_n <= 1'd0;
    basesoc_sdram_master_p0_we_n <= 1'd1;
    basesoc_sdram_master_p0_wrdata <= 32'd0;
    basesoc_sdram_master_p0_wrdata_en <= 1'd0;
    basesoc_sdram_master_p0_wrdata_mask <= 4'd0;
    basesoc_sdram_slave_p0_rddata <= 32'd0;
    basesoc_sdram_slave_p0_rddata_valid <= 1'd0;
    if (basesoc_sdram_sel) begin
        if (basesoc_sdram_ext_dfi_sel) begin
            basesoc_sdram_master_p0_address <= basesoc_sdram_ext_dfi_p0_address;
            basesoc_sdram_master_p0_bank <= basesoc_sdram_ext_dfi_p0_bank;
            basesoc_sdram_master_p0_cas_n <= basesoc_sdram_ext_dfi_p0_cas_n;
            basesoc_sdram_master_p0_cs_n <= basesoc_sdram_ext_dfi_p0_cs_n;
            basesoc_sdram_master_p0_ras_n <= basesoc_sdram_ext_dfi_p0_ras_n;
            basesoc_sdram_master_p0_we_n <= basesoc_sdram_ext_dfi_p0_we_n;
            basesoc_sdram_master_p0_cke <= basesoc_sdram_ext_dfi_p0_cke;
            basesoc_sdram_master_p0_odt <= basesoc_sdram_ext_dfi_p0_odt;
            basesoc_sdram_master_p0_reset_n <= basesoc_sdram_ext_dfi_p0_reset_n;
            basesoc_sdram_master_p0_act_n <= basesoc_sdram_ext_dfi_p0_act_n;
            basesoc_sdram_master_p0_wrdata <= basesoc_sdram_ext_dfi_p0_wrdata;
            basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_ext_dfi_p0_wrdata_en;
            basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_ext_dfi_p0_wrdata_mask;
            basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_ext_dfi_p0_rddata_en;
            basesoc_sdram_ext_dfi_p0_rddata <= basesoc_sdram_master_p0_rddata;
            basesoc_sdram_ext_dfi_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
        end else begin
            basesoc_sdram_master_p0_address <= basesoc_sdram_slave_p0_address;
            basesoc_sdram_master_p0_bank <= basesoc_sdram_slave_p0_bank;
            basesoc_sdram_master_p0_cas_n <= basesoc_sdram_slave_p0_cas_n;
            basesoc_sdram_master_p0_cs_n <= basesoc_sdram_slave_p0_cs_n;
            basesoc_sdram_master_p0_ras_n <= basesoc_sdram_slave_p0_ras_n;
            basesoc_sdram_master_p0_we_n <= basesoc_sdram_slave_p0_we_n;
            basesoc_sdram_master_p0_cke <= basesoc_sdram_slave_p0_cke;
            basesoc_sdram_master_p0_odt <= basesoc_sdram_slave_p0_odt;
            basesoc_sdram_master_p0_reset_n <= basesoc_sdram_slave_p0_reset_n;
            basesoc_sdram_master_p0_act_n <= basesoc_sdram_slave_p0_act_n;
            basesoc_sdram_master_p0_wrdata <= basesoc_sdram_slave_p0_wrdata;
            basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_slave_p0_wrdata_en;
            basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_slave_p0_wrdata_mask;
            basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_slave_p0_rddata_en;
            basesoc_sdram_slave_p0_rddata <= basesoc_sdram_master_p0_rddata;
            basesoc_sdram_slave_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
            if (1'd0) begin
                basesoc_sdram_master_p0_cs_n <= {2{basesoc_sdram_slave_p0_cs_n}};
            end
        end
    end else begin
        basesoc_sdram_master_p0_address <= basesoc_sdram_csr_dfi_p0_address;
        basesoc_sdram_master_p0_bank <= basesoc_sdram_csr_dfi_p0_bank;
        basesoc_sdram_master_p0_cas_n <= basesoc_sdram_csr_dfi_p0_cas_n;
        basesoc_sdram_master_p0_cs_n <= basesoc_sdram_csr_dfi_p0_cs_n;
        basesoc_sdram_master_p0_ras_n <= basesoc_sdram_csr_dfi_p0_ras_n;
        basesoc_sdram_master_p0_we_n <= basesoc_sdram_csr_dfi_p0_we_n;
        basesoc_sdram_master_p0_cke <= basesoc_sdram_csr_dfi_p0_cke;
        basesoc_sdram_master_p0_odt <= basesoc_sdram_csr_dfi_p0_odt;
        basesoc_sdram_master_p0_reset_n <= basesoc_sdram_csr_dfi_p0_reset_n;
        basesoc_sdram_master_p0_act_n <= basesoc_sdram_csr_dfi_p0_act_n;
        basesoc_sdram_master_p0_wrdata <= basesoc_sdram_csr_dfi_p0_wrdata;
        basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_csr_dfi_p0_wrdata_en;
        basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_csr_dfi_p0_wrdata_mask;
        basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_csr_dfi_p0_rddata_en;
        basesoc_sdram_csr_dfi_p0_rddata <= basesoc_sdram_master_p0_rddata;
        basesoc_sdram_csr_dfi_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
    end
end
assign basesoc_sdram_csr_dfi_p0_cke = basesoc_sdram_cke;
assign basesoc_sdram_csr_dfi_p0_odt = basesoc_sdram_odt;
assign basesoc_sdram_csr_dfi_p0_reset_n = basesoc_sdram_reset_n;
always @(*) begin
    basesoc_sdram_csr_dfi_p0_cas_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_cs_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_ras_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (basesoc_sdram_command_issue_re) begin
        if (basesoc_sdram_csrfield_cs_top) begin
            basesoc_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (basesoc_sdram_csrfield_cs_bottom) begin
                basesoc_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                basesoc_sdram_csr_dfi_p0_cs_n <= {1{(~basesoc_sdram_csrfield_cs)}};
            end
        end
        basesoc_sdram_csr_dfi_p0_we_n <= (~basesoc_sdram_csrfield_we);
        basesoc_sdram_csr_dfi_p0_cas_n <= (~basesoc_sdram_csrfield_cas);
        basesoc_sdram_csr_dfi_p0_ras_n <= (~basesoc_sdram_csrfield_ras);
    end else begin
        basesoc_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
        basesoc_sdram_csr_dfi_p0_we_n <= 1'd1;
        basesoc_sdram_csr_dfi_p0_cas_n <= 1'd1;
        basesoc_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign basesoc_sdram_csr_dfi_p0_address = basesoc_sdram_address_storage;
assign basesoc_sdram_csr_dfi_p0_bank = basesoc_sdram_baddress_storage;
assign basesoc_sdram_csr_dfi_p0_wrdata_en = (basesoc_sdram_command_issue_re & basesoc_sdram_csrfield_wren);
assign basesoc_sdram_csr_dfi_p0_rddata_en = (basesoc_sdram_command_issue_re & basesoc_sdram_csrfield_rden);
assign basesoc_sdram_csr_dfi_p0_wrdata = basesoc_sdram_wrdata_storage;
assign basesoc_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
assign basesoc_sdram_bankmachine0_req_valid = basesoc_sdram_interface_bank0_valid;
assign basesoc_sdram_interface_bank0_ready = basesoc_sdram_bankmachine0_req_ready;
assign basesoc_sdram_bankmachine0_req_we = basesoc_sdram_interface_bank0_we;
assign basesoc_sdram_bankmachine0_req_addr = basesoc_sdram_interface_bank0_addr;
assign basesoc_sdram_interface_bank0_lock = basesoc_sdram_bankmachine0_req_lock;
assign basesoc_sdram_interface_bank0_wdata_ready = basesoc_sdram_bankmachine0_req_wdata_ready;
assign basesoc_sdram_interface_bank0_rdata_valid = basesoc_sdram_bankmachine0_req_rdata_valid;
assign basesoc_sdram_bankmachine1_req_valid = basesoc_sdram_interface_bank1_valid;
assign basesoc_sdram_interface_bank1_ready = basesoc_sdram_bankmachine1_req_ready;
assign basesoc_sdram_bankmachine1_req_we = basesoc_sdram_interface_bank1_we;
assign basesoc_sdram_bankmachine1_req_addr = basesoc_sdram_interface_bank1_addr;
assign basesoc_sdram_interface_bank1_lock = basesoc_sdram_bankmachine1_req_lock;
assign basesoc_sdram_interface_bank1_wdata_ready = basesoc_sdram_bankmachine1_req_wdata_ready;
assign basesoc_sdram_interface_bank1_rdata_valid = basesoc_sdram_bankmachine1_req_rdata_valid;
assign basesoc_sdram_bankmachine2_req_valid = basesoc_sdram_interface_bank2_valid;
assign basesoc_sdram_interface_bank2_ready = basesoc_sdram_bankmachine2_req_ready;
assign basesoc_sdram_bankmachine2_req_we = basesoc_sdram_interface_bank2_we;
assign basesoc_sdram_bankmachine2_req_addr = basesoc_sdram_interface_bank2_addr;
assign basesoc_sdram_interface_bank2_lock = basesoc_sdram_bankmachine2_req_lock;
assign basesoc_sdram_interface_bank2_wdata_ready = basesoc_sdram_bankmachine2_req_wdata_ready;
assign basesoc_sdram_interface_bank2_rdata_valid = basesoc_sdram_bankmachine2_req_rdata_valid;
assign basesoc_sdram_bankmachine3_req_valid = basesoc_sdram_interface_bank3_valid;
assign basesoc_sdram_interface_bank3_ready = basesoc_sdram_bankmachine3_req_ready;
assign basesoc_sdram_bankmachine3_req_we = basesoc_sdram_interface_bank3_we;
assign basesoc_sdram_bankmachine3_req_addr = basesoc_sdram_interface_bank3_addr;
assign basesoc_sdram_interface_bank3_lock = basesoc_sdram_bankmachine3_req_lock;
assign basesoc_sdram_interface_bank3_wdata_ready = basesoc_sdram_bankmachine3_req_wdata_ready;
assign basesoc_sdram_interface_bank3_rdata_valid = basesoc_sdram_bankmachine3_req_rdata_valid;
assign basesoc_sdram_timer_wait = (~basesoc_sdram_timer_done0);
assign basesoc_sdram_postponer_req_i = basesoc_sdram_timer_done0;
assign basesoc_sdram_wants_refresh = basesoc_sdram_postponer_req_o;
assign basesoc_sdram_timer_done1 = (basesoc_sdram_timer_count1 == 1'd0);
assign basesoc_sdram_timer_done0 = basesoc_sdram_timer_done1;
assign basesoc_sdram_timer_count0 = basesoc_sdram_timer_count1;
assign basesoc_sdram_sequencer_start1 = (basesoc_sdram_sequencer_start0 | (basesoc_sdram_sequencer_count != 1'd0));
assign basesoc_sdram_sequencer_done0 = (basesoc_sdram_sequencer_done1 & (basesoc_sdram_sequencer_count == 1'd0));
always @(*) begin
    basesoc_litedramcore_refresher_next_state <= 2'd0;
    basesoc_sdram_cmd_last <= 1'd0;
    basesoc_sdram_cmd_valid <= 1'd0;
    basesoc_sdram_sequencer_start0 <= 1'd0;
    basesoc_litedramcore_refresher_next_state <= basesoc_litedramcore_refresher_state;
    case (basesoc_litedramcore_refresher_state)
        1'd1: begin
            basesoc_sdram_cmd_valid <= 1'd1;
            if (basesoc_sdram_cmd_ready) begin
                basesoc_sdram_sequencer_start0 <= 1'd1;
                basesoc_litedramcore_refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_sdram_cmd_valid <= 1'd1;
            if (basesoc_sdram_sequencer_done0) begin
                basesoc_sdram_cmd_valid <= 1'd0;
                basesoc_sdram_cmd_last <= 1'd1;
                basesoc_litedramcore_refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (basesoc_sdram_wants_refresh) begin
                    basesoc_litedramcore_refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine0_sink_valid = basesoc_sdram_bankmachine0_req_valid;
assign basesoc_sdram_bankmachine0_req_ready = basesoc_sdram_bankmachine0_sink_ready;
assign basesoc_sdram_bankmachine0_sink_payload_we = basesoc_sdram_bankmachine0_req_we;
assign basesoc_sdram_bankmachine0_sink_payload_addr = basesoc_sdram_bankmachine0_req_addr;
assign basesoc_sdram_bankmachine0_sink_sink_valid = basesoc_sdram_bankmachine0_source_valid;
assign basesoc_sdram_bankmachine0_source_ready = basesoc_sdram_bankmachine0_sink_sink_ready;
assign basesoc_sdram_bankmachine0_sink_sink_first = basesoc_sdram_bankmachine0_source_first;
assign basesoc_sdram_bankmachine0_sink_sink_last = basesoc_sdram_bankmachine0_source_last;
assign basesoc_sdram_bankmachine0_sink_sink_payload_we = basesoc_sdram_bankmachine0_source_payload_we;
assign basesoc_sdram_bankmachine0_sink_sink_payload_addr = basesoc_sdram_bankmachine0_source_payload_addr;
assign basesoc_sdram_bankmachine0_source_source_ready = (basesoc_sdram_bankmachine0_req_wdata_ready | basesoc_sdram_bankmachine0_req_rdata_valid);
assign basesoc_sdram_bankmachine0_req_lock = (basesoc_sdram_bankmachine0_source_valid | basesoc_sdram_bankmachine0_source_source_valid);
assign basesoc_sdram_bankmachine0_row_hit = (basesoc_sdram_bankmachine0_row == basesoc_sdram_bankmachine0_source_source_payload_addr[18:8]);
assign basesoc_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    basesoc_sdram_bankmachine0_cmd_payload_a <= 11'd0;
    if (basesoc_sdram_bankmachine0_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine0_cmd_payload_a <= basesoc_sdram_bankmachine0_source_source_payload_addr[18:8];
    end else begin
        basesoc_sdram_bankmachine0_cmd_payload_a <= ((basesoc_sdram_bankmachine0_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine0_source_source_payload_addr[7:0], {0{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine0_twtpcon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_cmd_payload_is_write);
assign basesoc_sdram_bankmachine0_trccon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_row_open);
assign basesoc_sdram_bankmachine0_trascon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_row_open);
always @(*) begin
    basesoc_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine0_source_valid & basesoc_sdram_bankmachine0_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine0_source_payload_addr[18:8] != basesoc_sdram_bankmachine0_source_source_payload_addr[18:8])) begin
            basesoc_sdram_bankmachine0_auto_precharge <= (basesoc_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine0_syncfifo0_din = {basesoc_sdram_bankmachine0_fifo_in_last, basesoc_sdram_bankmachine0_fifo_in_first, basesoc_sdram_bankmachine0_fifo_in_payload_addr, basesoc_sdram_bankmachine0_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine0_fifo_out_last, basesoc_sdram_bankmachine0_fifo_out_first, basesoc_sdram_bankmachine0_fifo_out_payload_addr, basesoc_sdram_bankmachine0_fifo_out_payload_we} = basesoc_sdram_bankmachine0_syncfifo0_dout;
assign basesoc_sdram_bankmachine0_sink_ready = basesoc_sdram_bankmachine0_syncfifo0_writable;
assign basesoc_sdram_bankmachine0_syncfifo0_we = basesoc_sdram_bankmachine0_sink_valid;
assign basesoc_sdram_bankmachine0_fifo_in_first = basesoc_sdram_bankmachine0_sink_first;
assign basesoc_sdram_bankmachine0_fifo_in_last = basesoc_sdram_bankmachine0_sink_last;
assign basesoc_sdram_bankmachine0_fifo_in_payload_we = basesoc_sdram_bankmachine0_sink_payload_we;
assign basesoc_sdram_bankmachine0_fifo_in_payload_addr = basesoc_sdram_bankmachine0_sink_payload_addr;
assign basesoc_sdram_bankmachine0_source_valid = basesoc_sdram_bankmachine0_syncfifo0_readable;
assign basesoc_sdram_bankmachine0_source_first = basesoc_sdram_bankmachine0_fifo_out_first;
assign basesoc_sdram_bankmachine0_source_last = basesoc_sdram_bankmachine0_fifo_out_last;
assign basesoc_sdram_bankmachine0_source_payload_we = basesoc_sdram_bankmachine0_fifo_out_payload_we;
assign basesoc_sdram_bankmachine0_source_payload_addr = basesoc_sdram_bankmachine0_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine0_syncfifo0_re = basesoc_sdram_bankmachine0_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine0_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine0_replace) begin
        basesoc_sdram_bankmachine0_wrport_adr <= (basesoc_sdram_bankmachine0_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine0_wrport_adr <= basesoc_sdram_bankmachine0_produce;
    end
end
assign basesoc_sdram_bankmachine0_wrport_dat_w = basesoc_sdram_bankmachine0_syncfifo0_din;
assign basesoc_sdram_bankmachine0_wrport_we = (basesoc_sdram_bankmachine0_syncfifo0_we & (basesoc_sdram_bankmachine0_syncfifo0_writable | basesoc_sdram_bankmachine0_replace));
assign basesoc_sdram_bankmachine0_do_read = (basesoc_sdram_bankmachine0_syncfifo0_readable & basesoc_sdram_bankmachine0_syncfifo0_re);
assign basesoc_sdram_bankmachine0_rdport_adr = basesoc_sdram_bankmachine0_consume;
assign basesoc_sdram_bankmachine0_syncfifo0_dout = basesoc_sdram_bankmachine0_rdport_dat_r;
assign basesoc_sdram_bankmachine0_syncfifo0_writable = (basesoc_sdram_bankmachine0_level != 4'd8);
assign basesoc_sdram_bankmachine0_syncfifo0_readable = (basesoc_sdram_bankmachine0_level != 1'd0);
assign basesoc_sdram_bankmachine0_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine0_pipe_valid_source_valid) | basesoc_sdram_bankmachine0_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine0_pipe_valid_sink_valid = basesoc_sdram_bankmachine0_sink_sink_valid;
assign basesoc_sdram_bankmachine0_sink_sink_ready = basesoc_sdram_bankmachine0_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_first = basesoc_sdram_bankmachine0_sink_sink_first;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_last = basesoc_sdram_bankmachine0_sink_sink_last;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine0_sink_sink_payload_we;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine0_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine0_source_source_valid = basesoc_sdram_bankmachine0_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine0_pipe_valid_source_ready = basesoc_sdram_bankmachine0_source_source_ready;
assign basesoc_sdram_bankmachine0_source_source_first = basesoc_sdram_bankmachine0_pipe_valid_source_first;
assign basesoc_sdram_bankmachine0_source_source_last = basesoc_sdram_bankmachine0_pipe_valid_source_last;
assign basesoc_sdram_bankmachine0_source_source_payload_we = basesoc_sdram_bankmachine0_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine0_source_source_payload_addr = basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    basesoc_litedramcore_bankmachine0_next_state <= 3'd0;
    basesoc_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine0_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine0_row_close <= 1'd0;
    basesoc_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine0_row_open <= 1'd0;
    basesoc_litedramcore_bankmachine0_next_state <= basesoc_litedramcore_bankmachine0_state;
    case (basesoc_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine0_twtpcon_ready & basesoc_sdram_bankmachine0_trascon_ready)) begin
                basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine0_cmd_ready) begin
                    basesoc_litedramcore_bankmachine0_next_state <= 2'd3;
                end
                basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine0_twtpcon_ready & basesoc_sdram_bankmachine0_trascon_ready)) begin
                basesoc_litedramcore_bankmachine0_next_state <= 2'd3;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine0_trccon_ready) begin
                basesoc_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine0_row_open <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine0_cmd_ready) begin
                    basesoc_litedramcore_bankmachine0_next_state <= 1'd0;
                end
                basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine0_twtpcon_ready) begin
                basesoc_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
            basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine0_refresh_req)) begin
                basesoc_litedramcore_bankmachine0_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_sdram_bankmachine0_refresh_req) begin
                basesoc_litedramcore_bankmachine0_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine0_source_source_valid) begin
                    if (basesoc_sdram_bankmachine0_row_opened) begin
                        if (basesoc_sdram_bankmachine0_row_hit) begin
                            basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine0_source_source_payload_we) begin
                                basesoc_sdram_bankmachine0_req_wdata_ready <= basesoc_sdram_bankmachine0_cmd_ready;
                                basesoc_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine0_req_rdata_valid <= basesoc_sdram_bankmachine0_cmd_ready;
                                basesoc_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine0_cmd_ready & basesoc_sdram_bankmachine0_auto_precharge)) begin
                                basesoc_litedramcore_bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            basesoc_litedramcore_bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        basesoc_litedramcore_bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine1_sink_valid = basesoc_sdram_bankmachine1_req_valid;
assign basesoc_sdram_bankmachine1_req_ready = basesoc_sdram_bankmachine1_sink_ready;
assign basesoc_sdram_bankmachine1_sink_payload_we = basesoc_sdram_bankmachine1_req_we;
assign basesoc_sdram_bankmachine1_sink_payload_addr = basesoc_sdram_bankmachine1_req_addr;
assign basesoc_sdram_bankmachine1_sink_sink_valid = basesoc_sdram_bankmachine1_source_valid;
assign basesoc_sdram_bankmachine1_source_ready = basesoc_sdram_bankmachine1_sink_sink_ready;
assign basesoc_sdram_bankmachine1_sink_sink_first = basesoc_sdram_bankmachine1_source_first;
assign basesoc_sdram_bankmachine1_sink_sink_last = basesoc_sdram_bankmachine1_source_last;
assign basesoc_sdram_bankmachine1_sink_sink_payload_we = basesoc_sdram_bankmachine1_source_payload_we;
assign basesoc_sdram_bankmachine1_sink_sink_payload_addr = basesoc_sdram_bankmachine1_source_payload_addr;
assign basesoc_sdram_bankmachine1_source_source_ready = (basesoc_sdram_bankmachine1_req_wdata_ready | basesoc_sdram_bankmachine1_req_rdata_valid);
assign basesoc_sdram_bankmachine1_req_lock = (basesoc_sdram_bankmachine1_source_valid | basesoc_sdram_bankmachine1_source_source_valid);
assign basesoc_sdram_bankmachine1_row_hit = (basesoc_sdram_bankmachine1_row == basesoc_sdram_bankmachine1_source_source_payload_addr[18:8]);
assign basesoc_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    basesoc_sdram_bankmachine1_cmd_payload_a <= 11'd0;
    if (basesoc_sdram_bankmachine1_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine1_cmd_payload_a <= basesoc_sdram_bankmachine1_source_source_payload_addr[18:8];
    end else begin
        basesoc_sdram_bankmachine1_cmd_payload_a <= ((basesoc_sdram_bankmachine1_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine1_source_source_payload_addr[7:0], {0{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine1_twtpcon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_cmd_payload_is_write);
assign basesoc_sdram_bankmachine1_trccon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_row_open);
assign basesoc_sdram_bankmachine1_trascon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_row_open);
always @(*) begin
    basesoc_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine1_source_valid & basesoc_sdram_bankmachine1_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine1_source_payload_addr[18:8] != basesoc_sdram_bankmachine1_source_source_payload_addr[18:8])) begin
            basesoc_sdram_bankmachine1_auto_precharge <= (basesoc_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine1_syncfifo1_din = {basesoc_sdram_bankmachine1_fifo_in_last, basesoc_sdram_bankmachine1_fifo_in_first, basesoc_sdram_bankmachine1_fifo_in_payload_addr, basesoc_sdram_bankmachine1_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine1_fifo_out_last, basesoc_sdram_bankmachine1_fifo_out_first, basesoc_sdram_bankmachine1_fifo_out_payload_addr, basesoc_sdram_bankmachine1_fifo_out_payload_we} = basesoc_sdram_bankmachine1_syncfifo1_dout;
assign basesoc_sdram_bankmachine1_sink_ready = basesoc_sdram_bankmachine1_syncfifo1_writable;
assign basesoc_sdram_bankmachine1_syncfifo1_we = basesoc_sdram_bankmachine1_sink_valid;
assign basesoc_sdram_bankmachine1_fifo_in_first = basesoc_sdram_bankmachine1_sink_first;
assign basesoc_sdram_bankmachine1_fifo_in_last = basesoc_sdram_bankmachine1_sink_last;
assign basesoc_sdram_bankmachine1_fifo_in_payload_we = basesoc_sdram_bankmachine1_sink_payload_we;
assign basesoc_sdram_bankmachine1_fifo_in_payload_addr = basesoc_sdram_bankmachine1_sink_payload_addr;
assign basesoc_sdram_bankmachine1_source_valid = basesoc_sdram_bankmachine1_syncfifo1_readable;
assign basesoc_sdram_bankmachine1_source_first = basesoc_sdram_bankmachine1_fifo_out_first;
assign basesoc_sdram_bankmachine1_source_last = basesoc_sdram_bankmachine1_fifo_out_last;
assign basesoc_sdram_bankmachine1_source_payload_we = basesoc_sdram_bankmachine1_fifo_out_payload_we;
assign basesoc_sdram_bankmachine1_source_payload_addr = basesoc_sdram_bankmachine1_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine1_syncfifo1_re = basesoc_sdram_bankmachine1_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine1_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine1_replace) begin
        basesoc_sdram_bankmachine1_wrport_adr <= (basesoc_sdram_bankmachine1_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine1_wrport_adr <= basesoc_sdram_bankmachine1_produce;
    end
end
assign basesoc_sdram_bankmachine1_wrport_dat_w = basesoc_sdram_bankmachine1_syncfifo1_din;
assign basesoc_sdram_bankmachine1_wrport_we = (basesoc_sdram_bankmachine1_syncfifo1_we & (basesoc_sdram_bankmachine1_syncfifo1_writable | basesoc_sdram_bankmachine1_replace));
assign basesoc_sdram_bankmachine1_do_read = (basesoc_sdram_bankmachine1_syncfifo1_readable & basesoc_sdram_bankmachine1_syncfifo1_re);
assign basesoc_sdram_bankmachine1_rdport_adr = basesoc_sdram_bankmachine1_consume;
assign basesoc_sdram_bankmachine1_syncfifo1_dout = basesoc_sdram_bankmachine1_rdport_dat_r;
assign basesoc_sdram_bankmachine1_syncfifo1_writable = (basesoc_sdram_bankmachine1_level != 4'd8);
assign basesoc_sdram_bankmachine1_syncfifo1_readable = (basesoc_sdram_bankmachine1_level != 1'd0);
assign basesoc_sdram_bankmachine1_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine1_pipe_valid_source_valid) | basesoc_sdram_bankmachine1_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine1_pipe_valid_sink_valid = basesoc_sdram_bankmachine1_sink_sink_valid;
assign basesoc_sdram_bankmachine1_sink_sink_ready = basesoc_sdram_bankmachine1_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_first = basesoc_sdram_bankmachine1_sink_sink_first;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_last = basesoc_sdram_bankmachine1_sink_sink_last;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine1_sink_sink_payload_we;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine1_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine1_source_source_valid = basesoc_sdram_bankmachine1_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine1_pipe_valid_source_ready = basesoc_sdram_bankmachine1_source_source_ready;
assign basesoc_sdram_bankmachine1_source_source_first = basesoc_sdram_bankmachine1_pipe_valid_source_first;
assign basesoc_sdram_bankmachine1_source_source_last = basesoc_sdram_bankmachine1_pipe_valid_source_last;
assign basesoc_sdram_bankmachine1_source_source_payload_we = basesoc_sdram_bankmachine1_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine1_source_source_payload_addr = basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    basesoc_litedramcore_bankmachine1_next_state <= 3'd0;
    basesoc_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine1_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine1_row_close <= 1'd0;
    basesoc_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine1_row_open <= 1'd0;
    basesoc_litedramcore_bankmachine1_next_state <= basesoc_litedramcore_bankmachine1_state;
    case (basesoc_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine1_twtpcon_ready & basesoc_sdram_bankmachine1_trascon_ready)) begin
                basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine1_cmd_ready) begin
                    basesoc_litedramcore_bankmachine1_next_state <= 2'd3;
                end
                basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine1_twtpcon_ready & basesoc_sdram_bankmachine1_trascon_ready)) begin
                basesoc_litedramcore_bankmachine1_next_state <= 2'd3;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine1_trccon_ready) begin
                basesoc_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine1_row_open <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine1_cmd_ready) begin
                    basesoc_litedramcore_bankmachine1_next_state <= 1'd0;
                end
                basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine1_twtpcon_ready) begin
                basesoc_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
            basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine1_refresh_req)) begin
                basesoc_litedramcore_bankmachine1_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_sdram_bankmachine1_refresh_req) begin
                basesoc_litedramcore_bankmachine1_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine1_source_source_valid) begin
                    if (basesoc_sdram_bankmachine1_row_opened) begin
                        if (basesoc_sdram_bankmachine1_row_hit) begin
                            basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine1_source_source_payload_we) begin
                                basesoc_sdram_bankmachine1_req_wdata_ready <= basesoc_sdram_bankmachine1_cmd_ready;
                                basesoc_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine1_req_rdata_valid <= basesoc_sdram_bankmachine1_cmd_ready;
                                basesoc_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine1_cmd_ready & basesoc_sdram_bankmachine1_auto_precharge)) begin
                                basesoc_litedramcore_bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            basesoc_litedramcore_bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        basesoc_litedramcore_bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine2_sink_valid = basesoc_sdram_bankmachine2_req_valid;
assign basesoc_sdram_bankmachine2_req_ready = basesoc_sdram_bankmachine2_sink_ready;
assign basesoc_sdram_bankmachine2_sink_payload_we = basesoc_sdram_bankmachine2_req_we;
assign basesoc_sdram_bankmachine2_sink_payload_addr = basesoc_sdram_bankmachine2_req_addr;
assign basesoc_sdram_bankmachine2_sink_sink_valid = basesoc_sdram_bankmachine2_source_valid;
assign basesoc_sdram_bankmachine2_source_ready = basesoc_sdram_bankmachine2_sink_sink_ready;
assign basesoc_sdram_bankmachine2_sink_sink_first = basesoc_sdram_bankmachine2_source_first;
assign basesoc_sdram_bankmachine2_sink_sink_last = basesoc_sdram_bankmachine2_source_last;
assign basesoc_sdram_bankmachine2_sink_sink_payload_we = basesoc_sdram_bankmachine2_source_payload_we;
assign basesoc_sdram_bankmachine2_sink_sink_payload_addr = basesoc_sdram_bankmachine2_source_payload_addr;
assign basesoc_sdram_bankmachine2_source_source_ready = (basesoc_sdram_bankmachine2_req_wdata_ready | basesoc_sdram_bankmachine2_req_rdata_valid);
assign basesoc_sdram_bankmachine2_req_lock = (basesoc_sdram_bankmachine2_source_valid | basesoc_sdram_bankmachine2_source_source_valid);
assign basesoc_sdram_bankmachine2_row_hit = (basesoc_sdram_bankmachine2_row == basesoc_sdram_bankmachine2_source_source_payload_addr[18:8]);
assign basesoc_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    basesoc_sdram_bankmachine2_cmd_payload_a <= 11'd0;
    if (basesoc_sdram_bankmachine2_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine2_cmd_payload_a <= basesoc_sdram_bankmachine2_source_source_payload_addr[18:8];
    end else begin
        basesoc_sdram_bankmachine2_cmd_payload_a <= ((basesoc_sdram_bankmachine2_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine2_source_source_payload_addr[7:0], {0{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine2_twtpcon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_cmd_payload_is_write);
assign basesoc_sdram_bankmachine2_trccon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_row_open);
assign basesoc_sdram_bankmachine2_trascon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_row_open);
always @(*) begin
    basesoc_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine2_source_valid & basesoc_sdram_bankmachine2_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine2_source_payload_addr[18:8] != basesoc_sdram_bankmachine2_source_source_payload_addr[18:8])) begin
            basesoc_sdram_bankmachine2_auto_precharge <= (basesoc_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine2_syncfifo2_din = {basesoc_sdram_bankmachine2_fifo_in_last, basesoc_sdram_bankmachine2_fifo_in_first, basesoc_sdram_bankmachine2_fifo_in_payload_addr, basesoc_sdram_bankmachine2_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine2_fifo_out_last, basesoc_sdram_bankmachine2_fifo_out_first, basesoc_sdram_bankmachine2_fifo_out_payload_addr, basesoc_sdram_bankmachine2_fifo_out_payload_we} = basesoc_sdram_bankmachine2_syncfifo2_dout;
assign basesoc_sdram_bankmachine2_sink_ready = basesoc_sdram_bankmachine2_syncfifo2_writable;
assign basesoc_sdram_bankmachine2_syncfifo2_we = basesoc_sdram_bankmachine2_sink_valid;
assign basesoc_sdram_bankmachine2_fifo_in_first = basesoc_sdram_bankmachine2_sink_first;
assign basesoc_sdram_bankmachine2_fifo_in_last = basesoc_sdram_bankmachine2_sink_last;
assign basesoc_sdram_bankmachine2_fifo_in_payload_we = basesoc_sdram_bankmachine2_sink_payload_we;
assign basesoc_sdram_bankmachine2_fifo_in_payload_addr = basesoc_sdram_bankmachine2_sink_payload_addr;
assign basesoc_sdram_bankmachine2_source_valid = basesoc_sdram_bankmachine2_syncfifo2_readable;
assign basesoc_sdram_bankmachine2_source_first = basesoc_sdram_bankmachine2_fifo_out_first;
assign basesoc_sdram_bankmachine2_source_last = basesoc_sdram_bankmachine2_fifo_out_last;
assign basesoc_sdram_bankmachine2_source_payload_we = basesoc_sdram_bankmachine2_fifo_out_payload_we;
assign basesoc_sdram_bankmachine2_source_payload_addr = basesoc_sdram_bankmachine2_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine2_syncfifo2_re = basesoc_sdram_bankmachine2_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine2_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine2_replace) begin
        basesoc_sdram_bankmachine2_wrport_adr <= (basesoc_sdram_bankmachine2_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine2_wrport_adr <= basesoc_sdram_bankmachine2_produce;
    end
end
assign basesoc_sdram_bankmachine2_wrport_dat_w = basesoc_sdram_bankmachine2_syncfifo2_din;
assign basesoc_sdram_bankmachine2_wrport_we = (basesoc_sdram_bankmachine2_syncfifo2_we & (basesoc_sdram_bankmachine2_syncfifo2_writable | basesoc_sdram_bankmachine2_replace));
assign basesoc_sdram_bankmachine2_do_read = (basesoc_sdram_bankmachine2_syncfifo2_readable & basesoc_sdram_bankmachine2_syncfifo2_re);
assign basesoc_sdram_bankmachine2_rdport_adr = basesoc_sdram_bankmachine2_consume;
assign basesoc_sdram_bankmachine2_syncfifo2_dout = basesoc_sdram_bankmachine2_rdport_dat_r;
assign basesoc_sdram_bankmachine2_syncfifo2_writable = (basesoc_sdram_bankmachine2_level != 4'd8);
assign basesoc_sdram_bankmachine2_syncfifo2_readable = (basesoc_sdram_bankmachine2_level != 1'd0);
assign basesoc_sdram_bankmachine2_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine2_pipe_valid_source_valid) | basesoc_sdram_bankmachine2_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine2_pipe_valid_sink_valid = basesoc_sdram_bankmachine2_sink_sink_valid;
assign basesoc_sdram_bankmachine2_sink_sink_ready = basesoc_sdram_bankmachine2_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_first = basesoc_sdram_bankmachine2_sink_sink_first;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_last = basesoc_sdram_bankmachine2_sink_sink_last;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine2_sink_sink_payload_we;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine2_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine2_source_source_valid = basesoc_sdram_bankmachine2_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine2_pipe_valid_source_ready = basesoc_sdram_bankmachine2_source_source_ready;
assign basesoc_sdram_bankmachine2_source_source_first = basesoc_sdram_bankmachine2_pipe_valid_source_first;
assign basesoc_sdram_bankmachine2_source_source_last = basesoc_sdram_bankmachine2_pipe_valid_source_last;
assign basesoc_sdram_bankmachine2_source_source_payload_we = basesoc_sdram_bankmachine2_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine2_source_source_payload_addr = basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    basesoc_litedramcore_bankmachine2_next_state <= 3'd0;
    basesoc_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine2_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine2_row_close <= 1'd0;
    basesoc_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine2_row_open <= 1'd0;
    basesoc_litedramcore_bankmachine2_next_state <= basesoc_litedramcore_bankmachine2_state;
    case (basesoc_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine2_twtpcon_ready & basesoc_sdram_bankmachine2_trascon_ready)) begin
                basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine2_cmd_ready) begin
                    basesoc_litedramcore_bankmachine2_next_state <= 2'd3;
                end
                basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine2_twtpcon_ready & basesoc_sdram_bankmachine2_trascon_ready)) begin
                basesoc_litedramcore_bankmachine2_next_state <= 2'd3;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine2_trccon_ready) begin
                basesoc_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine2_row_open <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine2_cmd_ready) begin
                    basesoc_litedramcore_bankmachine2_next_state <= 1'd0;
                end
                basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine2_twtpcon_ready) begin
                basesoc_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
            basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine2_refresh_req)) begin
                basesoc_litedramcore_bankmachine2_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_sdram_bankmachine2_refresh_req) begin
                basesoc_litedramcore_bankmachine2_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine2_source_source_valid) begin
                    if (basesoc_sdram_bankmachine2_row_opened) begin
                        if (basesoc_sdram_bankmachine2_row_hit) begin
                            basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine2_source_source_payload_we) begin
                                basesoc_sdram_bankmachine2_req_wdata_ready <= basesoc_sdram_bankmachine2_cmd_ready;
                                basesoc_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine2_req_rdata_valid <= basesoc_sdram_bankmachine2_cmd_ready;
                                basesoc_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine2_cmd_ready & basesoc_sdram_bankmachine2_auto_precharge)) begin
                                basesoc_litedramcore_bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            basesoc_litedramcore_bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        basesoc_litedramcore_bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine3_sink_valid = basesoc_sdram_bankmachine3_req_valid;
assign basesoc_sdram_bankmachine3_req_ready = basesoc_sdram_bankmachine3_sink_ready;
assign basesoc_sdram_bankmachine3_sink_payload_we = basesoc_sdram_bankmachine3_req_we;
assign basesoc_sdram_bankmachine3_sink_payload_addr = basesoc_sdram_bankmachine3_req_addr;
assign basesoc_sdram_bankmachine3_sink_sink_valid = basesoc_sdram_bankmachine3_source_valid;
assign basesoc_sdram_bankmachine3_source_ready = basesoc_sdram_bankmachine3_sink_sink_ready;
assign basesoc_sdram_bankmachine3_sink_sink_first = basesoc_sdram_bankmachine3_source_first;
assign basesoc_sdram_bankmachine3_sink_sink_last = basesoc_sdram_bankmachine3_source_last;
assign basesoc_sdram_bankmachine3_sink_sink_payload_we = basesoc_sdram_bankmachine3_source_payload_we;
assign basesoc_sdram_bankmachine3_sink_sink_payload_addr = basesoc_sdram_bankmachine3_source_payload_addr;
assign basesoc_sdram_bankmachine3_source_source_ready = (basesoc_sdram_bankmachine3_req_wdata_ready | basesoc_sdram_bankmachine3_req_rdata_valid);
assign basesoc_sdram_bankmachine3_req_lock = (basesoc_sdram_bankmachine3_source_valid | basesoc_sdram_bankmachine3_source_source_valid);
assign basesoc_sdram_bankmachine3_row_hit = (basesoc_sdram_bankmachine3_row == basesoc_sdram_bankmachine3_source_source_payload_addr[18:8]);
assign basesoc_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    basesoc_sdram_bankmachine3_cmd_payload_a <= 11'd0;
    if (basesoc_sdram_bankmachine3_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine3_cmd_payload_a <= basesoc_sdram_bankmachine3_source_source_payload_addr[18:8];
    end else begin
        basesoc_sdram_bankmachine3_cmd_payload_a <= ((basesoc_sdram_bankmachine3_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine3_source_source_payload_addr[7:0], {0{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine3_twtpcon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_cmd_payload_is_write);
assign basesoc_sdram_bankmachine3_trccon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_row_open);
assign basesoc_sdram_bankmachine3_trascon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_row_open);
always @(*) begin
    basesoc_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine3_source_valid & basesoc_sdram_bankmachine3_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine3_source_payload_addr[18:8] != basesoc_sdram_bankmachine3_source_source_payload_addr[18:8])) begin
            basesoc_sdram_bankmachine3_auto_precharge <= (basesoc_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine3_syncfifo3_din = {basesoc_sdram_bankmachine3_fifo_in_last, basesoc_sdram_bankmachine3_fifo_in_first, basesoc_sdram_bankmachine3_fifo_in_payload_addr, basesoc_sdram_bankmachine3_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine3_fifo_out_last, basesoc_sdram_bankmachine3_fifo_out_first, basesoc_sdram_bankmachine3_fifo_out_payload_addr, basesoc_sdram_bankmachine3_fifo_out_payload_we} = basesoc_sdram_bankmachine3_syncfifo3_dout;
assign basesoc_sdram_bankmachine3_sink_ready = basesoc_sdram_bankmachine3_syncfifo3_writable;
assign basesoc_sdram_bankmachine3_syncfifo3_we = basesoc_sdram_bankmachine3_sink_valid;
assign basesoc_sdram_bankmachine3_fifo_in_first = basesoc_sdram_bankmachine3_sink_first;
assign basesoc_sdram_bankmachine3_fifo_in_last = basesoc_sdram_bankmachine3_sink_last;
assign basesoc_sdram_bankmachine3_fifo_in_payload_we = basesoc_sdram_bankmachine3_sink_payload_we;
assign basesoc_sdram_bankmachine3_fifo_in_payload_addr = basesoc_sdram_bankmachine3_sink_payload_addr;
assign basesoc_sdram_bankmachine3_source_valid = basesoc_sdram_bankmachine3_syncfifo3_readable;
assign basesoc_sdram_bankmachine3_source_first = basesoc_sdram_bankmachine3_fifo_out_first;
assign basesoc_sdram_bankmachine3_source_last = basesoc_sdram_bankmachine3_fifo_out_last;
assign basesoc_sdram_bankmachine3_source_payload_we = basesoc_sdram_bankmachine3_fifo_out_payload_we;
assign basesoc_sdram_bankmachine3_source_payload_addr = basesoc_sdram_bankmachine3_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine3_syncfifo3_re = basesoc_sdram_bankmachine3_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine3_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine3_replace) begin
        basesoc_sdram_bankmachine3_wrport_adr <= (basesoc_sdram_bankmachine3_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine3_wrport_adr <= basesoc_sdram_bankmachine3_produce;
    end
end
assign basesoc_sdram_bankmachine3_wrport_dat_w = basesoc_sdram_bankmachine3_syncfifo3_din;
assign basesoc_sdram_bankmachine3_wrport_we = (basesoc_sdram_bankmachine3_syncfifo3_we & (basesoc_sdram_bankmachine3_syncfifo3_writable | basesoc_sdram_bankmachine3_replace));
assign basesoc_sdram_bankmachine3_do_read = (basesoc_sdram_bankmachine3_syncfifo3_readable & basesoc_sdram_bankmachine3_syncfifo3_re);
assign basesoc_sdram_bankmachine3_rdport_adr = basesoc_sdram_bankmachine3_consume;
assign basesoc_sdram_bankmachine3_syncfifo3_dout = basesoc_sdram_bankmachine3_rdport_dat_r;
assign basesoc_sdram_bankmachine3_syncfifo3_writable = (basesoc_sdram_bankmachine3_level != 4'd8);
assign basesoc_sdram_bankmachine3_syncfifo3_readable = (basesoc_sdram_bankmachine3_level != 1'd0);
assign basesoc_sdram_bankmachine3_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine3_pipe_valid_source_valid) | basesoc_sdram_bankmachine3_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine3_pipe_valid_sink_valid = basesoc_sdram_bankmachine3_sink_sink_valid;
assign basesoc_sdram_bankmachine3_sink_sink_ready = basesoc_sdram_bankmachine3_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_first = basesoc_sdram_bankmachine3_sink_sink_first;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_last = basesoc_sdram_bankmachine3_sink_sink_last;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine3_sink_sink_payload_we;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine3_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine3_source_source_valid = basesoc_sdram_bankmachine3_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine3_pipe_valid_source_ready = basesoc_sdram_bankmachine3_source_source_ready;
assign basesoc_sdram_bankmachine3_source_source_first = basesoc_sdram_bankmachine3_pipe_valid_source_first;
assign basesoc_sdram_bankmachine3_source_source_last = basesoc_sdram_bankmachine3_pipe_valid_source_last;
assign basesoc_sdram_bankmachine3_source_source_payload_we = basesoc_sdram_bankmachine3_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine3_source_source_payload_addr = basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    basesoc_litedramcore_bankmachine3_next_state <= 3'd0;
    basesoc_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine3_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine3_row_close <= 1'd0;
    basesoc_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine3_row_open <= 1'd0;
    basesoc_litedramcore_bankmachine3_next_state <= basesoc_litedramcore_bankmachine3_state;
    case (basesoc_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine3_twtpcon_ready & basesoc_sdram_bankmachine3_trascon_ready)) begin
                basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine3_cmd_ready) begin
                    basesoc_litedramcore_bankmachine3_next_state <= 2'd3;
                end
                basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine3_twtpcon_ready & basesoc_sdram_bankmachine3_trascon_ready)) begin
                basesoc_litedramcore_bankmachine3_next_state <= 2'd3;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine3_trccon_ready) begin
                basesoc_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine3_row_open <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine3_cmd_ready) begin
                    basesoc_litedramcore_bankmachine3_next_state <= 1'd0;
                end
                basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine3_twtpcon_ready) begin
                basesoc_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
            basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine3_refresh_req)) begin
                basesoc_litedramcore_bankmachine3_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_sdram_bankmachine3_refresh_req) begin
                basesoc_litedramcore_bankmachine3_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine3_source_source_valid) begin
                    if (basesoc_sdram_bankmachine3_row_opened) begin
                        if (basesoc_sdram_bankmachine3_row_hit) begin
                            basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine3_source_source_payload_we) begin
                                basesoc_sdram_bankmachine3_req_wdata_ready <= basesoc_sdram_bankmachine3_cmd_ready;
                                basesoc_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine3_req_rdata_valid <= basesoc_sdram_bankmachine3_cmd_ready;
                                basesoc_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine3_cmd_ready & basesoc_sdram_bankmachine3_auto_precharge)) begin
                                basesoc_litedramcore_bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            basesoc_litedramcore_bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        basesoc_litedramcore_bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_choose_req_want_cmds = 1'd1;
assign basesoc_sdram_trrdcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & ((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we)));
assign basesoc_sdram_tfawcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & ((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we)));
assign basesoc_sdram_ras_allowed = (basesoc_sdram_trrdcon_ready & basesoc_sdram_tfawcon_ready);
assign basesoc_sdram_tccdcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_cmd_payload_is_write | basesoc_sdram_choose_req_cmd_payload_is_read));
assign basesoc_sdram_cas_allowed = basesoc_sdram_tccdcon_ready;
assign basesoc_sdram_twtrcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
assign basesoc_sdram_read_available = ((((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_payload_is_read) | (basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_payload_is_read)) | (basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_payload_is_read)) | (basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_payload_is_read));
assign basesoc_sdram_write_available = ((((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_payload_is_write) | (basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_payload_is_write)) | (basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_payload_is_write)) | (basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_payload_is_write));
assign basesoc_sdram_max_time0 = (basesoc_sdram_time0 == 1'd0);
assign basesoc_sdram_max_time1 = (basesoc_sdram_time1 == 1'd0);
assign basesoc_sdram_bankmachine0_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine1_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine2_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine3_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_go_to_refresh = (((basesoc_sdram_bankmachine0_refresh_gnt & basesoc_sdram_bankmachine1_refresh_gnt) & basesoc_sdram_bankmachine2_refresh_gnt) & basesoc_sdram_bankmachine3_refresh_gnt);
assign basesoc_sdram_interface_rdata = {basesoc_sdram_dfi_p0_rddata};
assign {basesoc_sdram_dfi_p0_wrdata} = basesoc_sdram_interface_wdata;
assign {basesoc_sdram_dfi_p0_wrdata_mask} = (~basesoc_sdram_interface_wdata_we);
always @(*) begin
    basesoc_sdram_choose_cmd_valids <= 4'd0;
    basesoc_sdram_choose_cmd_valids[0] <= (basesoc_sdram_bankmachine0_cmd_valid & (((basesoc_sdram_bankmachine0_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine0_cmd_payload_ras & (~basesoc_sdram_bankmachine0_cmd_payload_cas)) & (~basesoc_sdram_bankmachine0_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine0_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine0_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[1] <= (basesoc_sdram_bankmachine1_cmd_valid & (((basesoc_sdram_bankmachine1_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine1_cmd_payload_ras & (~basesoc_sdram_bankmachine1_cmd_payload_cas)) & (~basesoc_sdram_bankmachine1_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine1_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine1_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[2] <= (basesoc_sdram_bankmachine2_cmd_valid & (((basesoc_sdram_bankmachine2_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine2_cmd_payload_ras & (~basesoc_sdram_bankmachine2_cmd_payload_cas)) & (~basesoc_sdram_bankmachine2_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine2_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine2_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[3] <= (basesoc_sdram_bankmachine3_cmd_valid & (((basesoc_sdram_bankmachine3_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine3_cmd_payload_ras & (~basesoc_sdram_bankmachine3_cmd_payload_cas)) & (~basesoc_sdram_bankmachine3_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine3_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine3_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
end
assign basesoc_sdram_choose_cmd_request = basesoc_sdram_choose_cmd_valids;
assign basesoc_sdram_choose_cmd_cmd_valid = comb_rhs_self8;
assign basesoc_sdram_choose_cmd_cmd_payload_a = comb_rhs_self9;
assign basesoc_sdram_choose_cmd_cmd_payload_ba = comb_rhs_self10;
assign basesoc_sdram_choose_cmd_cmd_payload_is_read = comb_rhs_self11;
assign basesoc_sdram_choose_cmd_cmd_payload_is_write = comb_rhs_self12;
assign basesoc_sdram_choose_cmd_cmd_payload_is_cmd = comb_rhs_self13;
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_cas <= comb_t_self0;
    end
end
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_ras <= comb_t_self1;
    end
end
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_we <= comb_t_self2;
    end
end
assign basesoc_sdram_choose_cmd_ce = (basesoc_sdram_choose_cmd_cmd_ready | (~basesoc_sdram_choose_cmd_cmd_valid));
always @(*) begin
    basesoc_sdram_choose_req_valids <= 4'd0;
    basesoc_sdram_choose_req_valids[0] <= (basesoc_sdram_bankmachine0_cmd_valid & (((basesoc_sdram_bankmachine0_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine0_cmd_payload_ras & (~basesoc_sdram_bankmachine0_cmd_payload_cas)) & (~basesoc_sdram_bankmachine0_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine0_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine0_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[1] <= (basesoc_sdram_bankmachine1_cmd_valid & (((basesoc_sdram_bankmachine1_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine1_cmd_payload_ras & (~basesoc_sdram_bankmachine1_cmd_payload_cas)) & (~basesoc_sdram_bankmachine1_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine1_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine1_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[2] <= (basesoc_sdram_bankmachine2_cmd_valid & (((basesoc_sdram_bankmachine2_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine2_cmd_payload_ras & (~basesoc_sdram_bankmachine2_cmd_payload_cas)) & (~basesoc_sdram_bankmachine2_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine2_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine2_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[3] <= (basesoc_sdram_bankmachine3_cmd_valid & (((basesoc_sdram_bankmachine3_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine3_cmd_payload_ras & (~basesoc_sdram_bankmachine3_cmd_payload_cas)) & (~basesoc_sdram_bankmachine3_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine3_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine3_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
end
assign basesoc_sdram_choose_req_request = basesoc_sdram_choose_req_valids;
assign basesoc_sdram_choose_req_cmd_valid = comb_rhs_self14;
assign basesoc_sdram_choose_req_cmd_payload_a = comb_rhs_self15;
assign basesoc_sdram_choose_req_cmd_payload_ba = comb_rhs_self16;
assign basesoc_sdram_choose_req_cmd_payload_is_read = comb_rhs_self17;
assign basesoc_sdram_choose_req_cmd_payload_is_write = comb_rhs_self18;
assign basesoc_sdram_choose_req_cmd_payload_is_cmd = comb_rhs_self19;
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_cas <= comb_t_self3;
    end
end
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_ras <= comb_t_self4;
    end
end
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_we <= comb_t_self5;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 1'd0))) begin
        basesoc_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 1'd0))) begin
        basesoc_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 1'd1))) begin
        basesoc_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 1'd1))) begin
        basesoc_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 2'd2))) begin
        basesoc_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 2'd2))) begin
        basesoc_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 2'd3))) begin
        basesoc_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 2'd3))) begin
        basesoc_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
assign basesoc_sdram_choose_req_ce = (basesoc_sdram_choose_req_cmd_ready | (~basesoc_sdram_choose_req_cmd_valid));
assign basesoc_sdram_dfi_p0_reset_n = 1'd1;
assign basesoc_sdram_dfi_p0_cke = {1{basesoc_sdram_steerer0}};
assign basesoc_sdram_dfi_p0_odt = {1{basesoc_sdram_steerer1}};
always @(*) begin
    basesoc_litedramcore_multiplexer_next_state <= 3'd0;
    basesoc_sdram_choose_req_cmd_ready <= 1'd0;
    basesoc_sdram_choose_req_want_activates <= 1'd0;
    basesoc_sdram_choose_req_want_reads <= 1'd0;
    basesoc_sdram_choose_req_want_writes <= 1'd0;
    basesoc_sdram_cmd_ready <= 1'd0;
    basesoc_sdram_en0 <= 1'd0;
    basesoc_sdram_en1 <= 1'd0;
    basesoc_sdram_steerer_sel <= 2'd0;
    basesoc_sdram_choose_req_want_activates <= basesoc_sdram_ras_allowed;
    basesoc_litedramcore_multiplexer_next_state <= basesoc_litedramcore_multiplexer_state;
    case (basesoc_litedramcore_multiplexer_state)
        1'd1: begin
            basesoc_sdram_en1 <= 1'd1;
            basesoc_sdram_choose_req_want_writes <= 1'd1;
            if (1'd1) begin
                basesoc_sdram_choose_req_cmd_ready <= (basesoc_sdram_cas_allowed & ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed));
            end else begin
                basesoc_sdram_choose_req_want_activates <= basesoc_sdram_ras_allowed;
                basesoc_sdram_choose_req_cmd_ready <= ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed);
                basesoc_sdram_choose_req_cmd_ready <= basesoc_sdram_cas_allowed;
            end
            basesoc_sdram_steerer_sel <= 1'd0;
            if (1'd1) begin
                basesoc_sdram_steerer_sel <= 2'd2;
            end
            if (1'd1) begin
                basesoc_sdram_steerer_sel <= 1'd1;
            end
            if (basesoc_sdram_read_available) begin
                if (((~basesoc_sdram_write_available) | basesoc_sdram_max_time1)) begin
                    basesoc_litedramcore_multiplexer_next_state <= 2'd3;
                end
            end
            if (basesoc_sdram_go_to_refresh) begin
                basesoc_litedramcore_multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_sdram_steerer_sel <= 2'd3;
            basesoc_sdram_cmd_ready <= 1'd1;
            if (basesoc_sdram_cmd_last) begin
                basesoc_litedramcore_multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (basesoc_sdram_twtrcon_ready) begin
                basesoc_litedramcore_multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            basesoc_litedramcore_multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            basesoc_litedramcore_multiplexer_next_state <= 1'd1;
        end
        default: begin
            basesoc_sdram_en0 <= 1'd1;
            basesoc_sdram_choose_req_want_reads <= 1'd1;
            if (1'd1) begin
                basesoc_sdram_choose_req_cmd_ready <= (basesoc_sdram_cas_allowed & ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed));
            end else begin
                basesoc_sdram_choose_req_want_activates <= basesoc_sdram_ras_allowed;
                basesoc_sdram_choose_req_cmd_ready <= ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed);
                basesoc_sdram_choose_req_cmd_ready <= basesoc_sdram_cas_allowed;
            end
            basesoc_sdram_steerer_sel <= 1'd0;
            if (1'd1) begin
                basesoc_sdram_steerer_sel <= 2'd2;
            end
            if (1'd1) begin
                basesoc_sdram_steerer_sel <= 1'd1;
            end
            if (basesoc_sdram_write_available) begin
                if (((~basesoc_sdram_read_available) | basesoc_sdram_max_time0)) begin
                    basesoc_litedramcore_multiplexer_next_state <= 3'd4;
                end
            end
            if (basesoc_sdram_go_to_refresh) begin
                basesoc_litedramcore_multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
assign basesoc_litedramcore_roundrobin0_request = {(((basesoc_port_cmd_payload_addr[9:8] == 1'd0) & (~(((basesoc_litedramcore_locked0 | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid)};
assign basesoc_litedramcore_roundrobin0_ce = ((~basesoc_sdram_interface_bank0_valid) & (~basesoc_sdram_interface_bank0_lock));
assign basesoc_sdram_interface_bank0_addr = comb_rhs_self20;
assign basesoc_sdram_interface_bank0_we = comb_rhs_self21;
assign basesoc_sdram_interface_bank0_valid = comb_rhs_self22;
assign basesoc_litedramcore_roundrobin1_request = {(((basesoc_port_cmd_payload_addr[9:8] == 1'd1) & (~(((basesoc_litedramcore_locked1 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid)};
assign basesoc_litedramcore_roundrobin1_ce = ((~basesoc_sdram_interface_bank1_valid) & (~basesoc_sdram_interface_bank1_lock));
assign basesoc_sdram_interface_bank1_addr = comb_rhs_self23;
assign basesoc_sdram_interface_bank1_we = comb_rhs_self24;
assign basesoc_sdram_interface_bank1_valid = comb_rhs_self25;
assign basesoc_litedramcore_roundrobin2_request = {(((basesoc_port_cmd_payload_addr[9:8] == 2'd2) & (~(((basesoc_litedramcore_locked2 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid)};
assign basesoc_litedramcore_roundrobin2_ce = ((~basesoc_sdram_interface_bank2_valid) & (~basesoc_sdram_interface_bank2_lock));
assign basesoc_sdram_interface_bank2_addr = comb_rhs_self26;
assign basesoc_sdram_interface_bank2_we = comb_rhs_self27;
assign basesoc_sdram_interface_bank2_valid = comb_rhs_self28;
assign basesoc_litedramcore_roundrobin3_request = {(((basesoc_port_cmd_payload_addr[9:8] == 2'd3) & (~(((basesoc_litedramcore_locked3 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0))))) & basesoc_port_cmd_valid)};
assign basesoc_litedramcore_roundrobin3_ce = ((~basesoc_sdram_interface_bank3_valid) & (~basesoc_sdram_interface_bank3_lock));
assign basesoc_sdram_interface_bank3_addr = comb_rhs_self29;
assign basesoc_sdram_interface_bank3_we = comb_rhs_self30;
assign basesoc_sdram_interface_bank3_valid = comb_rhs_self31;
assign basesoc_port_cmd_ready = ((((1'd0 | (((basesoc_litedramcore_roundrobin0_grant == 1'd0) & ((basesoc_port_cmd_payload_addr[9:8] == 1'd0) & (~(((basesoc_litedramcore_locked0 | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank0_ready)) | (((basesoc_litedramcore_roundrobin1_grant == 1'd0) & ((basesoc_port_cmd_payload_addr[9:8] == 1'd1) & (~(((basesoc_litedramcore_locked1 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank1_ready)) | (((basesoc_litedramcore_roundrobin2_grant == 1'd0) & ((basesoc_port_cmd_payload_addr[9:8] == 2'd2) & (~(((basesoc_litedramcore_locked2 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank2_ready)) | (((basesoc_litedramcore_roundrobin3_grant == 1'd0) & ((basesoc_port_cmd_payload_addr[9:8] == 2'd3) & (~(((basesoc_litedramcore_locked3 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0)))))) & basesoc_sdram_interface_bank3_ready));
assign basesoc_port_wdata_ready = basesoc_litedramcore_new_master_wdata_ready;
assign basesoc_port_rdata_valid = basesoc_litedramcore_new_master_rdata_valid3;
always @(*) begin
    basesoc_sdram_interface_wdata <= 32'd0;
    basesoc_sdram_interface_wdata_we <= 4'd0;
    case ({basesoc_litedramcore_new_master_wdata_ready})
        1'd1: begin
            basesoc_sdram_interface_wdata <= basesoc_port_wdata_payload_data;
            basesoc_sdram_interface_wdata_we <= basesoc_port_wdata_payload_we;
        end
        default: begin
            basesoc_sdram_interface_wdata <= 1'd0;
            basesoc_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign basesoc_port_rdata_payload_data = basesoc_sdram_interface_rdata;
assign basesoc_litedramcore_roundrobin0_grant = 1'd0;
assign basesoc_litedramcore_roundrobin1_grant = 1'd0;
assign basesoc_litedramcore_roundrobin2_grant = 1'd0;
assign basesoc_litedramcore_roundrobin3_grant = 1'd0;
assign basesoc_data_port_adr = basesoc_wb_sdram_adr[10:2];
always @(*) begin
    basesoc_data_port_dat_w <= 128'd0;
    basesoc_data_port_we <= 16'd0;
    if (basesoc_write_from_slave) begin
        basesoc_data_port_dat_w <= basesoc_interface_dat_r;
        basesoc_data_port_we <= {16{1'd1}};
    end else begin
        basesoc_data_port_dat_w <= {4{basesoc_wb_sdram_dat_w}};
        if ((((basesoc_wb_sdram_cyc & basesoc_wb_sdram_stb) & basesoc_wb_sdram_we) & basesoc_wb_sdram_ack)) begin
            basesoc_data_port_we <= {({4{(basesoc_wb_sdram_adr[1:0] == 2'd3)}} & basesoc_wb_sdram_sel), ({4{(basesoc_wb_sdram_adr[1:0] == 2'd2)}} & basesoc_wb_sdram_sel), ({4{(basesoc_wb_sdram_adr[1:0] == 1'd1)}} & basesoc_wb_sdram_sel), ({4{(basesoc_wb_sdram_adr[1:0] == 1'd0)}} & basesoc_wb_sdram_sel)};
        end
    end
end
assign basesoc_interface_dat_w = basesoc_data_port_dat_r;
assign basesoc_interface_sel = 16'd65535;
always @(*) begin
    basesoc_wb_sdram_dat_r <= 32'd0;
    case (basesoc_adr_offset_r)
        1'd0: begin
            basesoc_wb_sdram_dat_r <= basesoc_data_port_dat_r[31:0];
        end
        1'd1: begin
            basesoc_wb_sdram_dat_r <= basesoc_data_port_dat_r[63:32];
        end
        2'd2: begin
            basesoc_wb_sdram_dat_r <= basesoc_data_port_dat_r[95:64];
        end
        default: begin
            basesoc_wb_sdram_dat_r <= basesoc_data_port_dat_r[127:96];
        end
    endcase
end
assign {basesoc_tag_do_dirty, basesoc_tag_do_tag} = basesoc_tag_port_dat_r;
assign basesoc_tag_port_dat_w = {basesoc_tag_di_dirty, basesoc_tag_di_tag};
assign basesoc_tag_port_adr = basesoc_wb_sdram_adr[10:2];
assign basesoc_tag_di_tag = basesoc_wb_sdram_adr[29:11];
assign basesoc_interface_adr = {basesoc_tag_do_tag, basesoc_wb_sdram_adr[10:2]};
always @(*) begin
    basesoc_fullmemorywe_next_state <= 2'd0;
    basesoc_interface_cyc <= 1'd0;
    basesoc_interface_stb <= 1'd0;
    basesoc_interface_we <= 1'd0;
    basesoc_tag_di_dirty <= 1'd0;
    basesoc_tag_port_we <= 1'd0;
    basesoc_wb_sdram_ack <= 1'd0;
    basesoc_word_clr <= 1'd0;
    basesoc_word_inc <= 1'd0;
    basesoc_write_from_slave <= 1'd0;
    basesoc_fullmemorywe_next_state <= basesoc_fullmemorywe_state;
    case (basesoc_fullmemorywe_state)
        1'd1: begin
            basesoc_word_clr <= 1'd1;
            if ((basesoc_tag_do_tag == basesoc_wb_sdram_adr[29:11])) begin
                basesoc_wb_sdram_ack <= 1'd1;
                if (basesoc_wb_sdram_we) begin
                    basesoc_tag_di_dirty <= 1'd1;
                    basesoc_tag_port_we <= 1'd1;
                end
                basesoc_fullmemorywe_next_state <= 1'd0;
            end else begin
                if (basesoc_tag_do_dirty) begin
                    basesoc_fullmemorywe_next_state <= 2'd2;
                end else begin
                    basesoc_tag_port_we <= 1'd1;
                    basesoc_word_clr <= 1'd1;
                    basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            basesoc_interface_stb <= 1'd1;
            basesoc_interface_cyc <= 1'd1;
            basesoc_interface_we <= 1'd1;
            if (basesoc_interface_ack) begin
                basesoc_word_inc <= 1'd1;
                if (1'd1) begin
                    basesoc_tag_port_we <= 1'd1;
                    basesoc_word_clr <= 1'd1;
                    basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            basesoc_interface_stb <= 1'd1;
            basesoc_interface_cyc <= 1'd1;
            basesoc_interface_we <= 1'd0;
            if (basesoc_interface_ack) begin
                basesoc_write_from_slave <= 1'd1;
                basesoc_word_inc <= 1'd1;
                if (1'd1) begin
                    basesoc_fullmemorywe_next_state <= 1'd1;
                end else begin
                    basesoc_fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        default: begin
            if ((basesoc_wb_sdram_cyc & basesoc_wb_sdram_stb)) begin
                basesoc_fullmemorywe_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_wishbone_bridge_cmd_payload_addr = (basesoc_interface_adr - 27'd67108864);
assign basesoc_wishbone_bridge_cmd_payload_we = basesoc_interface_we;
assign basesoc_wishbone_bridge_cmd_last = (~basesoc_interface_we);
assign basesoc_wishbone_bridge_flush = (~basesoc_interface_cyc);
always @(*) begin
    basesoc_wishbone_bridge_wdata_valid <= 1'd0;
    basesoc_wishbone_bridge_wdata_valid <= (basesoc_interface_stb & basesoc_interface_we);
    if (1'd0) begin
        if ((~basesoc_wishbone_bridge_is_ongoing)) begin
            basesoc_wishbone_bridge_wdata_valid <= 1'd0;
        end
    end
end
assign basesoc_wishbone_bridge_wdata_payload_data = basesoc_interface_dat_w;
assign basesoc_wishbone_bridge_wdata_payload_we = basesoc_interface_sel;
assign basesoc_wishbone_bridge_rdata_ready = 1'd1;
always @(*) begin
    basesoc_litedramnativeportconverter_next_state <= 1'd0;
    basesoc_port_cmd_payload_addr <= 21'd0;
    basesoc_port_cmd_payload_we <= 1'd0;
    basesoc_port_cmd_valid <= 1'd0;
    basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 <= 19'd0;
    basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 <= 1'd0;
    basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= 2'd0;
    basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd0;
    basesoc_wishbone_bridge_cmd_ready <= 1'd0;
    basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 <= 1'd0;
    basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 <= 1'd0;
    basesoc_litedramnativeportconverter_next_state <= basesoc_litedramnativeportconverter_state;
    case (basesoc_litedramnativeportconverter_state)
        1'd1: begin
            basesoc_port_cmd_valid <= 1'd1;
            basesoc_port_cmd_payload_we <= basesoc_wishbone_bridge_cmd_we;
            basesoc_port_cmd_payload_addr <= ((basesoc_wishbone_bridge_cmd_addr * 3'd4) + basesoc_wishbone_bridge_cmd_count);
            if (basesoc_port_cmd_ready) begin
                basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= (basesoc_wishbone_bridge_cmd_count + 1'd1);
                basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd1;
                if ((basesoc_wishbone_bridge_cmd_count == 2'd3)) begin
                    basesoc_litedramnativeportconverter_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_wishbone_bridge_cmd_ready <= 1'd1;
            if (basesoc_wishbone_bridge_cmd_valid) begin
                basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= 1'd0;
                basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd1;
                basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 <= basesoc_wishbone_bridge_cmd_payload_addr;
                basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 <= 1'd1;
                basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 <= basesoc_wishbone_bridge_cmd_payload_we;
                basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 <= 1'd1;
                basesoc_litedramnativeportconverter_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_wishbone_bridge_wdata_converter_converter_sink_valid = basesoc_wishbone_bridge_wdata_converter_sink_valid;
assign basesoc_wishbone_bridge_wdata_converter_converter_sink_first = basesoc_wishbone_bridge_wdata_converter_sink_first;
assign basesoc_wishbone_bridge_wdata_converter_converter_sink_last = basesoc_wishbone_bridge_wdata_converter_sink_last;
assign basesoc_wishbone_bridge_wdata_converter_sink_ready = basesoc_wishbone_bridge_wdata_converter_converter_sink_ready;
always @(*) begin
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data <= 144'd0;
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[31:0] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_data[31:0];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:32] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_we[3:0];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[67:36] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_data[63:32];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:68] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_we[7:4];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[103:72] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_data[95:64];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:104] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_we[11:8];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[139:108] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_data[127:96];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:140] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_we[15:12];
end
assign basesoc_wishbone_bridge_wdata_converter_source_valid = basesoc_wishbone_bridge_wdata_converter_source_source_valid;
assign basesoc_wishbone_bridge_wdata_converter_source_first = basesoc_wishbone_bridge_wdata_converter_source_source_first;
assign basesoc_wishbone_bridge_wdata_converter_source_last = basesoc_wishbone_bridge_wdata_converter_source_source_last;
assign basesoc_wishbone_bridge_wdata_converter_source_source_ready = basesoc_wishbone_bridge_wdata_converter_source_ready;
assign {basesoc_wishbone_bridge_wdata_converter_source_payload_we, basesoc_wishbone_bridge_wdata_converter_source_payload_data} = basesoc_wishbone_bridge_wdata_converter_source_source_payload_data;
assign basesoc_wishbone_bridge_wdata_converter_source_source_valid = basesoc_wishbone_bridge_wdata_converter_converter_source_valid;
assign basesoc_wishbone_bridge_wdata_converter_converter_source_ready = basesoc_wishbone_bridge_wdata_converter_source_source_ready;
assign basesoc_wishbone_bridge_wdata_converter_source_source_first = basesoc_wishbone_bridge_wdata_converter_converter_source_first;
assign basesoc_wishbone_bridge_wdata_converter_source_source_last = basesoc_wishbone_bridge_wdata_converter_converter_source_last;
assign basesoc_wishbone_bridge_wdata_converter_source_source_payload_data = basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data;
assign basesoc_wishbone_bridge_wdata_converter_converter_first = (basesoc_wishbone_bridge_wdata_converter_converter_mux == 1'd0);
assign basesoc_wishbone_bridge_wdata_converter_converter_last = (basesoc_wishbone_bridge_wdata_converter_converter_mux == 2'd3);
assign basesoc_wishbone_bridge_wdata_converter_converter_source_valid = basesoc_wishbone_bridge_wdata_converter_converter_sink_valid;
assign basesoc_wishbone_bridge_wdata_converter_converter_source_first = (basesoc_wishbone_bridge_wdata_converter_converter_sink_first & basesoc_wishbone_bridge_wdata_converter_converter_first);
assign basesoc_wishbone_bridge_wdata_converter_converter_source_last = (basesoc_wishbone_bridge_wdata_converter_converter_sink_last & basesoc_wishbone_bridge_wdata_converter_converter_last);
assign basesoc_wishbone_bridge_wdata_converter_converter_sink_ready = (basesoc_wishbone_bridge_wdata_converter_converter_last & basesoc_wishbone_bridge_wdata_converter_converter_source_ready);
always @(*) begin
    basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= 36'd0;
    case (basesoc_wishbone_bridge_wdata_converter_converter_mux)
        1'd0: begin
            basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:0];
        end
        1'd1: begin
            basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:36];
        end
        2'd2: begin
            basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:72];
        end
        default: begin
            basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:108];
        end
    endcase
end
assign basesoc_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count = basesoc_wishbone_bridge_wdata_converter_converter_last;
assign basesoc_wishbone_bridge_wdata_converter_sink_valid = basesoc_wishbone_bridge_wdata_valid;
assign basesoc_wishbone_bridge_wdata_ready = basesoc_wishbone_bridge_wdata_converter_sink_ready;
assign basesoc_wishbone_bridge_wdata_converter_sink_first = basesoc_wishbone_bridge_wdata_first;
assign basesoc_wishbone_bridge_wdata_converter_sink_last = basesoc_wishbone_bridge_wdata_last;
assign basesoc_wishbone_bridge_wdata_converter_sink_payload_data = basesoc_wishbone_bridge_wdata_payload_data;
assign basesoc_wishbone_bridge_wdata_converter_sink_payload_we = basesoc_wishbone_bridge_wdata_payload_we;
assign basesoc_port_wdata_valid = basesoc_wishbone_bridge_wdata_converter_source_valid;
assign basesoc_wishbone_bridge_wdata_converter_source_ready = basesoc_port_wdata_ready;
assign basesoc_port_wdata_first = basesoc_wishbone_bridge_wdata_converter_source_first;
assign basesoc_port_wdata_last = basesoc_wishbone_bridge_wdata_converter_source_last;
assign basesoc_port_wdata_payload_data = basesoc_wishbone_bridge_wdata_converter_source_payload_data;
assign basesoc_port_wdata_payload_we = basesoc_wishbone_bridge_wdata_converter_source_payload_we;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_valid = basesoc_wishbone_bridge_rdata_converter_sink_valid;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_first = basesoc_wishbone_bridge_rdata_converter_sink_first;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_last = basesoc_wishbone_bridge_rdata_converter_sink_last;
assign basesoc_wishbone_bridge_rdata_converter_sink_ready = basesoc_wishbone_bridge_rdata_converter_converter_sink_ready;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data = {basesoc_wishbone_bridge_rdata_converter_sink_payload_data};
assign basesoc_wishbone_bridge_rdata_converter_source_valid = basesoc_wishbone_bridge_rdata_converter_source_source_valid;
assign basesoc_wishbone_bridge_rdata_converter_source_first = basesoc_wishbone_bridge_rdata_converter_source_source_first;
assign basesoc_wishbone_bridge_rdata_converter_source_last = basesoc_wishbone_bridge_rdata_converter_source_source_last;
assign basesoc_wishbone_bridge_rdata_converter_source_source_ready = basesoc_wishbone_bridge_rdata_converter_source_ready;
always @(*) begin
    basesoc_wishbone_bridge_rdata_converter_source_payload_data <= 128'd0;
    basesoc_wishbone_bridge_rdata_converter_source_payload_data[31:0] <= basesoc_wishbone_bridge_rdata_converter_source_source_payload_data[31:0];
    basesoc_wishbone_bridge_rdata_converter_source_payload_data[63:32] <= basesoc_wishbone_bridge_rdata_converter_source_source_payload_data[63:32];
    basesoc_wishbone_bridge_rdata_converter_source_payload_data[95:64] <= basesoc_wishbone_bridge_rdata_converter_source_source_payload_data[95:64];
    basesoc_wishbone_bridge_rdata_converter_source_payload_data[127:96] <= basesoc_wishbone_bridge_rdata_converter_source_source_payload_data[127:96];
end
assign basesoc_wishbone_bridge_rdata_converter_source_source_valid = basesoc_wishbone_bridge_rdata_converter_converter_source_valid;
assign basesoc_wishbone_bridge_rdata_converter_converter_source_ready = basesoc_wishbone_bridge_rdata_converter_source_source_ready;
assign basesoc_wishbone_bridge_rdata_converter_source_source_first = basesoc_wishbone_bridge_rdata_converter_converter_source_first;
assign basesoc_wishbone_bridge_rdata_converter_source_source_last = basesoc_wishbone_bridge_rdata_converter_converter_source_last;
assign basesoc_wishbone_bridge_rdata_converter_source_source_payload_data = basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_ready = ((~basesoc_wishbone_bridge_rdata_converter_converter_strobe_all) | basesoc_wishbone_bridge_rdata_converter_converter_source_ready);
assign basesoc_wishbone_bridge_rdata_converter_converter_source_valid = basesoc_wishbone_bridge_rdata_converter_converter_strobe_all;
assign basesoc_wishbone_bridge_rdata_converter_converter_load_part = (basesoc_wishbone_bridge_rdata_converter_converter_sink_valid & basesoc_wishbone_bridge_rdata_converter_converter_sink_ready);
assign basesoc_wishbone_bridge_rdata_converter_sink_valid = basesoc_port_rdata_valid;
assign basesoc_port_rdata_ready = basesoc_wishbone_bridge_rdata_converter_sink_ready;
assign basesoc_wishbone_bridge_rdata_converter_sink_first = basesoc_port_rdata_first;
assign basesoc_wishbone_bridge_rdata_converter_sink_last = basesoc_port_rdata_last;
assign basesoc_wishbone_bridge_rdata_converter_sink_payload_data = basesoc_port_rdata_payload_data;
assign basesoc_wishbone_bridge_rdata_valid = basesoc_wishbone_bridge_rdata_converter_source_valid;
assign basesoc_wishbone_bridge_rdata_converter_source_ready = basesoc_wishbone_bridge_rdata_ready;
assign basesoc_wishbone_bridge_rdata_first = basesoc_wishbone_bridge_rdata_converter_source_first;
assign basesoc_wishbone_bridge_rdata_last = basesoc_wishbone_bridge_rdata_converter_source_last;
assign basesoc_wishbone_bridge_rdata_payload_data = basesoc_wishbone_bridge_rdata_converter_source_payload_data;
always @(*) begin
    basesoc_fsm_next_state <= 2'd0;
    basesoc_interface_ack <= 1'd0;
    basesoc_interface_dat_r <= 128'd0;
    basesoc_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
    basesoc_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd0;
    basesoc_wishbone_bridge_cmd_valid <= 1'd0;
    basesoc_wishbone_bridge_is_ongoing <= 1'd0;
    basesoc_fsm_next_state <= basesoc_fsm_state;
    case (basesoc_fsm_state)
        1'd1: begin
            basesoc_wishbone_bridge_is_ongoing <= 1'd1;
            basesoc_wishbone_bridge_aborted_fsm_next_value <= ((~basesoc_interface_cyc) | basesoc_wishbone_bridge_aborted);
            basesoc_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
            if ((basesoc_wishbone_bridge_wdata_valid & basesoc_wishbone_bridge_wdata_ready)) begin
                basesoc_interface_ack <= (basesoc_interface_cyc & (~basesoc_wishbone_bridge_aborted));
                basesoc_fsm_next_state <= 1'd0;
            end
        end
        2'd2: begin
            basesoc_wishbone_bridge_aborted_fsm_next_value <= ((~basesoc_interface_cyc) | basesoc_wishbone_bridge_aborted);
            basesoc_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
            if (basesoc_wishbone_bridge_rdata_valid) begin
                basesoc_interface_ack <= (basesoc_interface_cyc & (~basesoc_wishbone_bridge_aborted));
                basesoc_interface_dat_r <= basesoc_wishbone_bridge_rdata_payload_data;
                basesoc_fsm_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_wishbone_bridge_cmd_valid <= (basesoc_interface_cyc & basesoc_interface_stb);
            if (((basesoc_wishbone_bridge_cmd_valid & basesoc_wishbone_bridge_cmd_ready) & basesoc_interface_we)) begin
                basesoc_fsm_next_state <= 1'd1;
            end
            if (((basesoc_wishbone_bridge_cmd_valid & basesoc_wishbone_bridge_cmd_ready) & (~basesoc_interface_we))) begin
                basesoc_fsm_next_state <= 2'd2;
            end
            basesoc_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
            basesoc_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
        end
    endcase
end
always @(*) begin
    basesoc_interface0_ack <= 1'd0;
    basesoc_interface0_dat_r <= 32'd0;
    basesoc_interface1_adr_wishbone2csr_next_value1 <= 14'd0;
    basesoc_interface1_adr_wishbone2csr_next_value_ce1 <= 1'd0;
    basesoc_interface1_dat_w_wishbone2csr_next_value0 <= 32'd0;
    basesoc_interface1_dat_w_wishbone2csr_next_value_ce0 <= 1'd0;
    basesoc_interface1_re_wishbone2csr_next_value2 <= 1'd0;
    basesoc_interface1_re_wishbone2csr_next_value_ce2 <= 1'd0;
    basesoc_interface1_we_wishbone2csr_next_value3 <= 1'd0;
    basesoc_interface1_we_wishbone2csr_next_value_ce3 <= 1'd0;
    basesoc_wishbone2csr_next_state <= 2'd0;
    basesoc_wishbone2csr_next_state <= basesoc_wishbone2csr_state;
    case (basesoc_wishbone2csr_state)
        1'd1: begin
            basesoc_interface1_adr_wishbone2csr_next_value1 <= 1'd0;
            basesoc_interface1_adr_wishbone2csr_next_value_ce1 <= 1'd1;
            basesoc_interface1_re_wishbone2csr_next_value2 <= 1'd0;
            basesoc_interface1_re_wishbone2csr_next_value_ce2 <= 1'd1;
            basesoc_interface1_we_wishbone2csr_next_value3 <= 1'd0;
            basesoc_interface1_we_wishbone2csr_next_value_ce3 <= 1'd1;
            basesoc_wishbone2csr_next_state <= 2'd2;
        end
        2'd2: begin
            basesoc_interface0_ack <= 1'd1;
            basesoc_interface0_dat_r <= basesoc_interface1_dat_r;
            basesoc_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            basesoc_interface1_dat_w_wishbone2csr_next_value0 <= basesoc_interface0_dat_w;
            basesoc_interface1_dat_w_wishbone2csr_next_value_ce0 <= 1'd1;
            if ((basesoc_interface0_cyc & basesoc_interface0_stb)) begin
                basesoc_interface1_adr_wishbone2csr_next_value1 <= basesoc_interface0_adr;
                basesoc_interface1_adr_wishbone2csr_next_value_ce1 <= 1'd1;
                basesoc_interface1_re_wishbone2csr_next_value2 <= ((~basesoc_interface0_we) & (basesoc_interface0_sel != 1'd0));
                basesoc_interface1_re_wishbone2csr_next_value_ce2 <= 1'd1;
                basesoc_interface1_we_wishbone2csr_next_value3 <= (basesoc_interface0_we & (basesoc_interface0_sel != 1'd0));
                basesoc_interface1_we_wishbone2csr_next_value_ce3 <= 1'd1;
                basesoc_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_reset0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_scratch0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_bus_errors_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    basesoc_soc_rst <= 1'd0;
    if (basesoc_reset_re) begin
        basesoc_soc_rst <= basesoc_reset_storage[0];
    end
end
assign basesoc_cpu_rst = basesoc_reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = basesoc_reset_storage;
assign csr_bankarray_csrbank0_scratch0_w = basesoc_scratch_storage;
assign csr_bankarray_csrbank0_bus_errors_w = basesoc_bus_errors_status;
assign basesoc_bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank1_w0_r = csr_bankarray_interface1_bank_bus_dat_w[2:0];
always @(*) begin
    csr_bankarray_csrbank1_w0_re <= 1'd0;
    csr_bankarray_csrbank1_w0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_w0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_w0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_r_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_r_re <= 1'd0;
    csr_bankarray_csrbank1_r_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_r_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_r_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign scl = _w_storage[0];
assign oe = _w_storage[1];
assign sda0 = _w_storage[2];
assign csr_bankarray_csrbank1_w0_w = _w_storage;
assign _r_status = sda1;
assign csr_bankarray_csrbank1_r_w = _r_status;
assign _r_we = csr_bankarray_csrbank1_r_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 3'd4);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank2_out0_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_out0_re <= 1'd0;
    csr_bankarray_csrbank2_out0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_out0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_out0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_out0_w = leds_storage;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 1'd1);
assign csr_bankarray_csrbank3_out0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_out0_re <= 1'd0;
    csr_bankarray_csrbank3_out0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_out0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_out0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_out0_w = lora_reset_storage;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd6);
assign csr_bankarray_csrbank4_dfii_control0_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_dfii_control0_re <= 1'd0;
    csr_bankarray_csrbank4_dfii_control0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank4_dfii_control0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_dfii_control0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_dfii_pi0_command0_r = csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank4_dfii_pi0_command0_re <= 1'd0;
    csr_bankarray_csrbank4_dfii_pi0_command0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_dfii_pi0_command0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_dfii_pi0_command0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign basesoc_sdram_command_issue_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    basesoc_sdram_command_issue_re <= 1'd0;
    basesoc_sdram_command_issue_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        basesoc_sdram_command_issue_re <= csr_bankarray_interface4_bank_bus_we;
        basesoc_sdram_command_issue_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_dfii_pi0_address0_r = csr_bankarray_interface4_bank_bus_dat_w[10:0];
always @(*) begin
    csr_bankarray_csrbank4_dfii_pi0_address0_re <= 1'd0;
    csr_bankarray_csrbank4_dfii_pi0_address0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_dfii_pi0_address0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_dfii_pi0_address0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_dfii_pi0_baddress0_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank4_dfii_pi0_baddress0_re <= 1'd0;
    csr_bankarray_csrbank4_dfii_pi0_baddress0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank4_dfii_pi0_baddress0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_dfii_pi0_baddress0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_dfii_pi0_wrdata0_r = csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank4_dfii_pi0_wrdata0_re <= 1'd0;
    csr_bankarray_csrbank4_dfii_pi0_wrdata0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_dfii_pi0_wrdata0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_dfii_pi0_wrdata0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_dfii_pi0_rddata_r = csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank4_dfii_pi0_rddata_re <= 1'd0;
    csr_bankarray_csrbank4_dfii_pi0_rddata_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank4_dfii_pi0_rddata_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_dfii_pi0_rddata_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign basesoc_sdram_sel = basesoc_sdram_storage[0];
assign basesoc_sdram_cke = basesoc_sdram_storage[1];
assign basesoc_sdram_odt = basesoc_sdram_storage[2];
assign basesoc_sdram_reset_n = basesoc_sdram_storage[3];
assign csr_bankarray_csrbank4_dfii_control0_w = basesoc_sdram_storage;
assign basesoc_sdram_csrfield_cs = basesoc_sdram_command_storage[0];
assign basesoc_sdram_csrfield_we = basesoc_sdram_command_storage[1];
assign basesoc_sdram_csrfield_cas = basesoc_sdram_command_storage[2];
assign basesoc_sdram_csrfield_ras = basesoc_sdram_command_storage[3];
assign basesoc_sdram_csrfield_wren = basesoc_sdram_command_storage[4];
assign basesoc_sdram_csrfield_rden = basesoc_sdram_command_storage[5];
assign basesoc_sdram_csrfield_cs_top = basesoc_sdram_command_storage[6];
assign basesoc_sdram_csrfield_cs_bottom = basesoc_sdram_command_storage[7];
assign csr_bankarray_csrbank4_dfii_pi0_command0_w = basesoc_sdram_command_storage;
assign csr_bankarray_csrbank4_dfii_pi0_address0_w = basesoc_sdram_address_storage;
assign csr_bankarray_csrbank4_dfii_pi0_baddress0_w = basesoc_sdram_baddress_storage;
assign csr_bankarray_csrbank4_dfii_pi0_wrdata0_w = basesoc_sdram_wrdata_storage;
assign csr_bankarray_csrbank4_dfii_pi0_rddata_w = basesoc_sdram_rddata_status;
assign basesoc_sdram_rddata_we = csr_bankarray_csrbank4_dfii_pi0_rddata_we;
assign csr_bankarray_csrbank5_sel = (csr_bankarray_interface5_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank5_control0_r = csr_bankarray_interface5_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank5_control0_re <= 1'd0;
    csr_bankarray_csrbank5_control0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank5_control0_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_control0_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_status_r = csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank5_status_re <= 1'd0;
    csr_bankarray_csrbank5_status_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank5_status_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_status_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_mosi0_r = csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank5_mosi0_re <= 1'd0;
    csr_bankarray_csrbank5_mosi0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank5_mosi0_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_mosi0_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_miso_r = csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank5_miso_re <= 1'd0;
    csr_bankarray_csrbank5_miso_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank5_miso_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_miso_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_cs0_r = csr_bankarray_interface5_bank_bus_dat_w[16:0];
always @(*) begin
    csr_bankarray_csrbank5_cs0_re <= 1'd0;
    csr_bankarray_csrbank5_cs0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank5_cs0_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_cs0_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_loopback0_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_loopback0_re <= 1'd0;
    csr_bankarray_csrbank5_loopback0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank5_loopback0_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_loopback0_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
always @(*) begin
    spi_start1 <= 1'd0;
    if (spi_control_re) begin
        spi_start1 <= spi_control_storage[0];
    end
end
assign spi_length1 = spi_control_storage[15:8];
assign csr_bankarray_csrbank5_control0_w = spi_control_storage;
always @(*) begin
    spi_status_status <= 2'd0;
    spi_status_status[0] <= spi_done1;
    spi_status_status[1] <= spi_mode0;
end
assign csr_bankarray_csrbank5_status_w = spi_status_status;
assign spi_status_we = csr_bankarray_csrbank5_status_we;
assign csr_bankarray_csrbank5_mosi0_w = spi_mosi_storage;
assign csr_bankarray_csrbank5_miso_w = spi_miso_status;
assign spi_miso_we = csr_bankarray_csrbank5_miso_we;
assign spi_sel = spi_cs_storage[0];
assign spi_mode1 = spi_cs_storage[16];
assign csr_bankarray_csrbank5_cs0_w = spi_cs_storage;
assign spi_mode2 = spi_loopback_storage;
assign csr_bankarray_csrbank5_loopback0_w = spi_loopback_storage;
assign csr_bankarray_csrbank6_sel = (csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd7);
assign csr_bankarray_csrbank6_phy_clk_divisor0_r = csr_bankarray_interface6_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank6_phy_clk_divisor0_re <= 1'd0;
    csr_bankarray_csrbank6_phy_clk_divisor0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank6_phy_clk_divisor0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_phy_clk_divisor0_we <= csr_bankarray_interface6_bank_bus_re;
    end
end
assign csr_bankarray_csrbank6_mmap_dummy_bits0_r = csr_bankarray_interface6_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank6_mmap_dummy_bits0_re <= 1'd0;
    csr_bankarray_csrbank6_mmap_dummy_bits0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank6_mmap_dummy_bits0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_mmap_dummy_bits0_we <= csr_bankarray_interface6_bank_bus_re;
    end
end
assign csr_bankarray_csrbank6_master_cs0_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_master_cs0_re <= 1'd0;
    csr_bankarray_csrbank6_master_cs0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank6_master_cs0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_master_cs0_we <= csr_bankarray_interface6_bank_bus_re;
    end
end
assign csr_bankarray_csrbank6_master_phyconfig0_r = csr_bankarray_interface6_bank_bus_dat_w[23:0];
always @(*) begin
    csr_bankarray_csrbank6_master_phyconfig0_re <= 1'd0;
    csr_bankarray_csrbank6_master_phyconfig0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank6_master_phyconfig0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_master_phyconfig0_we <= csr_bankarray_interface6_bank_bus_re;
    end
end
assign basesoc_master_rxtx_r = csr_bankarray_interface6_bank_bus_dat_w;
always @(*) begin
    basesoc_master_rxtx_re <= 1'd0;
    basesoc_master_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
        basesoc_master_rxtx_re <= csr_bankarray_interface6_bank_bus_we;
        basesoc_master_rxtx_we <= csr_bankarray_interface6_bank_bus_re;
    end
end
assign csr_bankarray_csrbank6_master_status_r = csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank6_master_status_re <= 1'd0;
    csr_bankarray_csrbank6_master_status_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank6_master_status_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_master_status_we <= csr_bankarray_interface6_bank_bus_re;
    end
end
assign csr_bankarray_csrbank6_phy_clk_divisor0_w = basesoc_spiflash_phy_storage;
assign csr_bankarray_csrbank6_mmap_dummy_bits0_w = basesoc_mmap_storage;
assign csr_bankarray_csrbank6_master_cs0_w = basesoc_master_cs_storage;
assign basesoc_master_len = basesoc_master_phyconfig_storage[7:0];
assign basesoc_master_width = basesoc_master_phyconfig_storage[11:8];
assign basesoc_master_mask = basesoc_master_phyconfig_storage[23:16];
assign csr_bankarray_csrbank6_master_phyconfig0_w = basesoc_master_phyconfig_storage;
always @(*) begin
    basesoc_master_status_status <= 2'd0;
    basesoc_master_status_status[0] <= basesoc_master_tx_ready;
    basesoc_master_status_status[1] <= basesoc_master_rx_ready;
end
assign csr_bankarray_csrbank6_master_status_w = basesoc_master_status_status;
assign basesoc_master_status_we = csr_bankarray_csrbank6_master_status_we;
assign csr_bankarray_csrbank7_sel = (csr_bankarray_interface7_bank_bus_adr[13:9] == 4'd8);
assign csr_bankarray_csrbank7_load0_r = csr_bankarray_interface7_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank7_load0_re <= 1'd0;
    csr_bankarray_csrbank7_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank7_load0_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_load0_we <= csr_bankarray_interface7_bank_bus_re;
    end
end
assign csr_bankarray_csrbank7_reload0_r = csr_bankarray_interface7_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank7_reload0_re <= 1'd0;
    csr_bankarray_csrbank7_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank7_reload0_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_reload0_we <= csr_bankarray_interface7_bank_bus_re;
    end
end
assign csr_bankarray_csrbank7_en0_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank7_en0_re <= 1'd0;
    csr_bankarray_csrbank7_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank7_en0_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_en0_we <= csr_bankarray_interface7_bank_bus_re;
    end
end
assign csr_bankarray_csrbank7_update_value0_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank7_update_value0_re <= 1'd0;
    csr_bankarray_csrbank7_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank7_update_value0_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_update_value0_we <= csr_bankarray_interface7_bank_bus_re;
    end
end
assign csr_bankarray_csrbank7_value_r = csr_bankarray_interface7_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank7_value_re <= 1'd0;
    csr_bankarray_csrbank7_value_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank7_value_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_value_we <= csr_bankarray_interface7_bank_bus_re;
    end
end
assign csr_bankarray_csrbank7_ev_status_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank7_ev_status_re <= 1'd0;
    csr_bankarray_csrbank7_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank7_ev_status_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_ev_status_we <= csr_bankarray_interface7_bank_bus_re;
    end
end
assign csr_bankarray_csrbank7_ev_pending_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank7_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank7_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank7_ev_pending_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_ev_pending_we <= csr_bankarray_interface7_bank_bus_re;
    end
end
assign csr_bankarray_csrbank7_ev_enable0_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank7_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank7_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank7_ev_enable0_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_ev_enable0_we <= csr_bankarray_interface7_bank_bus_re;
    end
end
assign csr_bankarray_csrbank7_load0_w = basesoc_timer_load_storage;
assign csr_bankarray_csrbank7_reload0_w = basesoc_timer_reload_storage;
assign csr_bankarray_csrbank7_en0_w = basesoc_timer_en_storage;
assign csr_bankarray_csrbank7_update_value0_w = basesoc_timer_update_value_storage;
assign csr_bankarray_csrbank7_value_w = basesoc_timer_value_status;
assign basesoc_timer_value_we = csr_bankarray_csrbank7_value_we;
assign basesoc_timer_status_status = basesoc_timer_zero0;
assign csr_bankarray_csrbank7_ev_status_w = basesoc_timer_status_status;
assign basesoc_timer_status_we = csr_bankarray_csrbank7_ev_status_we;
assign basesoc_timer_pending_status = basesoc_timer_zero1;
assign csr_bankarray_csrbank7_ev_pending_w = basesoc_timer_pending_status;
assign basesoc_timer_pending_we = csr_bankarray_csrbank7_ev_pending_we;
assign basesoc_timer_zero2 = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank7_ev_enable0_w = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank8_sel = (csr_bankarray_interface8_bank_bus_adr[13:9] == 4'd9);
assign basesoc_uart_rxtx_r = csr_bankarray_interface8_bank_bus_dat_w[7:0];
always @(*) begin
    basesoc_uart_rxtx_re <= 1'd0;
    basesoc_uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd0))) begin
        basesoc_uart_rxtx_re <= csr_bankarray_interface8_bank_bus_we;
        basesoc_uart_rxtx_we <= csr_bankarray_interface8_bank_bus_re;
    end
end
assign csr_bankarray_csrbank8_txfull_r = csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank8_txfull_re <= 1'd0;
    csr_bankarray_csrbank8_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank8_txfull_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_txfull_we <= csr_bankarray_interface8_bank_bus_re;
    end
end
assign csr_bankarray_csrbank8_rxempty_r = csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank8_rxempty_re <= 1'd0;
    csr_bankarray_csrbank8_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank8_rxempty_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_rxempty_we <= csr_bankarray_interface8_bank_bus_re;
    end
end
assign csr_bankarray_csrbank8_ev_status_r = csr_bankarray_interface8_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank8_ev_status_re <= 1'd0;
    csr_bankarray_csrbank8_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank8_ev_status_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_ev_status_we <= csr_bankarray_interface8_bank_bus_re;
    end
end
assign csr_bankarray_csrbank8_ev_pending_r = csr_bankarray_interface8_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank8_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank8_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank8_ev_pending_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_ev_pending_we <= csr_bankarray_interface8_bank_bus_re;
    end
end
assign csr_bankarray_csrbank8_ev_enable0_r = csr_bankarray_interface8_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank8_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank8_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank8_ev_enable0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_ev_enable0_we <= csr_bankarray_interface8_bank_bus_re;
    end
end
assign csr_bankarray_csrbank8_txempty_r = csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank8_txempty_re <= 1'd0;
    csr_bankarray_csrbank8_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank8_txempty_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_txempty_we <= csr_bankarray_interface8_bank_bus_re;
    end
end
assign csr_bankarray_csrbank8_rxfull_r = csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank8_rxfull_re <= 1'd0;
    csr_bankarray_csrbank8_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank8_rxfull_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_rxfull_we <= csr_bankarray_interface8_bank_bus_re;
    end
end
assign csr_bankarray_csrbank8_txfull_w = basesoc_uart_txfull_status;
assign basesoc_uart_txfull_we = csr_bankarray_csrbank8_txfull_we;
assign csr_bankarray_csrbank8_rxempty_w = basesoc_uart_rxempty_status;
assign basesoc_uart_rxempty_we = csr_bankarray_csrbank8_rxempty_we;
always @(*) begin
    basesoc_uart_status_status <= 2'd0;
    basesoc_uart_status_status[0] <= basesoc_uart_tx0;
    basesoc_uart_status_status[1] <= basesoc_uart_rx0;
end
assign csr_bankarray_csrbank8_ev_status_w = basesoc_uart_status_status;
assign basesoc_uart_status_we = csr_bankarray_csrbank8_ev_status_we;
always @(*) begin
    basesoc_uart_pending_status <= 2'd0;
    basesoc_uart_pending_status[0] <= basesoc_uart_tx1;
    basesoc_uart_pending_status[1] <= basesoc_uart_rx1;
end
assign csr_bankarray_csrbank8_ev_pending_w = basesoc_uart_pending_status;
assign basesoc_uart_pending_we = csr_bankarray_csrbank8_ev_pending_we;
assign basesoc_uart_tx2 = basesoc_uart_enable_storage[0];
assign basesoc_uart_rx2 = basesoc_uart_enable_storage[1];
assign csr_bankarray_csrbank8_ev_enable0_w = basesoc_uart_enable_storage;
assign csr_bankarray_csrbank8_txempty_w = basesoc_uart_txempty_status;
assign basesoc_uart_txempty_we = csr_bankarray_csrbank8_txempty_we;
assign csr_bankarray_csrbank8_rxfull_w = basesoc_uart_rxfull_status;
assign basesoc_uart_rxfull_we = csr_bankarray_csrbank8_rxfull_we;
assign csr_interconnect_adr = basesoc_interface1_adr;
assign csr_interconnect_re = basesoc_interface1_re;
assign csr_interconnect_we = basesoc_interface1_we;
assign csr_interconnect_dat_w = basesoc_interface1_dat_w;
assign basesoc_interface1_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface5_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface6_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface7_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface8_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface1_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface2_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface3_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface4_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface5_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface6_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface7_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface8_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_sram_bus_re = csr_interconnect_re;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface5_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface6_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface7_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface8_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_interface5_bank_bus_dat_r) | csr_bankarray_interface6_bank_bus_dat_r) | csr_bankarray_interface7_bank_bus_dat_r) | csr_bankarray_interface8_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    comb_rhs_self0 <= 30'd0;
    case (socbushandler_grant)
        1'd0: begin
            comb_rhs_self0 <= basesoc_ibus_adr;
        end
        default: begin
            comb_rhs_self0 <= basesoc_dbus_adr;
        end
    endcase
end
always @(*) begin
    comb_rhs_self1 <= 32'd0;
    case (socbushandler_grant)
        1'd0: begin
            comb_rhs_self1 <= basesoc_ibus_dat_w;
        end
        default: begin
            comb_rhs_self1 <= basesoc_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    comb_rhs_self2 <= 4'd0;
    case (socbushandler_grant)
        1'd0: begin
            comb_rhs_self2 <= basesoc_ibus_sel;
        end
        default: begin
            comb_rhs_self2 <= basesoc_dbus_sel;
        end
    endcase
end
always @(*) begin
    comb_rhs_self3 <= 1'd0;
    case (socbushandler_grant)
        1'd0: begin
            comb_rhs_self3 <= basesoc_ibus_cyc;
        end
        default: begin
            comb_rhs_self3 <= basesoc_dbus_cyc;
        end
    endcase
end
always @(*) begin
    comb_rhs_self4 <= 1'd0;
    case (socbushandler_grant)
        1'd0: begin
            comb_rhs_self4 <= basesoc_ibus_stb;
        end
        default: begin
            comb_rhs_self4 <= basesoc_dbus_stb;
        end
    endcase
end
always @(*) begin
    comb_rhs_self5 <= 1'd0;
    case (socbushandler_grant)
        1'd0: begin
            comb_rhs_self5 <= basesoc_ibus_we;
        end
        default: begin
            comb_rhs_self5 <= basesoc_dbus_we;
        end
    endcase
end
always @(*) begin
    comb_rhs_self6 <= 3'd0;
    case (socbushandler_grant)
        1'd0: begin
            comb_rhs_self6 <= basesoc_ibus_cti;
        end
        default: begin
            comb_rhs_self6 <= basesoc_dbus_cti;
        end
    endcase
end
always @(*) begin
    comb_rhs_self7 <= 2'd0;
    case (socbushandler_grant)
        1'd0: begin
            comb_rhs_self7 <= basesoc_ibus_bte;
        end
        default: begin
            comb_rhs_self7 <= basesoc_dbus_bte;
        end
    endcase
end
always @(*) begin
    comb_rhs_self8 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_rhs_self8 <= basesoc_sdram_choose_cmd_valids[0];
        end
        1'd1: begin
            comb_rhs_self8 <= basesoc_sdram_choose_cmd_valids[1];
        end
        2'd2: begin
            comb_rhs_self8 <= basesoc_sdram_choose_cmd_valids[2];
        end
        default: begin
            comb_rhs_self8 <= basesoc_sdram_choose_cmd_valids[3];
        end
    endcase
end
always @(*) begin
    comb_rhs_self9 <= 11'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_rhs_self9 <= basesoc_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            comb_rhs_self9 <= basesoc_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            comb_rhs_self9 <= basesoc_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            comb_rhs_self9 <= basesoc_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    comb_rhs_self10 <= 2'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_rhs_self10 <= basesoc_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            comb_rhs_self10 <= basesoc_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            comb_rhs_self10 <= basesoc_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            comb_rhs_self10 <= basesoc_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    comb_rhs_self11 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_rhs_self11 <= basesoc_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            comb_rhs_self11 <= basesoc_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            comb_rhs_self11 <= basesoc_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            comb_rhs_self11 <= basesoc_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    comb_rhs_self12 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_rhs_self12 <= basesoc_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            comb_rhs_self12 <= basesoc_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            comb_rhs_self12 <= basesoc_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            comb_rhs_self12 <= basesoc_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    comb_rhs_self13 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_rhs_self13 <= basesoc_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            comb_rhs_self13 <= basesoc_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            comb_rhs_self13 <= basesoc_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            comb_rhs_self13 <= basesoc_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    comb_t_self0 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_t_self0 <= basesoc_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            comb_t_self0 <= basesoc_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            comb_t_self0 <= basesoc_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            comb_t_self0 <= basesoc_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    comb_t_self1 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_t_self1 <= basesoc_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            comb_t_self1 <= basesoc_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            comb_t_self1 <= basesoc_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            comb_t_self1 <= basesoc_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    comb_t_self2 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            comb_t_self2 <= basesoc_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            comb_t_self2 <= basesoc_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            comb_t_self2 <= basesoc_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            comb_t_self2 <= basesoc_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    comb_rhs_self14 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_rhs_self14 <= basesoc_sdram_choose_req_valids[0];
        end
        1'd1: begin
            comb_rhs_self14 <= basesoc_sdram_choose_req_valids[1];
        end
        2'd2: begin
            comb_rhs_self14 <= basesoc_sdram_choose_req_valids[2];
        end
        default: begin
            comb_rhs_self14 <= basesoc_sdram_choose_req_valids[3];
        end
    endcase
end
always @(*) begin
    comb_rhs_self15 <= 11'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_rhs_self15 <= basesoc_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            comb_rhs_self15 <= basesoc_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            comb_rhs_self15 <= basesoc_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            comb_rhs_self15 <= basesoc_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    comb_rhs_self16 <= 2'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_rhs_self16 <= basesoc_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            comb_rhs_self16 <= basesoc_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            comb_rhs_self16 <= basesoc_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            comb_rhs_self16 <= basesoc_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    comb_rhs_self17 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_rhs_self17 <= basesoc_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            comb_rhs_self17 <= basesoc_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            comb_rhs_self17 <= basesoc_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            comb_rhs_self17 <= basesoc_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    comb_rhs_self18 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_rhs_self18 <= basesoc_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            comb_rhs_self18 <= basesoc_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            comb_rhs_self18 <= basesoc_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            comb_rhs_self18 <= basesoc_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    comb_rhs_self19 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_rhs_self19 <= basesoc_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            comb_rhs_self19 <= basesoc_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            comb_rhs_self19 <= basesoc_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            comb_rhs_self19 <= basesoc_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    comb_t_self3 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_t_self3 <= basesoc_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            comb_t_self3 <= basesoc_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            comb_t_self3 <= basesoc_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            comb_t_self3 <= basesoc_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    comb_t_self4 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_t_self4 <= basesoc_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            comb_t_self4 <= basesoc_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            comb_t_self4 <= basesoc_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            comb_t_self4 <= basesoc_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    comb_t_self5 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            comb_t_self5 <= basesoc_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            comb_t_self5 <= basesoc_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            comb_t_self5 <= basesoc_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            comb_t_self5 <= basesoc_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    comb_rhs_self20 <= 19'd0;
    case (basesoc_litedramcore_roundrobin0_grant)
        default: begin
            comb_rhs_self20 <= {basesoc_port_cmd_payload_addr[20:10], basesoc_port_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    comb_rhs_self21 <= 1'd0;
    case (basesoc_litedramcore_roundrobin0_grant)
        default: begin
            comb_rhs_self21 <= basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    comb_rhs_self22 <= 1'd0;
    case (basesoc_litedramcore_roundrobin0_grant)
        default: begin
            comb_rhs_self22 <= (((basesoc_port_cmd_payload_addr[9:8] == 1'd0) & (~(((basesoc_litedramcore_locked0 | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    comb_rhs_self23 <= 19'd0;
    case (basesoc_litedramcore_roundrobin1_grant)
        default: begin
            comb_rhs_self23 <= {basesoc_port_cmd_payload_addr[20:10], basesoc_port_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    comb_rhs_self24 <= 1'd0;
    case (basesoc_litedramcore_roundrobin1_grant)
        default: begin
            comb_rhs_self24 <= basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    comb_rhs_self25 <= 1'd0;
    case (basesoc_litedramcore_roundrobin1_grant)
        default: begin
            comb_rhs_self25 <= (((basesoc_port_cmd_payload_addr[9:8] == 1'd1) & (~(((basesoc_litedramcore_locked1 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    comb_rhs_self26 <= 19'd0;
    case (basesoc_litedramcore_roundrobin2_grant)
        default: begin
            comb_rhs_self26 <= {basesoc_port_cmd_payload_addr[20:10], basesoc_port_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    comb_rhs_self27 <= 1'd0;
    case (basesoc_litedramcore_roundrobin2_grant)
        default: begin
            comb_rhs_self27 <= basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    comb_rhs_self28 <= 1'd0;
    case (basesoc_litedramcore_roundrobin2_grant)
        default: begin
            comb_rhs_self28 <= (((basesoc_port_cmd_payload_addr[9:8] == 2'd2) & (~(((basesoc_litedramcore_locked2 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (basesoc_litedramcore_roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    comb_rhs_self29 <= 19'd0;
    case (basesoc_litedramcore_roundrobin3_grant)
        default: begin
            comb_rhs_self29 <= {basesoc_port_cmd_payload_addr[20:10], basesoc_port_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    comb_rhs_self30 <= 1'd0;
    case (basesoc_litedramcore_roundrobin3_grant)
        default: begin
            comb_rhs_self30 <= basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    comb_rhs_self31 <= 1'd0;
    case (basesoc_litedramcore_roundrobin3_grant)
        default: begin
            comb_rhs_self31 <= (((basesoc_port_cmd_payload_addr[9:8] == 2'd3) & (~(((basesoc_litedramcore_locked3 | (basesoc_sdram_interface_bank0_lock & (basesoc_litedramcore_roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (basesoc_litedramcore_roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (basesoc_litedramcore_roundrobin2_grant == 1'd0))))) & basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    sync_f_self <= 1'd0;
    case (spi_mosi_sel)
        1'd0: begin
            sync_f_self <= spi_mosi_data[0];
        end
        1'd1: begin
            sync_f_self <= spi_mosi_data[1];
        end
        2'd2: begin
            sync_f_self <= spi_mosi_data[2];
        end
        2'd3: begin
            sync_f_self <= spi_mosi_data[3];
        end
        3'd4: begin
            sync_f_self <= spi_mosi_data[4];
        end
        3'd5: begin
            sync_f_self <= spi_mosi_data[5];
        end
        3'd6: begin
            sync_f_self <= spi_mosi_data[6];
        end
        default: begin
            sync_f_self <= spi_mosi_data[7];
        end
    endcase
end
always @(*) begin
    sync_rhs_self0 <= 2'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            sync_rhs_self0 <= basesoc_sdram_nop_ba;
        end
        1'd1: begin
            sync_rhs_self0 <= basesoc_sdram_choose_req_cmd_payload_ba;
        end
        2'd2: begin
            sync_rhs_self0 <= basesoc_sdram_choose_req_cmd_payload_ba;
        end
        default: begin
            sync_rhs_self0 <= basesoc_sdram_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    sync_rhs_self1 <= 11'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            sync_rhs_self1 <= basesoc_sdram_nop_a;
        end
        1'd1: begin
            sync_rhs_self1 <= basesoc_sdram_choose_req_cmd_payload_a;
        end
        2'd2: begin
            sync_rhs_self1 <= basesoc_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            sync_rhs_self1 <= basesoc_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    sync_rhs_self2 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            sync_rhs_self2 <= 1'd0;
        end
        1'd1: begin
            sync_rhs_self2 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_cas);
        end
        2'd2: begin
            sync_rhs_self2 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            sync_rhs_self2 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    sync_rhs_self3 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            sync_rhs_self3 <= 1'd0;
        end
        1'd1: begin
            sync_rhs_self3 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_ras);
        end
        2'd2: begin
            sync_rhs_self3 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            sync_rhs_self3 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    sync_rhs_self4 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            sync_rhs_self4 <= 1'd0;
        end
        1'd1: begin
            sync_rhs_self4 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_we);
        end
        2'd2: begin
            sync_rhs_self4 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            sync_rhs_self4 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    sync_rhs_self5 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            sync_rhs_self5 <= 1'd0;
        end
        1'd1: begin
            sync_rhs_self5 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        2'd2: begin
            sync_rhs_self5 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            sync_rhs_self5 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    sync_rhs_self6 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            sync_rhs_self6 <= 1'd0;
        end
        1'd1: begin
            sync_rhs_self6 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        2'd2: begin
            sync_rhs_self6 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            sync_rhs_self6 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_is_write);
        end
    endcase
end
assign basesoc_rx_rx = regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    case (socbushandler_grant)
        1'd0: begin
            if ((~socbushandler_request[0])) begin
                if (socbushandler_request[1]) begin
                    socbushandler_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~socbushandler_request[1])) begin
                if (socbushandler_request[0]) begin
                    socbushandler_grant <= 1'd0;
                end
            end
        end
    endcase
    socbushandler_slaves <= socbushandler_master;
    if (socbushandler_wait) begin
        if ((~socbushandler_done)) begin
            socbushandler_count <= (socbushandler_count - 1'd1);
        end
    end else begin
        socbushandler_count <= 20'd1000000;
    end
    if ((basesoc_bus_errors != 32'd4294967295)) begin
        if (basesoc_bus_error) begin
            basesoc_bus_errors <= (basesoc_bus_errors + 1'd1);
        end
    end
    basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((basesoc_basesoc_ram_bus_cyc & basesoc_basesoc_ram_bus_stb) & ((~basesoc_basesoc_ram_bus_ack) | basesoc_basesoc_adr_burst))) begin
        basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & ((~basesoc_ram_bus_ram_bus_ack) | basesoc_ram_adr_burst))) begin
        basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {basesoc_tx_tick, basesoc_tx_phase} <= 23'd8246337;
    if (basesoc_tx_enable) begin
        {basesoc_tx_tick, basesoc_tx_phase} <= (basesoc_tx_phase + 23'd8246337);
    end
    basesoc_rs232phytx_state <= basesoc_rs232phytx_next_state;
    if (basesoc_tx_count_rs232phytx_next_value_ce0) begin
        basesoc_tx_count <= basesoc_tx_count_rs232phytx_next_value0;
    end
    if (basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (basesoc_tx_data_rs232phytx_next_value_ce2) begin
        basesoc_tx_data <= basesoc_tx_data_rs232phytx_next_value2;
    end
    basesoc_rx_rx_d <= basesoc_rx_rx;
    {basesoc_rx_tick, basesoc_rx_phase} <= 32'd2147483648;
    if (basesoc_rx_enable) begin
        {basesoc_rx_tick, basesoc_rx_phase} <= (basesoc_rx_phase + 23'd8246337);
    end
    basesoc_rs232phyrx_state <= basesoc_rs232phyrx_next_state;
    if (basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        basesoc_rx_count <= basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        basesoc_rx_data <= basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (basesoc_uart_tx_fifo_syncfifo_re) begin
        basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_tx_fifo_re) begin
            basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        basesoc_uart_tx_fifo_produce <= (basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_tx_fifo_do_read) begin
        basesoc_uart_tx_fifo_consume <= (basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        if ((~basesoc_uart_tx_fifo_do_read)) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_tx_fifo_do_read) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_uart_rx_fifo_syncfifo_re) begin
        basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_rx_fifo_re) begin
            basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        basesoc_uart_rx_fifo_produce <= (basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_rx_fifo_do_read) begin
        basesoc_uart_rx_fifo_consume <= (basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        if ((~basesoc_uart_rx_fifo_do_read)) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_rx_fifo_do_read) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_timer_en_storage) begin
        if ((basesoc_timer_value == 1'd0)) begin
            basesoc_timer_value <= basesoc_timer_reload_storage;
        end else begin
            basesoc_timer_value <= (basesoc_timer_value - 1'd1);
        end
    end else begin
        basesoc_timer_value <= basesoc_timer_load_storage;
    end
    if (basesoc_timer_update_value_re) begin
        basesoc_timer_value_status <= basesoc_timer_value;
    end
    if (basesoc_timer_zero_clear) begin
        basesoc_timer_zero_pending <= 1'd0;
    end
    basesoc_timer_zero_trigger_d <= basesoc_timer_zero_trigger;
    if ((basesoc_timer_zero_trigger & (~basesoc_timer_zero_trigger_d))) begin
        basesoc_timer_zero_pending <= 1'd1;
    end
    if (leds_done) begin
        leds_chaser <= {leds_chaser, (~leds_chaser)};
    end
    if (leds_re) begin
        leds_mode <= 1'd1;
    end
    if (leds_wait) begin
        if ((~leds_done)) begin
            leds_count <= (leds_count - 1'd1);
        end
    end else begin
        leds_count <= 25'd30000000;
    end
    spi_clk_divider1 <= (spi_clk_divider1 + 1'd1);
    if (spi_clk_rise) begin
        spi_clk <= spi_clk_enable;
    end else begin
        if (spi_clk_fall) begin
            spi_clk_divider1 <= 1'd0;
            spi_clk <= 1'd0;
        end
    end
    spi_cs_n <= (~(spi_cs & (spi_xfer_enable | (spi_cs_mode == 1'd1))));
    if (spi_mosi_latch) begin
        spi_mosi_data <= spi_mosi_1;
        spi_mosi_sel <= 3'd7;
    end else begin
        if (spi_clk_fall) begin
            if (spi_xfer_enable) begin
                spi_mosi <= sync_f_self;
            end
            spi_mosi_sel <= (spi_mosi_sel - 1'd1);
        end
    end
    if (spi_clk_rise) begin
        if (spi_loopback) begin
            spi_miso_data <= {spi_miso_data, spi_mosi};
        end else begin
            spi_miso_data <= {spi_miso_data, spi_miso};
        end
    end
    if (spi_miso_latch) begin
        spi_miso_1 <= spi_miso_data;
    end
    basesoc_spimaster_state <= basesoc_spimaster_next_state;
    if (spi_count_spimaster_next_value_ce) begin
        spi_count <= spi_count_spimaster_next_value;
    end
    case (basesoc_grant)
        1'd0: begin
            if ((~basesoc_request[0])) begin
                if (basesoc_request[1]) begin
                    basesoc_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~basesoc_request[1])) begin
                if (basesoc_request[0]) begin
                    basesoc_grant <= 1'd0;
                end
            end
        end
    endcase
    if (basesoc_mmap_wait) begin
        if ((~basesoc_mmap_done)) begin
            basesoc_mmap_count <= (basesoc_mmap_count - 1'd1);
        end
    end else begin
        basesoc_mmap_count <= 9'd256;
    end
    basesoc_litespimmap_state <= basesoc_litespimmap_next_state;
    if (basesoc_mmap_burst_cs_litespimmap_next_value_ce0) begin
        basesoc_mmap_burst_cs <= basesoc_mmap_burst_cs_litespimmap_next_value0;
    end
    if (basesoc_mmap_byte_count_litespimmap_next_value_ce1) begin
        basesoc_mmap_byte_count <= basesoc_mmap_byte_count_litespimmap_next_value1;
    end
    if (basesoc_mmap_burst_adr_litespimmap_next_value_ce2) begin
        basesoc_mmap_burst_adr <= basesoc_mmap_burst_adr_litespimmap_next_value2;
    end
    if (((~basesoc_master_tx_fifo_pipe_valid_source_valid) | basesoc_master_tx_fifo_pipe_valid_source_ready)) begin
        basesoc_master_tx_fifo_pipe_valid_source_valid <= basesoc_master_tx_fifo_pipe_valid_sink_valid;
        basesoc_master_tx_fifo_pipe_valid_source_first <= basesoc_master_tx_fifo_pipe_valid_sink_first;
        basesoc_master_tx_fifo_pipe_valid_source_last <= basesoc_master_tx_fifo_pipe_valid_sink_last;
        basesoc_master_tx_fifo_pipe_valid_source_payload_data <= basesoc_master_tx_fifo_pipe_valid_sink_payload_data;
        basesoc_master_tx_fifo_pipe_valid_source_payload_len <= basesoc_master_tx_fifo_pipe_valid_sink_payload_len;
        basesoc_master_tx_fifo_pipe_valid_source_payload_width <= basesoc_master_tx_fifo_pipe_valid_sink_payload_width;
        basesoc_master_tx_fifo_pipe_valid_source_payload_mask <= basesoc_master_tx_fifo_pipe_valid_sink_payload_mask;
    end
    if (((~basesoc_master_rx_fifo_pipe_valid_source_valid) | basesoc_master_rx_fifo_pipe_valid_source_ready)) begin
        basesoc_master_rx_fifo_pipe_valid_source_valid <= basesoc_master_rx_fifo_pipe_valid_sink_valid;
        basesoc_master_rx_fifo_pipe_valid_source_first <= basesoc_master_rx_fifo_pipe_valid_sink_first;
        basesoc_master_rx_fifo_pipe_valid_source_last <= basesoc_master_rx_fifo_pipe_valid_sink_last;
        basesoc_master_rx_fifo_pipe_valid_source_payload_data <= basesoc_master_rx_fifo_pipe_valid_sink_payload_data;
    end
    if ((~basesoc_spiflash_phy_enable)) begin
        basesoc_spiflash_phy_div <= basesoc_spiflash_phy_spi_clk_divisor;
    end
    if (basesoc_spiflash_phy_sr_out_load) begin
        basesoc_spiflash_phy_sr_out <= (basesoc_spiflash_phy_sink_payload_data <<< (6'd32 - basesoc_spiflash_phy_sink_payload_len));
        basesoc_spiflash_phy_sr_in <= 1'd0;
    end
    if (basesoc_spiflash_phy_sr_out_shift) begin
        basesoc_spiflash_phy_sr_out <= (basesoc_spiflash_phy_sr_out <<< basesoc_spiflash_phy_sink_payload_width);
    end
    if (basesoc_spiflash_phy_sr_in_shift) begin
        case (basesoc_spiflash_phy_sink_payload_width)
            1'd1: begin
                basesoc_spiflash_phy_sr_in <= {basesoc_spiflash_phy_sr_in, basesoc_spiflash_phy_dq_i[1]};
            end
            2'd2: begin
                basesoc_spiflash_phy_sr_in <= {basesoc_spiflash_phy_sr_in, basesoc_spiflash_phy_dq_i};
            end
            3'd4: begin
                basesoc_spiflash_phy_sr_in <= {basesoc_spiflash_phy_sr_in, basesoc_spiflash_phy_dq_i};
            end
            4'd8: begin
                basesoc_spiflash_phy_sr_in <= {basesoc_spiflash_phy_sr_in, basesoc_spiflash_phy_dq_i};
            end
        endcase
    end
    basesoc_spiflash_phy_posedge_reg <= {basesoc_spiflash_phy_posedge, basesoc_spiflash_phy_posedge_reg[1]};
    if ((basesoc_spiflash_phy_en | basesoc_spiflash_phy_en_int)) begin
        if ((basesoc_spiflash_phy_cnt < basesoc_spiflash_phy_div)) begin
            basesoc_spiflash_phy_cnt <= (basesoc_spiflash_phy_cnt + 1'd1);
        end else begin
            basesoc_spiflash_phy_cnt <= 1'd0;
            basesoc_spiflash_phy_clk <= (~basesoc_spiflash_phy_clk);
        end
    end else begin
        basesoc_spiflash_phy_clk <= 1'd0;
        basesoc_spiflash_phy_cnt <= 1'd0;
    end
    basesoc_spiflash_phy_clk_reg <= basesoc_spiflash_phy_clk;
    if (basesoc_spiflash_phy_wait) begin
        if ((~basesoc_spiflash_phy_done)) begin
            basesoc_spiflash_phy_count <= (basesoc_spiflash_phy_count - 1'd1);
        end
    end else begin
        basesoc_spiflash_phy_count <= 4'd11;
    end
    basesoc_litespiphy_state <= basesoc_litespiphy_next_state;
    if (basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value_ce0) begin
        basesoc_spiflash_phy_sr_out_cnt <= basesoc_spiflash_phy_sr_out_cnt_litespiphy_next_value0;
    end
    if (basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value_ce1) begin
        basesoc_spiflash_phy_sr_in_cnt <= basesoc_spiflash_phy_sr_in_cnt_litespiphy_next_value1;
    end
    if (basesoc_spiflash_phy_dq_oe_litespiphy_next_value_ce2) begin
        basesoc_spiflash_phy_dq_oe <= basesoc_spiflash_phy_dq_oe_litespiphy_next_value2;
    end
    rddata_en <= {rddata_en, dfi_p0_rddata_en};
    dfi_p0_rddata_valid <= rddata_en[2];
    if (basesoc_sdram_csr_dfi_p0_rddata_valid) begin
        basesoc_sdram_rddata_status <= basesoc_sdram_csr_dfi_p0_rddata;
    end
    if ((basesoc_sdram_timer_wait & (~basesoc_sdram_timer_done0))) begin
        basesoc_sdram_timer_count1 <= (basesoc_sdram_timer_count1 - 1'd1);
    end else begin
        basesoc_sdram_timer_count1 <= 10'd937;
    end
    basesoc_sdram_postponer_req_o <= 1'd0;
    if (basesoc_sdram_postponer_req_i) begin
        basesoc_sdram_postponer_count <= (basesoc_sdram_postponer_count - 1'd1);
        if ((basesoc_sdram_postponer_count == 1'd0)) begin
            basesoc_sdram_postponer_count <= 1'd0;
            basesoc_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (basesoc_sdram_sequencer_start0) begin
        basesoc_sdram_sequencer_count <= 1'd0;
    end else begin
        if (basesoc_sdram_sequencer_done1) begin
            if ((basesoc_sdram_sequencer_count != 1'd0)) begin
                basesoc_sdram_sequencer_count <= (basesoc_sdram_sequencer_count - 1'd1);
            end
        end
    end
    basesoc_sdram_cmd_payload_a <= 1'd0;
    basesoc_sdram_cmd_payload_ba <= 1'd0;
    basesoc_sdram_cmd_payload_cas <= 1'd0;
    basesoc_sdram_cmd_payload_ras <= 1'd0;
    basesoc_sdram_cmd_payload_we <= 1'd0;
    basesoc_sdram_sequencer_done1 <= 1'd0;
    if ((basesoc_sdram_sequencer_start1 & (basesoc_sdram_sequencer_trigger == 1'd0))) begin
        basesoc_sdram_cmd_payload_a <= 11'd1024;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd1;
        basesoc_sdram_cmd_payload_we <= 1'd1;
    end
    if ((basesoc_sdram_sequencer_trigger == 1'd1)) begin
        basesoc_sdram_cmd_payload_a <= 11'd1024;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd1;
        basesoc_sdram_cmd_payload_ras <= 1'd1;
        basesoc_sdram_cmd_payload_we <= 1'd0;
    end
    if ((basesoc_sdram_sequencer_trigger == 3'd5)) begin
        basesoc_sdram_cmd_payload_a <= 1'd0;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd0;
        basesoc_sdram_cmd_payload_we <= 1'd0;
        basesoc_sdram_sequencer_done1 <= 1'd1;
    end
    if ((basesoc_sdram_sequencer_trigger == 3'd5)) begin
        basesoc_sdram_sequencer_trigger <= 1'd0;
    end else begin
        if ((basesoc_sdram_sequencer_trigger != 1'd0)) begin
            basesoc_sdram_sequencer_trigger <= (basesoc_sdram_sequencer_trigger + 1'd1);
        end else begin
            if (basesoc_sdram_sequencer_start1) begin
                basesoc_sdram_sequencer_trigger <= 1'd1;
            end
        end
    end
    basesoc_litedramcore_refresher_state <= basesoc_litedramcore_refresher_next_state;
    if (basesoc_sdram_bankmachine0_row_close) begin
        basesoc_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine0_row_open) begin
            basesoc_sdram_bankmachine0_row_opened <= 1'd1;
            basesoc_sdram_bankmachine0_row <= basesoc_sdram_bankmachine0_source_source_payload_addr[18:8];
        end
    end
    if (((basesoc_sdram_bankmachine0_syncfifo0_we & basesoc_sdram_bankmachine0_syncfifo0_writable) & (~basesoc_sdram_bankmachine0_replace))) begin
        basesoc_sdram_bankmachine0_produce <= (basesoc_sdram_bankmachine0_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine0_do_read) begin
        basesoc_sdram_bankmachine0_consume <= (basesoc_sdram_bankmachine0_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine0_syncfifo0_we & basesoc_sdram_bankmachine0_syncfifo0_writable) & (~basesoc_sdram_bankmachine0_replace))) begin
        if ((~basesoc_sdram_bankmachine0_do_read)) begin
            basesoc_sdram_bankmachine0_level <= (basesoc_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine0_do_read) begin
            basesoc_sdram_bankmachine0_level <= (basesoc_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine0_pipe_valid_source_valid) | basesoc_sdram_bankmachine0_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine0_pipe_valid_source_valid <= basesoc_sdram_bankmachine0_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine0_pipe_valid_source_first <= basesoc_sdram_bankmachine0_pipe_valid_sink_first;
        basesoc_sdram_bankmachine0_pipe_valid_source_last <= basesoc_sdram_bankmachine0_pipe_valid_sink_last;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine0_twtpcon_valid) begin
        basesoc_sdram_bankmachine0_twtpcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_twtpcon_ready)) begin
            basesoc_sdram_bankmachine0_twtpcon_count <= (basesoc_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine0_trccon_valid) begin
        basesoc_sdram_bankmachine0_trccon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_trccon_ready)) begin
            basesoc_sdram_bankmachine0_trccon_count <= (basesoc_sdram_bankmachine0_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine0_trascon_valid) begin
        basesoc_sdram_bankmachine0_trascon_count <= 2'd2;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_trascon_ready)) begin
            basesoc_sdram_bankmachine0_trascon_count <= (basesoc_sdram_bankmachine0_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    basesoc_litedramcore_bankmachine0_state <= basesoc_litedramcore_bankmachine0_next_state;
    if (basesoc_sdram_bankmachine1_row_close) begin
        basesoc_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine1_row_open) begin
            basesoc_sdram_bankmachine1_row_opened <= 1'd1;
            basesoc_sdram_bankmachine1_row <= basesoc_sdram_bankmachine1_source_source_payload_addr[18:8];
        end
    end
    if (((basesoc_sdram_bankmachine1_syncfifo1_we & basesoc_sdram_bankmachine1_syncfifo1_writable) & (~basesoc_sdram_bankmachine1_replace))) begin
        basesoc_sdram_bankmachine1_produce <= (basesoc_sdram_bankmachine1_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine1_do_read) begin
        basesoc_sdram_bankmachine1_consume <= (basesoc_sdram_bankmachine1_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine1_syncfifo1_we & basesoc_sdram_bankmachine1_syncfifo1_writable) & (~basesoc_sdram_bankmachine1_replace))) begin
        if ((~basesoc_sdram_bankmachine1_do_read)) begin
            basesoc_sdram_bankmachine1_level <= (basesoc_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine1_do_read) begin
            basesoc_sdram_bankmachine1_level <= (basesoc_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine1_pipe_valid_source_valid) | basesoc_sdram_bankmachine1_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine1_pipe_valid_source_valid <= basesoc_sdram_bankmachine1_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine1_pipe_valid_source_first <= basesoc_sdram_bankmachine1_pipe_valid_sink_first;
        basesoc_sdram_bankmachine1_pipe_valid_source_last <= basesoc_sdram_bankmachine1_pipe_valid_sink_last;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine1_twtpcon_valid) begin
        basesoc_sdram_bankmachine1_twtpcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_twtpcon_ready)) begin
            basesoc_sdram_bankmachine1_twtpcon_count <= (basesoc_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine1_trccon_valid) begin
        basesoc_sdram_bankmachine1_trccon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_trccon_ready)) begin
            basesoc_sdram_bankmachine1_trccon_count <= (basesoc_sdram_bankmachine1_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine1_trascon_valid) begin
        basesoc_sdram_bankmachine1_trascon_count <= 2'd2;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_trascon_ready)) begin
            basesoc_sdram_bankmachine1_trascon_count <= (basesoc_sdram_bankmachine1_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    basesoc_litedramcore_bankmachine1_state <= basesoc_litedramcore_bankmachine1_next_state;
    if (basesoc_sdram_bankmachine2_row_close) begin
        basesoc_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine2_row_open) begin
            basesoc_sdram_bankmachine2_row_opened <= 1'd1;
            basesoc_sdram_bankmachine2_row <= basesoc_sdram_bankmachine2_source_source_payload_addr[18:8];
        end
    end
    if (((basesoc_sdram_bankmachine2_syncfifo2_we & basesoc_sdram_bankmachine2_syncfifo2_writable) & (~basesoc_sdram_bankmachine2_replace))) begin
        basesoc_sdram_bankmachine2_produce <= (basesoc_sdram_bankmachine2_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine2_do_read) begin
        basesoc_sdram_bankmachine2_consume <= (basesoc_sdram_bankmachine2_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine2_syncfifo2_we & basesoc_sdram_bankmachine2_syncfifo2_writable) & (~basesoc_sdram_bankmachine2_replace))) begin
        if ((~basesoc_sdram_bankmachine2_do_read)) begin
            basesoc_sdram_bankmachine2_level <= (basesoc_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine2_do_read) begin
            basesoc_sdram_bankmachine2_level <= (basesoc_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine2_pipe_valid_source_valid) | basesoc_sdram_bankmachine2_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine2_pipe_valid_source_valid <= basesoc_sdram_bankmachine2_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine2_pipe_valid_source_first <= basesoc_sdram_bankmachine2_pipe_valid_sink_first;
        basesoc_sdram_bankmachine2_pipe_valid_source_last <= basesoc_sdram_bankmachine2_pipe_valid_sink_last;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine2_twtpcon_valid) begin
        basesoc_sdram_bankmachine2_twtpcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_twtpcon_ready)) begin
            basesoc_sdram_bankmachine2_twtpcon_count <= (basesoc_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine2_trccon_valid) begin
        basesoc_sdram_bankmachine2_trccon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_trccon_ready)) begin
            basesoc_sdram_bankmachine2_trccon_count <= (basesoc_sdram_bankmachine2_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine2_trascon_valid) begin
        basesoc_sdram_bankmachine2_trascon_count <= 2'd2;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_trascon_ready)) begin
            basesoc_sdram_bankmachine2_trascon_count <= (basesoc_sdram_bankmachine2_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    basesoc_litedramcore_bankmachine2_state <= basesoc_litedramcore_bankmachine2_next_state;
    if (basesoc_sdram_bankmachine3_row_close) begin
        basesoc_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine3_row_open) begin
            basesoc_sdram_bankmachine3_row_opened <= 1'd1;
            basesoc_sdram_bankmachine3_row <= basesoc_sdram_bankmachine3_source_source_payload_addr[18:8];
        end
    end
    if (((basesoc_sdram_bankmachine3_syncfifo3_we & basesoc_sdram_bankmachine3_syncfifo3_writable) & (~basesoc_sdram_bankmachine3_replace))) begin
        basesoc_sdram_bankmachine3_produce <= (basesoc_sdram_bankmachine3_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine3_do_read) begin
        basesoc_sdram_bankmachine3_consume <= (basesoc_sdram_bankmachine3_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine3_syncfifo3_we & basesoc_sdram_bankmachine3_syncfifo3_writable) & (~basesoc_sdram_bankmachine3_replace))) begin
        if ((~basesoc_sdram_bankmachine3_do_read)) begin
            basesoc_sdram_bankmachine3_level <= (basesoc_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine3_do_read) begin
            basesoc_sdram_bankmachine3_level <= (basesoc_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine3_pipe_valid_source_valid) | basesoc_sdram_bankmachine3_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine3_pipe_valid_source_valid <= basesoc_sdram_bankmachine3_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine3_pipe_valid_source_first <= basesoc_sdram_bankmachine3_pipe_valid_sink_first;
        basesoc_sdram_bankmachine3_pipe_valid_source_last <= basesoc_sdram_bankmachine3_pipe_valid_sink_last;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine3_twtpcon_valid) begin
        basesoc_sdram_bankmachine3_twtpcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_twtpcon_ready)) begin
            basesoc_sdram_bankmachine3_twtpcon_count <= (basesoc_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine3_trccon_valid) begin
        basesoc_sdram_bankmachine3_trccon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_trccon_ready)) begin
            basesoc_sdram_bankmachine3_trccon_count <= (basesoc_sdram_bankmachine3_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine3_trascon_valid) begin
        basesoc_sdram_bankmachine3_trascon_count <= 2'd2;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_trascon_ready)) begin
            basesoc_sdram_bankmachine3_trascon_count <= (basesoc_sdram_bankmachine3_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    basesoc_litedramcore_bankmachine3_state <= basesoc_litedramcore_bankmachine3_next_state;
    if ((~basesoc_sdram_en0)) begin
        basesoc_sdram_time0 <= 5'd31;
    end else begin
        if ((~basesoc_sdram_max_time0)) begin
            basesoc_sdram_time0 <= (basesoc_sdram_time0 - 1'd1);
        end
    end
    if ((~basesoc_sdram_en1)) begin
        basesoc_sdram_time1 <= 4'd15;
    end else begin
        if ((~basesoc_sdram_max_time1)) begin
            basesoc_sdram_time1 <= (basesoc_sdram_time1 - 1'd1);
        end
    end
    if (basesoc_sdram_choose_cmd_ce) begin
        case (basesoc_sdram_choose_cmd_grant)
            1'd0: begin
                if (basesoc_sdram_choose_cmd_request[1]) begin
                    basesoc_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[2]) begin
                        basesoc_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[3]) begin
                            basesoc_sdram_choose_cmd_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (basesoc_sdram_choose_cmd_request[2]) begin
                    basesoc_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[3]) begin
                        basesoc_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[0]) begin
                            basesoc_sdram_choose_cmd_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (basesoc_sdram_choose_cmd_request[3]) begin
                    basesoc_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[0]) begin
                        basesoc_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[1]) begin
                            basesoc_sdram_choose_cmd_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (basesoc_sdram_choose_cmd_request[0]) begin
                    basesoc_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[1]) begin
                        basesoc_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[2]) begin
                            basesoc_sdram_choose_cmd_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (basesoc_sdram_choose_req_ce) begin
        case (basesoc_sdram_choose_req_grant)
            1'd0: begin
                if (basesoc_sdram_choose_req_request[1]) begin
                    basesoc_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (basesoc_sdram_choose_req_request[2]) begin
                        basesoc_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (basesoc_sdram_choose_req_request[3]) begin
                            basesoc_sdram_choose_req_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (basesoc_sdram_choose_req_request[2]) begin
                    basesoc_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (basesoc_sdram_choose_req_request[3]) begin
                        basesoc_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (basesoc_sdram_choose_req_request[0]) begin
                            basesoc_sdram_choose_req_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (basesoc_sdram_choose_req_request[3]) begin
                    basesoc_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (basesoc_sdram_choose_req_request[0]) begin
                        basesoc_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (basesoc_sdram_choose_req_request[1]) begin
                            basesoc_sdram_choose_req_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (basesoc_sdram_choose_req_request[0]) begin
                    basesoc_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (basesoc_sdram_choose_req_request[1]) begin
                        basesoc_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (basesoc_sdram_choose_req_request[2]) begin
                            basesoc_sdram_choose_req_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    basesoc_sdram_dfi_p0_cs_n <= 1'd0;
    basesoc_sdram_dfi_p0_bank <= sync_rhs_self0;
    basesoc_sdram_dfi_p0_address <= sync_rhs_self1;
    basesoc_sdram_dfi_p0_cas_n <= (~sync_rhs_self2);
    basesoc_sdram_dfi_p0_ras_n <= (~sync_rhs_self3);
    basesoc_sdram_dfi_p0_we_n <= (~sync_rhs_self4);
    basesoc_sdram_dfi_p0_rddata_en <= sync_rhs_self5;
    basesoc_sdram_dfi_p0_wrdata_en <= sync_rhs_self6;
    if (basesoc_sdram_trrdcon_valid) begin
        basesoc_sdram_trrdcon_count <= 1'd0;
        if (1'd1) begin
            basesoc_sdram_trrdcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_trrdcon_ready)) begin
            basesoc_sdram_trrdcon_count <= (basesoc_sdram_trrdcon_count - 1'd1);
            if ((basesoc_sdram_trrdcon_count == 1'd1)) begin
                basesoc_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_tccdcon_valid) begin
        basesoc_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            basesoc_sdram_tccdcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_tccdcon_ready)) begin
            basesoc_sdram_tccdcon_count <= (basesoc_sdram_tccdcon_count - 1'd1);
            if ((basesoc_sdram_tccdcon_count == 1'd1)) begin
                basesoc_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_twtrcon_valid) begin
        basesoc_sdram_twtrcon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_twtrcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_twtrcon_ready)) begin
            basesoc_sdram_twtrcon_count <= (basesoc_sdram_twtrcon_count - 1'd1);
            if ((basesoc_sdram_twtrcon_count == 1'd1)) begin
                basesoc_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    basesoc_litedramcore_multiplexer_state <= basesoc_litedramcore_multiplexer_next_state;
    basesoc_litedramcore_new_master_wdata_ready <= ((((1'd0 | ((basesoc_litedramcore_roundrobin0_grant == 1'd0) & basesoc_sdram_interface_bank0_wdata_ready)) | ((basesoc_litedramcore_roundrobin1_grant == 1'd0) & basesoc_sdram_interface_bank1_wdata_ready)) | ((basesoc_litedramcore_roundrobin2_grant == 1'd0) & basesoc_sdram_interface_bank2_wdata_ready)) | ((basesoc_litedramcore_roundrobin3_grant == 1'd0) & basesoc_sdram_interface_bank3_wdata_ready));
    basesoc_litedramcore_new_master_rdata_valid0 <= ((((1'd0 | ((basesoc_litedramcore_roundrobin0_grant == 1'd0) & basesoc_sdram_interface_bank0_rdata_valid)) | ((basesoc_litedramcore_roundrobin1_grant == 1'd0) & basesoc_sdram_interface_bank1_rdata_valid)) | ((basesoc_litedramcore_roundrobin2_grant == 1'd0) & basesoc_sdram_interface_bank2_rdata_valid)) | ((basesoc_litedramcore_roundrobin3_grant == 1'd0) & basesoc_sdram_interface_bank3_rdata_valid));
    basesoc_litedramcore_new_master_rdata_valid1 <= basesoc_litedramcore_new_master_rdata_valid0;
    basesoc_litedramcore_new_master_rdata_valid2 <= basesoc_litedramcore_new_master_rdata_valid1;
    basesoc_litedramcore_new_master_rdata_valid3 <= basesoc_litedramcore_new_master_rdata_valid2;
    basesoc_adr_offset_r <= basesoc_wb_sdram_adr[1:0];
    basesoc_fullmemorywe_state <= basesoc_fullmemorywe_next_state;
    basesoc_litedramnativeportconverter_state <= basesoc_litedramnativeportconverter_next_state;
    if (basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0) begin
        basesoc_wishbone_bridge_cmd_count <= basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0;
    end
    if (basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1) begin
        basesoc_wishbone_bridge_cmd_addr <= basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1;
    end
    if (basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2) begin
        basesoc_wishbone_bridge_cmd_we <= basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2;
    end
    if ((basesoc_wishbone_bridge_wdata_converter_converter_source_valid & basesoc_wishbone_bridge_wdata_converter_converter_source_ready)) begin
        if (basesoc_wishbone_bridge_wdata_converter_converter_last) begin
            basesoc_wishbone_bridge_wdata_converter_converter_mux <= 1'd0;
        end else begin
            basesoc_wishbone_bridge_wdata_converter_converter_mux <= (basesoc_wishbone_bridge_wdata_converter_converter_mux + 1'd1);
        end
    end
    if (basesoc_wishbone_bridge_rdata_converter_converter_source_ready) begin
        basesoc_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
    end
    if (basesoc_wishbone_bridge_rdata_converter_converter_load_part) begin
        if (((basesoc_wishbone_bridge_rdata_converter_converter_demux == 2'd3) | basesoc_wishbone_bridge_rdata_converter_converter_sink_last)) begin
            basesoc_wishbone_bridge_rdata_converter_converter_demux <= 1'd0;
            basesoc_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd1;
        end else begin
            basesoc_wishbone_bridge_rdata_converter_converter_demux <= (basesoc_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
        end
    end
    if ((basesoc_wishbone_bridge_rdata_converter_converter_source_valid & basesoc_wishbone_bridge_rdata_converter_converter_source_ready)) begin
        if ((basesoc_wishbone_bridge_rdata_converter_converter_sink_valid & basesoc_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
            basesoc_wishbone_bridge_rdata_converter_converter_source_first <= basesoc_wishbone_bridge_rdata_converter_converter_sink_first;
            basesoc_wishbone_bridge_rdata_converter_converter_source_last <= basesoc_wishbone_bridge_rdata_converter_converter_sink_last;
        end else begin
            basesoc_wishbone_bridge_rdata_converter_converter_source_first <= 1'd0;
            basesoc_wishbone_bridge_rdata_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((basesoc_wishbone_bridge_rdata_converter_converter_sink_valid & basesoc_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
            basesoc_wishbone_bridge_rdata_converter_converter_source_first <= (basesoc_wishbone_bridge_rdata_converter_converter_sink_first | basesoc_wishbone_bridge_rdata_converter_converter_source_first);
            basesoc_wishbone_bridge_rdata_converter_converter_source_last <= (basesoc_wishbone_bridge_rdata_converter_converter_sink_last | basesoc_wishbone_bridge_rdata_converter_converter_source_last);
        end
    end
    if (basesoc_wishbone_bridge_rdata_converter_converter_load_part) begin
        case (basesoc_wishbone_bridge_rdata_converter_converter_demux)
            1'd0: begin
                basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data[31:0] <= basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            1'd1: begin
                basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data[63:32] <= basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            2'd2: begin
                basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data[95:64] <= basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            2'd3: begin
                basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data[127:96] <= basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (basesoc_wishbone_bridge_rdata_converter_converter_load_part) begin
        basesoc_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= (basesoc_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
    end
    basesoc_fsm_state <= basesoc_fsm_next_state;
    if (basesoc_wishbone_bridge_aborted_fsm_next_value_ce) begin
        basesoc_wishbone_bridge_aborted <= basesoc_wishbone_bridge_aborted_fsm_next_value;
    end
    basesoc_wishbone2csr_state <= basesoc_wishbone2csr_next_state;
    if (basesoc_interface1_dat_w_wishbone2csr_next_value_ce0) begin
        basesoc_interface1_dat_w <= basesoc_interface1_dat_w_wishbone2csr_next_value0;
    end
    if (basesoc_interface1_adr_wishbone2csr_next_value_ce1) begin
        basesoc_interface1_adr <= basesoc_interface1_adr_wishbone2csr_next_value1;
    end
    if (basesoc_interface1_re_wishbone2csr_next_value_ce2) begin
        basesoc_interface1_re <= basesoc_interface1_re_wishbone2csr_next_value2;
    end
    if (basesoc_interface1_we_wishbone2csr_next_value_ce3) begin
        basesoc_interface1_we <= basesoc_interface1_we_wishbone2csr_next_value3;
    end
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        basesoc_reset_storage <= csr_bankarray_csrbank0_reset0_r;
    end
    basesoc_reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        basesoc_scratch_storage <= csr_bankarray_csrbank0_scratch0_r;
    end
    basesoc_scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    basesoc_bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_w0_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_r_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_w0_re) begin
        _w_storage <= csr_bankarray_csrbank1_w0_r;
    end
    _w_re <= csr_bankarray_csrbank1_w0_re;
    _r_re <= csr_bankarray_csrbank1_r_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_out0_re) begin
        leds_storage <= csr_bankarray_csrbank2_out0_r;
    end
    leds_re <= csr_bankarray_csrbank2_out0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank3_out0_re) begin
        lora_reset_storage <= csr_bankarray_csrbank3_out0_r;
    end
    lora_reset_re <= csr_bankarray_csrbank3_out0_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_dfii_control0_w;
            end
            1'd1: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_dfii_pi0_command0_w;
            end
            2'd2: begin
                csr_bankarray_interface4_bank_bus_dat_r <= basesoc_sdram_command_issue_w;
            end
            2'd3: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_dfii_pi0_address0_w;
            end
            3'd4: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_dfii_pi0_wrdata0_w;
            end
            3'd6: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_dfii_pi0_rddata_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank4_dfii_control0_re) begin
        basesoc_sdram_storage <= csr_bankarray_csrbank4_dfii_control0_r;
    end
    basesoc_sdram_re <= csr_bankarray_csrbank4_dfii_control0_re;
    if (csr_bankarray_csrbank4_dfii_pi0_command0_re) begin
        basesoc_sdram_command_storage <= csr_bankarray_csrbank4_dfii_pi0_command0_r;
    end
    basesoc_sdram_command_re <= csr_bankarray_csrbank4_dfii_pi0_command0_re;
    if (csr_bankarray_csrbank4_dfii_pi0_address0_re) begin
        basesoc_sdram_address_storage <= csr_bankarray_csrbank4_dfii_pi0_address0_r;
    end
    basesoc_sdram_address_re <= csr_bankarray_csrbank4_dfii_pi0_address0_re;
    if (csr_bankarray_csrbank4_dfii_pi0_baddress0_re) begin
        basesoc_sdram_baddress_storage <= csr_bankarray_csrbank4_dfii_pi0_baddress0_r;
    end
    basesoc_sdram_baddress_re <= csr_bankarray_csrbank4_dfii_pi0_baddress0_re;
    if (csr_bankarray_csrbank4_dfii_pi0_wrdata0_re) begin
        basesoc_sdram_wrdata_storage <= csr_bankarray_csrbank4_dfii_pi0_wrdata0_r;
    end
    basesoc_sdram_wrdata_re <= csr_bankarray_csrbank4_dfii_pi0_wrdata0_re;
    basesoc_sdram_rddata_re <= csr_bankarray_csrbank4_dfii_pi0_rddata_re;
    csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank5_sel) begin
        case (csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_control0_w;
            end
            1'd1: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_status_w;
            end
            2'd2: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_mosi0_w;
            end
            2'd3: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_miso_w;
            end
            3'd4: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_cs0_w;
            end
            3'd5: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_loopback0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank5_control0_re) begin
        spi_control_storage <= csr_bankarray_csrbank5_control0_r;
    end
    spi_control_re <= csr_bankarray_csrbank5_control0_re;
    spi_status_re <= csr_bankarray_csrbank5_status_re;
    if (csr_bankarray_csrbank5_mosi0_re) begin
        spi_mosi_storage <= csr_bankarray_csrbank5_mosi0_r;
    end
    spi_mosi_re <= csr_bankarray_csrbank5_mosi0_re;
    spi_miso_re <= csr_bankarray_csrbank5_miso_re;
    if (csr_bankarray_csrbank5_cs0_re) begin
        spi_cs_storage <= csr_bankarray_csrbank5_cs0_r;
    end
    spi_cs_re <= csr_bankarray_csrbank5_cs0_re;
    if (csr_bankarray_csrbank5_loopback0_re) begin
        spi_loopback_storage <= csr_bankarray_csrbank5_loopback0_r;
    end
    spi_loopback_re <= csr_bankarray_csrbank5_loopback0_re;
    csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank6_sel) begin
        case (csr_bankarray_interface6_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_phy_clk_divisor0_w;
            end
            1'd1: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_mmap_dummy_bits0_w;
            end
            2'd2: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_master_cs0_w;
            end
            2'd3: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_master_phyconfig0_w;
            end
            3'd4: begin
                csr_bankarray_interface6_bank_bus_dat_r <= basesoc_master_rxtx_w;
            end
            3'd5: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_master_status_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank6_phy_clk_divisor0_re) begin
        basesoc_spiflash_phy_storage <= csr_bankarray_csrbank6_phy_clk_divisor0_r;
    end
    basesoc_spiflash_phy_re <= csr_bankarray_csrbank6_phy_clk_divisor0_re;
    if (csr_bankarray_csrbank6_mmap_dummy_bits0_re) begin
        basesoc_mmap_storage <= csr_bankarray_csrbank6_mmap_dummy_bits0_r;
    end
    basesoc_mmap_re <= csr_bankarray_csrbank6_mmap_dummy_bits0_re;
    if (csr_bankarray_csrbank6_master_cs0_re) begin
        basesoc_master_cs_storage <= csr_bankarray_csrbank6_master_cs0_r;
    end
    basesoc_master_cs_re <= csr_bankarray_csrbank6_master_cs0_re;
    if (csr_bankarray_csrbank6_master_phyconfig0_re) begin
        basesoc_master_phyconfig_storage <= csr_bankarray_csrbank6_master_phyconfig0_r;
    end
    basesoc_master_phyconfig_re <= csr_bankarray_csrbank6_master_phyconfig0_re;
    basesoc_master_status_re <= csr_bankarray_csrbank6_master_status_re;
    csr_bankarray_interface7_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank7_sel) begin
        case (csr_bankarray_interface7_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_value_w;
            end
            3'd5: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank7_load0_re) begin
        basesoc_timer_load_storage <= csr_bankarray_csrbank7_load0_r;
    end
    basesoc_timer_load_re <= csr_bankarray_csrbank7_load0_re;
    if (csr_bankarray_csrbank7_reload0_re) begin
        basesoc_timer_reload_storage <= csr_bankarray_csrbank7_reload0_r;
    end
    basesoc_timer_reload_re <= csr_bankarray_csrbank7_reload0_re;
    if (csr_bankarray_csrbank7_en0_re) begin
        basesoc_timer_en_storage <= csr_bankarray_csrbank7_en0_r;
    end
    basesoc_timer_en_re <= csr_bankarray_csrbank7_en0_re;
    if (csr_bankarray_csrbank7_update_value0_re) begin
        basesoc_timer_update_value_storage <= csr_bankarray_csrbank7_update_value0_r;
    end
    basesoc_timer_update_value_re <= csr_bankarray_csrbank7_update_value0_re;
    basesoc_timer_value_re <= csr_bankarray_csrbank7_value_re;
    basesoc_timer_status_re <= csr_bankarray_csrbank7_ev_status_re;
    if (csr_bankarray_csrbank7_ev_pending_re) begin
        basesoc_timer_pending_r <= csr_bankarray_csrbank7_ev_pending_r;
    end
    basesoc_timer_pending_re <= csr_bankarray_csrbank7_ev_pending_re;
    if (csr_bankarray_csrbank7_ev_enable0_re) begin
        basesoc_timer_enable_storage <= csr_bankarray_csrbank7_ev_enable0_r;
    end
    basesoc_timer_enable_re <= csr_bankarray_csrbank7_ev_enable0_re;
    csr_bankarray_interface8_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank8_sel) begin
        case (csr_bankarray_interface8_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface8_bank_bus_dat_r <= basesoc_uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_rxfull_w;
            end
        endcase
    end
    basesoc_uart_txfull_re <= csr_bankarray_csrbank8_txfull_re;
    basesoc_uart_rxempty_re <= csr_bankarray_csrbank8_rxempty_re;
    basesoc_uart_status_re <= csr_bankarray_csrbank8_ev_status_re;
    if (csr_bankarray_csrbank8_ev_pending_re) begin
        basesoc_uart_pending_r <= csr_bankarray_csrbank8_ev_pending_r;
    end
    basesoc_uart_pending_re <= csr_bankarray_csrbank8_ev_pending_re;
    if (csr_bankarray_csrbank8_ev_enable0_re) begin
        basesoc_uart_enable_storage <= csr_bankarray_csrbank8_ev_enable0_r;
    end
    basesoc_uart_enable_re <= csr_bankarray_csrbank8_ev_enable0_re;
    basesoc_uart_txempty_re <= csr_bankarray_csrbank8_txempty_re;
    basesoc_uart_rxfull_re <= csr_bankarray_csrbank8_rxfull_re;
    if (sys_rst) begin
        basesoc_reset_storage <= 2'd0;
        basesoc_reset_re <= 1'd0;
        basesoc_scratch_storage <= 32'd305419896;
        basesoc_scratch_re <= 1'd0;
        basesoc_bus_errors_re <= 1'd0;
        basesoc_bus_errors <= 32'd0;
        basesoc_basesoc_ram_bus_ack <= 1'd0;
        basesoc_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        basesoc_tx_tick <= 1'd0;
        basesoc_rx_tick <= 1'd0;
        basesoc_rx_rx_d <= 1'd0;
        basesoc_uart_txfull_re <= 1'd0;
        basesoc_uart_rxempty_re <= 1'd0;
        basesoc_uart_status_re <= 1'd0;
        basesoc_uart_pending_re <= 1'd0;
        basesoc_uart_pending_r <= 2'd0;
        basesoc_uart_enable_storage <= 2'd0;
        basesoc_uart_enable_re <= 1'd0;
        basesoc_uart_txempty_re <= 1'd0;
        basesoc_uart_rxfull_re <= 1'd0;
        basesoc_uart_tx_fifo_readable <= 1'd0;
        basesoc_uart_tx_fifo_level0 <= 5'd0;
        basesoc_uart_tx_fifo_produce <= 4'd0;
        basesoc_uart_tx_fifo_consume <= 4'd0;
        basesoc_uart_rx_fifo_readable <= 1'd0;
        basesoc_uart_rx_fifo_level0 <= 5'd0;
        basesoc_uart_rx_fifo_produce <= 4'd0;
        basesoc_uart_rx_fifo_consume <= 4'd0;
        basesoc_timer_load_storage <= 32'd0;
        basesoc_timer_load_re <= 1'd0;
        basesoc_timer_reload_storage <= 32'd0;
        basesoc_timer_reload_re <= 1'd0;
        basesoc_timer_en_storage <= 1'd0;
        basesoc_timer_en_re <= 1'd0;
        basesoc_timer_update_value_storage <= 1'd0;
        basesoc_timer_update_value_re <= 1'd0;
        basesoc_timer_value_status <= 32'd0;
        basesoc_timer_value_re <= 1'd0;
        basesoc_timer_zero_pending <= 1'd0;
        basesoc_timer_zero_trigger_d <= 1'd0;
        basesoc_timer_status_re <= 1'd0;
        basesoc_timer_pending_re <= 1'd0;
        basesoc_timer_pending_r <= 1'd0;
        basesoc_timer_enable_storage <= 1'd0;
        basesoc_timer_enable_re <= 1'd0;
        basesoc_timer_value <= 32'd0;
        leds_storage <= 1'd0;
        leds_re <= 1'd0;
        leds_chaser <= 1'd0;
        leds_mode <= 1'd0;
        leds_count <= 25'd30000000;
        spi_clk <= 1'd0;
        spi_mosi <= 1'd0;
        spi_cs_n <= 1'd0;
        spi_miso_1 <= 8'd0;
        spi_control_storage <= 16'd0;
        spi_control_re <= 1'd0;
        spi_status_re <= 1'd0;
        spi_mosi_re <= 1'd0;
        spi_miso_re <= 1'd0;
        spi_cs_storage <= 17'd1;
        spi_cs_re <= 1'd0;
        spi_loopback_storage <= 1'd0;
        spi_loopback_re <= 1'd0;
        spi_count <= 3'd0;
        spi_clk_divider1 <= 16'd0;
        spi_mosi_data <= 8'd0;
        spi_mosi_sel <= 3'd0;
        spi_miso_data <= 8'd0;
        lora_reset_storage <= 1'd0;
        lora_reset_re <= 1'd0;
        _w_storage <= 3'd5;
        _w_re <= 1'd0;
        _r_re <= 1'd0;
        basesoc_spiflash_phy_storage <= 8'd1;
        basesoc_spiflash_phy_re <= 1'd0;
        basesoc_spiflash_phy_div <= 8'd0;
        basesoc_spiflash_phy_cnt <= 8'd0;
        basesoc_spiflash_phy_clk <= 1'd0;
        basesoc_spiflash_phy_posedge_reg <= 2'd0;
        basesoc_spiflash_phy_clk_reg <= 1'd0;
        basesoc_spiflash_phy_count <= 4'd11;
        basesoc_spiflash_phy_dq_oe <= 1'd0;
        basesoc_spiflash_phy_sr_out <= 32'd0;
        basesoc_spiflash_phy_sr_in <= 32'd0;
        basesoc_mmap_burst_cs <= 1'd0;
        basesoc_mmap_count <= 9'd256;
        basesoc_mmap_storage <= 8'd0;
        basesoc_mmap_re <= 1'd0;
        basesoc_master_cs_storage <= 1'd0;
        basesoc_master_cs_re <= 1'd0;
        basesoc_master_phyconfig_storage <= 24'd0;
        basesoc_master_phyconfig_re <= 1'd0;
        basesoc_master_status_re <= 1'd0;
        basesoc_master_tx_fifo_pipe_valid_source_valid <= 1'd0;
        basesoc_master_tx_fifo_pipe_valid_source_payload_data <= 32'd0;
        basesoc_master_tx_fifo_pipe_valid_source_payload_len <= 6'd0;
        basesoc_master_tx_fifo_pipe_valid_source_payload_width <= 4'd0;
        basesoc_master_tx_fifo_pipe_valid_source_payload_mask <= 8'd0;
        basesoc_master_rx_fifo_pipe_valid_source_valid <= 1'd0;
        basesoc_master_rx_fifo_pipe_valid_source_payload_data <= 32'd0;
        dfi_p0_rddata_valid <= 1'd0;
        rddata_en <= 3'd0;
        basesoc_sdram_storage <= 4'd1;
        basesoc_sdram_re <= 1'd0;
        basesoc_sdram_command_storage <= 8'd0;
        basesoc_sdram_command_re <= 1'd0;
        basesoc_sdram_address_re <= 1'd0;
        basesoc_sdram_baddress_re <= 1'd0;
        basesoc_sdram_wrdata_re <= 1'd0;
        basesoc_sdram_rddata_status <= 32'd0;
        basesoc_sdram_rddata_re <= 1'd0;
        basesoc_sdram_dfi_p0_address <= 11'd0;
        basesoc_sdram_dfi_p0_bank <= 2'd0;
        basesoc_sdram_dfi_p0_cas_n <= 1'd1;
        basesoc_sdram_dfi_p0_cs_n <= 1'd1;
        basesoc_sdram_dfi_p0_ras_n <= 1'd1;
        basesoc_sdram_dfi_p0_we_n <= 1'd1;
        basesoc_sdram_dfi_p0_wrdata_en <= 1'd0;
        basesoc_sdram_dfi_p0_rddata_en <= 1'd0;
        basesoc_sdram_cmd_payload_a <= 11'd0;
        basesoc_sdram_cmd_payload_ba <= 2'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd0;
        basesoc_sdram_cmd_payload_we <= 1'd0;
        basesoc_sdram_timer_count1 <= 10'd937;
        basesoc_sdram_postponer_req_o <= 1'd0;
        basesoc_sdram_postponer_count <= 1'd0;
        basesoc_sdram_sequencer_done1 <= 1'd0;
        basesoc_sdram_sequencer_trigger <= 3'd0;
        basesoc_sdram_sequencer_count <= 1'd0;
        basesoc_sdram_bankmachine0_level <= 4'd0;
        basesoc_sdram_bankmachine0_produce <= 3'd0;
        basesoc_sdram_bankmachine0_consume <= 3'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr <= 19'd0;
        basesoc_sdram_bankmachine0_row <= 11'd0;
        basesoc_sdram_bankmachine0_row_opened <= 1'd0;
        basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_twtpcon_count <= 2'd0;
        basesoc_sdram_bankmachine0_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_trccon_count <= 2'd0;
        basesoc_sdram_bankmachine0_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_trascon_count <= 2'd0;
        basesoc_sdram_bankmachine1_level <= 4'd0;
        basesoc_sdram_bankmachine1_produce <= 3'd0;
        basesoc_sdram_bankmachine1_consume <= 3'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr <= 19'd0;
        basesoc_sdram_bankmachine1_row <= 11'd0;
        basesoc_sdram_bankmachine1_row_opened <= 1'd0;
        basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_twtpcon_count <= 2'd0;
        basesoc_sdram_bankmachine1_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_trccon_count <= 2'd0;
        basesoc_sdram_bankmachine1_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_trascon_count <= 2'd0;
        basesoc_sdram_bankmachine2_level <= 4'd0;
        basesoc_sdram_bankmachine2_produce <= 3'd0;
        basesoc_sdram_bankmachine2_consume <= 3'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr <= 19'd0;
        basesoc_sdram_bankmachine2_row <= 11'd0;
        basesoc_sdram_bankmachine2_row_opened <= 1'd0;
        basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_twtpcon_count <= 2'd0;
        basesoc_sdram_bankmachine2_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_trccon_count <= 2'd0;
        basesoc_sdram_bankmachine2_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_trascon_count <= 2'd0;
        basesoc_sdram_bankmachine3_level <= 4'd0;
        basesoc_sdram_bankmachine3_produce <= 3'd0;
        basesoc_sdram_bankmachine3_consume <= 3'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr <= 19'd0;
        basesoc_sdram_bankmachine3_row <= 11'd0;
        basesoc_sdram_bankmachine3_row_opened <= 1'd0;
        basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_twtpcon_count <= 2'd0;
        basesoc_sdram_bankmachine3_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_trccon_count <= 2'd0;
        basesoc_sdram_bankmachine3_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_trascon_count <= 2'd0;
        basesoc_sdram_choose_cmd_grant <= 2'd0;
        basesoc_sdram_choose_req_grant <= 2'd0;
        basesoc_sdram_trrdcon_ready <= 1'd0;
        basesoc_sdram_trrdcon_count <= 1'd0;
        basesoc_sdram_tccdcon_ready <= 1'd0;
        basesoc_sdram_tccdcon_count <= 1'd0;
        basesoc_sdram_twtrcon_ready <= 1'd0;
        basesoc_sdram_twtrcon_count <= 3'd0;
        basesoc_sdram_time0 <= 5'd0;
        basesoc_sdram_time1 <= 4'd0;
        basesoc_wishbone_bridge_cmd_count <= 2'd0;
        basesoc_wishbone_bridge_cmd_addr <= 19'd0;
        basesoc_wishbone_bridge_cmd_we <= 1'd0;
        basesoc_wishbone_bridge_wdata_converter_converter_mux <= 2'd0;
        basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data <= 128'd0;
        basesoc_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= 3'd0;
        basesoc_wishbone_bridge_rdata_converter_converter_demux <= 2'd0;
        basesoc_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
        basesoc_wishbone_bridge_aborted <= 1'd0;
        basesoc_interface1_re <= 1'd0;
        basesoc_interface1_we <= 1'd0;
        socbushandler_grant <= 1'd0;
        socbushandler_slaves <= 5'd0;
        socbushandler_count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        basesoc_rs232phytx_state <= 1'd0;
        basesoc_rs232phyrx_state <= 1'd0;
        basesoc_spimaster_state <= 2'd0;
        basesoc_grant <= 1'd0;
        basesoc_litespimmap_state <= 4'd0;
        basesoc_litespiphy_state <= 2'd0;
        basesoc_litedramcore_refresher_state <= 2'd0;
        basesoc_litedramcore_bankmachine0_state <= 3'd0;
        basesoc_litedramcore_bankmachine1_state <= 3'd0;
        basesoc_litedramcore_bankmachine2_state <= 3'd0;
        basesoc_litedramcore_bankmachine3_state <= 3'd0;
        basesoc_litedramcore_multiplexer_state <= 3'd0;
        basesoc_litedramcore_new_master_wdata_ready <= 1'd0;
        basesoc_litedramcore_new_master_rdata_valid0 <= 1'd0;
        basesoc_litedramcore_new_master_rdata_valid1 <= 1'd0;
        basesoc_litedramcore_new_master_rdata_valid2 <= 1'd0;
        basesoc_litedramcore_new_master_rdata_valid3 <= 1'd0;
        basesoc_fullmemorywe_state <= 2'd0;
        basesoc_litedramnativeportconverter_state <= 1'd0;
        basesoc_fsm_state <= 2'd0;
        basesoc_wishbone2csr_state <= 2'd0;
    end
    regs0 <= serial_rx;
    regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 10444-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:10443];
initial begin
	$readmemh("colorlight_i5_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[basesoc_basesoc_adr];
end
assign basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8
reg [31:0] sram[0:2047];
initial begin
	$readmemh("colorlight_i5_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin : mem_write_block
	integer we_index;
	for(we_index = 0; we_index < 4; we_index=we_index+1)
		if (basesoc_ram_we[we_index])
			sram[basesoc_ram_adr][we_index*8 +: 8] <= basesoc_ram_dat_w[we_index*8 +: 8];
	sram_adr0 <= basesoc_ram_adr;
end
assign basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 47-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:46];
initial begin
	$readmemh("colorlight_i5_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_wrport_we)
		storage[basesoc_uart_tx_fifo_wrport_adr] <= basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[basesoc_uart_tx_fifo_rdport_adr];
end
assign basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_wrport_we)
		storage_1[basesoc_uart_rx_fifo_wrport_adr] <= basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[basesoc_uart_rx_fifo_rdport_adr];
end
assign basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance USRMCLK of USRMCLK Module.
//------------------------------------------------------------------------------
USRMCLK USRMCLK(
	// Inputs.
	.USRMCLKI  (basesoc_spiflash_phy_clk_reg),
	.USRMCLKTS (1'd0)
);

//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First 
// Port 1 | Read: Async | Write: ---- | 
reg [21:0] storage_2[0:7];
reg [21:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine0_wrport_we)
		storage_2[basesoc_sdram_bankmachine0_wrport_adr] <= basesoc_sdram_bankmachine0_wrport_dat_w;
	storage_2_dat0 <= storage_2[basesoc_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine0_wrport_dat_r = storage_2_dat0;
assign basesoc_sdram_bankmachine0_rdport_dat_r = storage_2[basesoc_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First 
// Port 1 | Read: Async | Write: ---- | 
reg [21:0] storage_3[0:7];
reg [21:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine1_wrport_we)
		storage_3[basesoc_sdram_bankmachine1_wrport_adr] <= basesoc_sdram_bankmachine1_wrport_dat_w;
	storage_3_dat0 <= storage_3[basesoc_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine1_wrport_dat_r = storage_3_dat0;
assign basesoc_sdram_bankmachine1_rdport_dat_r = storage_3[basesoc_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 8-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First 
// Port 1 | Read: Async | Write: ---- | 
reg [21:0] storage_4[0:7];
reg [21:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine2_wrport_we)
		storage_4[basesoc_sdram_bankmachine2_wrport_adr] <= basesoc_sdram_bankmachine2_wrport_dat_w;
	storage_4_dat0 <= storage_4[basesoc_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine2_wrport_dat_r = storage_4_dat0;
assign basesoc_sdram_bankmachine2_rdport_dat_r = storage_4[basesoc_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 8-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First 
// Port 1 | Read: Async | Write: ---- | 
reg [21:0] storage_5[0:7];
reg [21:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine3_wrport_we)
		storage_5[basesoc_sdram_bankmachine3_wrport_adr] <= basesoc_sdram_bankmachine3_wrport_dat_w;
	storage_5_dat0 <= storage_5[basesoc_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine3_wrport_dat_r = storage_5_dat0;
assign basesoc_sdram_bankmachine3_rdport_dat_r = storage_5[basesoc_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 512-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [21:0] tag_mem[0:511];
reg [8:0] tag_mem_adr0;
always @(posedge sys_clk) begin
	if (basesoc_tag_port_we)
		tag_mem[basesoc_tag_port_adr] <= basesoc_tag_port_dat_w;
	tag_mem_adr0 <= basesoc_tag_port_adr;
end
assign basesoc_tag_port_dat_r = tag_mem[tag_mem_adr0];


(* FREQUENCY_PIN_CLKI = "25.0", FREQUENCY_PIN_CLKOP = "60.0", FREQUENCY_PIN_CLKOS = "60.0", ICP_CURRENT = "6", LPF_RESISTOR = "16", MFG_ENABLE_FILTEROPAMP = "1", MFG_GMCREF_SEL = "2" *)
//------------------------------------------------------------------------------
// Instance EHXPLLL of EHXPLLL Module.
//------------------------------------------------------------------------------
EHXPLLL #(
	// Parameters.
	.CLKFB_DIV     (5'd24),
	.CLKI_DIV      (1'd1),
	.CLKOP_CPHASE  (4'd9),
	.CLKOP_DIV     (4'd10),
	.CLKOP_ENABLE  ("ENABLED"),
	.CLKOP_FPHASE  (1'd0),
	.CLKOS2_CPHASE (1'd0),
	.CLKOS2_DIV    (1'd1),
	.CLKOS2_ENABLE ("ENABLED"),
	.CLKOS2_FPHASE (1'd0),
	.CLKOS_CPHASE  (4'd14),
	.CLKOS_DIV     (4'd10),
	.CLKOS_ENABLE  ("ENABLED"),
	.CLKOS_FPHASE  (1'd0),
	.FEEDBK_PATH   ("INT_OS2")
) EHXPLLL (
	// Inputs.
	.CLKI   (crg_clkin),
	.RST    (crg_reset),
	.STDBY  (crg_stdby),

	// Outputs.
	.CLKOP  (crg_clkout0),
	.CLKOS  (crg_clkout1),
	.CLKOS2 (basesoc_crg_ecp5pll),
	.LOCK   (basesoc_crg_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (basesoc_dbus_err),
	.externalInterruptArray (basesoc_interrupt),
	.externalResetVector    (basesoc_vexriscv),
	.iBusWishbone_ACK       (basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (basesoc_ibus_err),
	.reset                  ((sys_rst | basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (basesoc_dbus_adr),
	.dBusWishbone_BTE       (basesoc_dbus_bte),
	.dBusWishbone_CTI       (basesoc_dbus_cti),
	.dBusWishbone_CYC       (basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (basesoc_dbus_sel),
	.dBusWishbone_STB       (basesoc_dbus_stb),
	.dBusWishbone_WE        (basesoc_dbus_we),
	.iBusWishbone_ADR       (basesoc_ibus_adr),
	.iBusWishbone_BTE       (basesoc_ibus_bte),
	.iBusWishbone_CTI       (basesoc_ibus_cti),
	.iBusWishbone_CYC       (basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (basesoc_ibus_sel),
	.iBusWishbone_STB       (basesoc_ibus_stb),
	.iBusWishbone_WE        (basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain0[0:511];
reg [8:0] data_mem_grain0_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[0])
		data_mem_grain0[basesoc_data_port_adr] <= basesoc_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain1[0:511];
reg [8:0] data_mem_grain1_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[1])
		data_mem_grain1[basesoc_data_port_adr] <= basesoc_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain2[0:511];
reg [8:0] data_mem_grain2_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[2])
		data_mem_grain2[basesoc_data_port_adr] <= basesoc_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain3[0:511];
reg [8:0] data_mem_grain3_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[3])
		data_mem_grain3[basesoc_data_port_adr] <= basesoc_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain4: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain4[0:511];
reg [8:0] data_mem_grain4_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[4])
		data_mem_grain4[basesoc_data_port_adr] <= basesoc_data_port_dat_w[39:32];
	data_mem_grain4_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[39:32] = data_mem_grain4[data_mem_grain4_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain5: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain5[0:511];
reg [8:0] data_mem_grain5_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[5])
		data_mem_grain5[basesoc_data_port_adr] <= basesoc_data_port_dat_w[47:40];
	data_mem_grain5_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[47:40] = data_mem_grain5[data_mem_grain5_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain6: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain6[0:511];
reg [8:0] data_mem_grain6_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[6])
		data_mem_grain6[basesoc_data_port_adr] <= basesoc_data_port_dat_w[55:48];
	data_mem_grain6_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[55:48] = data_mem_grain6[data_mem_grain6_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain7: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain7[0:511];
reg [8:0] data_mem_grain7_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[7])
		data_mem_grain7[basesoc_data_port_adr] <= basesoc_data_port_dat_w[63:56];
	data_mem_grain7_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[63:56] = data_mem_grain7[data_mem_grain7_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain8: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain8[0:511];
reg [8:0] data_mem_grain8_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[8])
		data_mem_grain8[basesoc_data_port_adr] <= basesoc_data_port_dat_w[71:64];
	data_mem_grain8_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[71:64] = data_mem_grain8[data_mem_grain8_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain9: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain9[0:511];
reg [8:0] data_mem_grain9_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[9])
		data_mem_grain9[basesoc_data_port_adr] <= basesoc_data_port_dat_w[79:72];
	data_mem_grain9_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[79:72] = data_mem_grain9[data_mem_grain9_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain10: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain10[0:511];
reg [8:0] data_mem_grain10_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[10])
		data_mem_grain10[basesoc_data_port_adr] <= basesoc_data_port_dat_w[87:80];
	data_mem_grain10_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[87:80] = data_mem_grain10[data_mem_grain10_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain11: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain11[0:511];
reg [8:0] data_mem_grain11_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[11])
		data_mem_grain11[basesoc_data_port_adr] <= basesoc_data_port_dat_w[95:88];
	data_mem_grain11_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[95:88] = data_mem_grain11[data_mem_grain11_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain12: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain12[0:511];
reg [8:0] data_mem_grain12_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[12])
		data_mem_grain12[basesoc_data_port_adr] <= basesoc_data_port_dat_w[103:96];
	data_mem_grain12_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[103:96] = data_mem_grain12[data_mem_grain12_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain13: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain13[0:511];
reg [8:0] data_mem_grain13_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[13])
		data_mem_grain13[basesoc_data_port_adr] <= basesoc_data_port_dat_w[111:104];
	data_mem_grain13_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[111:104] = data_mem_grain13[data_mem_grain13_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain14: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain14[0:511];
reg [8:0] data_mem_grain14_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[14])
		data_mem_grain14[basesoc_data_port_adr] <= basesoc_data_port_dat_w[119:112];
	data_mem_grain14_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[119:112] = data_mem_grain14[data_mem_grain14_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain15: 512-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First
reg [7:0] data_mem_grain15[0:511];
reg [8:0] data_mem_grain15_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[15])
		data_mem_grain15[basesoc_data_port_adr] <= basesoc_data_port_dat_w[127:120];
	data_mem_grain15_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[127:120] = data_mem_grain15[data_mem_grain15_adr0];


//------------------------------------------------------------------------------
// Instance FD1S3BX of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX(
	// Inputs.
	.CK (sys_clk),
	.D  (1'd0),
	.PD ((~crg_locked)),

	// Outputs.
	.Q  (rst10)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_1 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_1(
	// Inputs.
	.CK (sys_clk),
	.D  (rst10),
	.PD ((~crg_locked)),

	// Outputs.
	.Q  (sys_rst)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_2 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_2(
	// Inputs.
	.CK (sys_ps_clk),
	.D  (1'd0),
	.PD ((~crg_locked)),

	// Outputs.
	.Q  (rst11)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_3 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_3(
	// Inputs.
	.CK (sys_ps_clk),
	.D  (rst11),
	.PD ((~crg_locked)),

	// Outputs.
	.Q  (sys_ps_rst)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F(
	// Inputs.
	.D0   (1'd1),
	.D1   (1'd0),
	.SCLK (sys_ps_clk),

	// Outputs.
	.Q    (sdram_clock)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO (
	// Inputs.
	.B (i2c_scl),
	.I (1'd0),
	.T ((~(~scl))),

	// Outputs.
	.O (i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_1 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_1 (
	// Inputs.
	.B (i2c_sda),
	.I (1'd0),
	.T ((~(oe & (~sda0)))),

	// Outputs.
	.O (sda1)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX(
	// Inputs.
	.D    (basesoc_spiflash_phy_cs_n),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (spiflash_cs_n)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_1 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_1(
	// Inputs.
	.D    (basesoc_spiflash_phy_dq_o),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (spiflash_mosi)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX(
	// Inputs.
	.D    (spiflash_miso),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (basesoc_spiflash_phy_dq_i[1])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_2 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_2(
	// Inputs.
	.D    (dfi_p0_address[0]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[0])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_3 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_3(
	// Inputs.
	.D    (dfi_p0_address[1]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[1])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_4 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_4(
	// Inputs.
	.D    (dfi_p0_address[2]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[2])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_5 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_5(
	// Inputs.
	.D    (dfi_p0_address[3]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[3])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_6 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_6(
	// Inputs.
	.D    (dfi_p0_address[4]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[4])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_7 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_7(
	// Inputs.
	.D    (dfi_p0_address[5]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[5])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_8 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_8(
	// Inputs.
	.D    (dfi_p0_address[6]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[6])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_9 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_9(
	// Inputs.
	.D    (dfi_p0_address[7]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[7])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_10 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_10(
	// Inputs.
	.D    (dfi_p0_address[8]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[8])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_11 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_11(
	// Inputs.
	.D    (dfi_p0_address[9]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[9])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_12 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_12(
	// Inputs.
	.D    (dfi_p0_address[10]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[10])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_13 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_13(
	// Inputs.
	.D    (dfi_p0_bank[0]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_ba[0])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_14 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_14(
	// Inputs.
	.D    (dfi_p0_bank[1]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_ba[1])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_15 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_15(
	// Inputs.
	.D    (dfi_p0_ras_n),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_ras_n)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_16 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_16(
	// Inputs.
	.D    (dfi_p0_cas_n),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_cas_n)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_17 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_17(
	// Inputs.
	.D    (dfi_p0_we_n),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_we_n)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_2 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_2 (
	// Inputs.
	.B (sdram_dq[0]),
	.I (latticeecp5trellissdrtristateimpl0__o),
	.T (latticeecp5trellissdrtristateimpl0_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl0__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_3 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_3 (
	// Inputs.
	.B (sdram_dq[1]),
	.I (latticeecp5trellissdrtristateimpl1__o),
	.T (latticeecp5trellissdrtristateimpl1_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl1__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_4 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_4 (
	// Inputs.
	.B (sdram_dq[2]),
	.I (latticeecp5trellissdrtristateimpl2__o),
	.T (latticeecp5trellissdrtristateimpl2_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl2__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_5 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_5 (
	// Inputs.
	.B (sdram_dq[3]),
	.I (latticeecp5trellissdrtristateimpl3__o),
	.T (latticeecp5trellissdrtristateimpl3_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl3__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_6 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_6 (
	// Inputs.
	.B (sdram_dq[4]),
	.I (latticeecp5trellissdrtristateimpl4__o),
	.T (latticeecp5trellissdrtristateimpl4_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl4__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_7 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_7 (
	// Inputs.
	.B (sdram_dq[5]),
	.I (latticeecp5trellissdrtristateimpl5__o),
	.T (latticeecp5trellissdrtristateimpl5_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl5__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_8 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_8 (
	// Inputs.
	.B (sdram_dq[6]),
	.I (latticeecp5trellissdrtristateimpl6__o),
	.T (latticeecp5trellissdrtristateimpl6_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl6__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_9 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_9 (
	// Inputs.
	.B (sdram_dq[7]),
	.I (latticeecp5trellissdrtristateimpl7__o),
	.T (latticeecp5trellissdrtristateimpl7_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl7__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_10 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_10 (
	// Inputs.
	.B (sdram_dq[8]),
	.I (latticeecp5trellissdrtristateimpl8__o),
	.T (latticeecp5trellissdrtristateimpl8_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl8__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_11 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_11 (
	// Inputs.
	.B (sdram_dq[9]),
	.I (latticeecp5trellissdrtristateimpl9__o),
	.T (latticeecp5trellissdrtristateimpl9_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl9__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_12 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_12 (
	// Inputs.
	.B (sdram_dq[10]),
	.I (latticeecp5trellissdrtristateimpl10__o),
	.T (latticeecp5trellissdrtristateimpl10_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl10__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_13 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_13 (
	// Inputs.
	.B (sdram_dq[11]),
	.I (latticeecp5trellissdrtristateimpl11__o),
	.T (latticeecp5trellissdrtristateimpl11_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl11__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_14 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_14 (
	// Inputs.
	.B (sdram_dq[12]),
	.I (latticeecp5trellissdrtristateimpl12__o),
	.T (latticeecp5trellissdrtristateimpl12_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl12__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_15 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_15 (
	// Inputs.
	.B (sdram_dq[13]),
	.I (latticeecp5trellissdrtristateimpl13__o),
	.T (latticeecp5trellissdrtristateimpl13_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl13__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_16 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_16 (
	// Inputs.
	.B (sdram_dq[14]),
	.I (latticeecp5trellissdrtristateimpl14__o),
	.T (latticeecp5trellissdrtristateimpl14_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl14__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_17 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_17 (
	// Inputs.
	.B (sdram_dq[15]),
	.I (latticeecp5trellissdrtristateimpl15__o),
	.T (latticeecp5trellissdrtristateimpl15_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl15__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_18 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_18 (
	// Inputs.
	.B (sdram_dq[16]),
	.I (latticeecp5trellissdrtristateimpl16__o),
	.T (latticeecp5trellissdrtristateimpl16_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl16__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_19 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_19 (
	// Inputs.
	.B (sdram_dq[17]),
	.I (latticeecp5trellissdrtristateimpl17__o),
	.T (latticeecp5trellissdrtristateimpl17_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl17__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_20 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_20 (
	// Inputs.
	.B (sdram_dq[18]),
	.I (latticeecp5trellissdrtristateimpl18__o),
	.T (latticeecp5trellissdrtristateimpl18_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl18__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_21 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_21 (
	// Inputs.
	.B (sdram_dq[19]),
	.I (latticeecp5trellissdrtristateimpl19__o),
	.T (latticeecp5trellissdrtristateimpl19_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl19__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_22 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_22 (
	// Inputs.
	.B (sdram_dq[20]),
	.I (latticeecp5trellissdrtristateimpl20__o),
	.T (latticeecp5trellissdrtristateimpl20_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl20__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_23 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_23 (
	// Inputs.
	.B (sdram_dq[21]),
	.I (latticeecp5trellissdrtristateimpl21__o),
	.T (latticeecp5trellissdrtristateimpl21_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl21__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_24 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_24 (
	// Inputs.
	.B (sdram_dq[22]),
	.I (latticeecp5trellissdrtristateimpl22__o),
	.T (latticeecp5trellissdrtristateimpl22_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl22__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_25 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_25 (
	// Inputs.
	.B (sdram_dq[23]),
	.I (latticeecp5trellissdrtristateimpl23__o),
	.T (latticeecp5trellissdrtristateimpl23_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl23__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_26 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_26 (
	// Inputs.
	.B (sdram_dq[24]),
	.I (latticeecp5trellissdrtristateimpl24__o),
	.T (latticeecp5trellissdrtristateimpl24_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl24__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_27 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_27 (
	// Inputs.
	.B (sdram_dq[25]),
	.I (latticeecp5trellissdrtristateimpl25__o),
	.T (latticeecp5trellissdrtristateimpl25_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl25__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_28 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_28 (
	// Inputs.
	.B (sdram_dq[26]),
	.I (latticeecp5trellissdrtristateimpl26__o),
	.T (latticeecp5trellissdrtristateimpl26_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl26__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_29 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_29 (
	// Inputs.
	.B (sdram_dq[27]),
	.I (latticeecp5trellissdrtristateimpl27__o),
	.T (latticeecp5trellissdrtristateimpl27_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl27__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_30 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_30 (
	// Inputs.
	.B (sdram_dq[28]),
	.I (latticeecp5trellissdrtristateimpl28__o),
	.T (latticeecp5trellissdrtristateimpl28_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl28__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_31 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_31 (
	// Inputs.
	.B (sdram_dq[29]),
	.I (latticeecp5trellissdrtristateimpl29__o),
	.T (latticeecp5trellissdrtristateimpl29_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl29__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_32 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_32 (
	// Inputs.
	.B (sdram_dq[30]),
	.I (latticeecp5trellissdrtristateimpl30__o),
	.T (latticeecp5trellissdrtristateimpl30_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl30__i)
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_33 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_33 (
	// Inputs.
	.B (sdram_dq[31]),
	.I (latticeecp5trellissdrtristateimpl31__o),
	.T (latticeecp5trellissdrtristateimpl31_oe_n),

	// Outputs.
	.O (latticeecp5trellissdrtristateimpl31__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_18 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_18(
	// Inputs.
	.D    (dfi_p0_wrdata[0]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl0__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_19 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_19(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl0_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_1 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_1(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl0__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[0])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_20 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_20(
	// Inputs.
	.D    (dfi_p0_wrdata[1]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl1__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_21 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_21(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl1_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_2 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_2(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl1__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[1])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_22 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_22(
	// Inputs.
	.D    (dfi_p0_wrdata[2]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl2__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_23 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_23(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl2_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_3 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_3(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl2__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[2])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_24 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_24(
	// Inputs.
	.D    (dfi_p0_wrdata[3]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl3__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_25 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_25(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl3_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_4 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_4(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl3__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[3])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_26 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_26(
	// Inputs.
	.D    (dfi_p0_wrdata[4]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl4__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_27 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_27(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl4_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_5 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_5(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl4__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[4])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_28 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_28(
	// Inputs.
	.D    (dfi_p0_wrdata[5]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl5__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_29 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_29(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl5_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_6 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_6(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl5__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[5])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_30 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_30(
	// Inputs.
	.D    (dfi_p0_wrdata[6]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl6__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_31 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_31(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl6_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_7 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_7(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl6__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[6])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_32 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_32(
	// Inputs.
	.D    (dfi_p0_wrdata[7]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl7__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_33 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_33(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl7_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_8 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_8(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl7__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[7])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_34 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_34(
	// Inputs.
	.D    (dfi_p0_wrdata[8]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl8__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_35 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_35(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl8_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_9 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_9(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl8__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[8])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_36 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_36(
	// Inputs.
	.D    (dfi_p0_wrdata[9]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl9__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_37 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_37(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl9_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_10 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_10(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl9__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[9])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_38 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_38(
	// Inputs.
	.D    (dfi_p0_wrdata[10]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl10__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_39 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_39(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl10_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_11 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_11(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl10__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[10])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_40 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_40(
	// Inputs.
	.D    (dfi_p0_wrdata[11]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl11__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_41 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_41(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl11_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_12 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_12(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl11__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[11])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_42 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_42(
	// Inputs.
	.D    (dfi_p0_wrdata[12]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl12__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_43 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_43(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl12_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_13 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_13(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl12__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[12])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_44 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_44(
	// Inputs.
	.D    (dfi_p0_wrdata[13]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl13__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_45 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_45(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl13_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_14 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_14(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl13__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[13])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_46 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_46(
	// Inputs.
	.D    (dfi_p0_wrdata[14]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl14__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_47 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_47(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl14_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_15 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_15(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl14__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[14])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_48 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_48(
	// Inputs.
	.D    (dfi_p0_wrdata[15]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl15__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_49 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_49(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl15_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_16 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_16(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl15__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[15])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_50 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_50(
	// Inputs.
	.D    (dfi_p0_wrdata[16]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl16__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_51 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_51(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl16_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_17 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_17(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl16__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[16])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_52 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_52(
	// Inputs.
	.D    (dfi_p0_wrdata[17]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl17__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_53 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_53(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl17_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_18 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_18(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl17__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[17])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_54 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_54(
	// Inputs.
	.D    (dfi_p0_wrdata[18]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl18__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_55 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_55(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl18_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_19 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_19(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl18__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[18])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_56 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_56(
	// Inputs.
	.D    (dfi_p0_wrdata[19]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl19__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_57 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_57(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl19_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_20 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_20(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl19__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[19])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_58 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_58(
	// Inputs.
	.D    (dfi_p0_wrdata[20]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl20__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_59 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_59(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl20_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_21 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_21(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl20__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[20])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_60 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_60(
	// Inputs.
	.D    (dfi_p0_wrdata[21]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl21__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_61 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_61(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl21_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_22 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_22(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl21__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[21])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_62 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_62(
	// Inputs.
	.D    (dfi_p0_wrdata[22]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl22__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_63 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_63(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl22_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_23 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_23(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl22__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[22])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_64 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_64(
	// Inputs.
	.D    (dfi_p0_wrdata[23]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl23__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_65 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_65(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl23_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_24 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_24(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl23__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[23])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_66 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_66(
	// Inputs.
	.D    (dfi_p0_wrdata[24]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl24__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_67 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_67(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl24_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_25 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_25(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl24__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[24])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_68 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_68(
	// Inputs.
	.D    (dfi_p0_wrdata[25]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl25__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_69 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_69(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl25_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_26 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_26(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl25__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[25])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_70 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_70(
	// Inputs.
	.D    (dfi_p0_wrdata[26]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl26__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_71 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_71(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl26_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_27 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_27(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl26__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[26])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_72 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_72(
	// Inputs.
	.D    (dfi_p0_wrdata[27]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl27__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_73 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_73(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl27_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_28 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_28(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl27__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[27])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_74 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_74(
	// Inputs.
	.D    (dfi_p0_wrdata[28]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl28__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_75 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_75(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl28_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_29 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_29(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl28__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[28])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_76 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_76(
	// Inputs.
	.D    (dfi_p0_wrdata[29]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl29__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_77 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_77(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl29_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_30 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_30(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl29__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[29])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_78 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_78(
	// Inputs.
	.D    (dfi_p0_wrdata[30]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl30__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_79 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_79(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl30_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_31 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_31(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl30__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[30])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_80 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_80(
	// Inputs.
	.D    (dfi_p0_wrdata[31]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl31__o)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_81 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_81(
	// Inputs.
	.D    ((~dfi_p0_wrdata_en)),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (latticeecp5trellissdrtristateimpl31_oe_n)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_32 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_32(
	// Inputs.
	.D    (latticeecp5trellissdrtristateimpl31__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[31])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-10-31 10:58:14.
//------------------------------------------------------------------------------
